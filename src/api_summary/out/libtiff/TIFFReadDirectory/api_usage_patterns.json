{
    "TIFFReadDirectory": [
        "### Core API Usage Summary for 'TIFFReadDirectory'\n\n**API Functionality**  \nAdvances the TIFF file to the next directory (image/page) and prepares it for reading. Used to iterate through multi-page or multi-image TIFF files.\n\n**Typical Usage**  \n- Counting the number of directories (pages) in a TIFF file.  \n- Processing each directory sequentially (e.g., extracting image data, metadata, or matrices).  \n- Iterating through sub-resolutions, overviews, or mask layers.\n\n**Key Parameters**  \n- `TIFF *tif`: A handle to an open TIFF file. No additional parameters are required; the function uses the internal state of the TIFF handle.\n\n**Return Values**  \n- **1**: Successfully advanced to the next directory.  \n- **0**: No more directories to read or an error occurred.\n\n**Error Handling**  \n- Most implementations assume a return value of `0` indicates the end of directories, not necessarily an error.  \n- Explicit error checking (e.g., via `TIFFGetErrorHandler`) is rare in examples but recommended for robustness.  \n- Corrupted directories may cause undefined behavior; best practice includes validating directory integrity when necessary.\n\n**Best Practices**  \n1. **Loop Structure**: Use in `do { ... } while (TIFFReadDirectory(tif))` or equivalent to traverse all directories.  \n2. **State Management**: Reset the directory index with `TIFFSetDirectory(tif, 0)` if re-iteration is needed.  \n3. **Multi-Page Handling**: For files with mixed content (e.g., images and metadata), verify directory properties (e.g., `TIFFTAG_SUBFILETYPE`) during iteration.  \n4. **Performance**: Avoid redundant directory scans; cache directory counts or offsets when possible.  \n5. **Error Resilience**: Combine with `TIFFLastDirectory` or error handlers to detect premature termination in critical applications.  \n\n**Example Usage Pattern**  \n```c\nTIFF *tif = TIFFOpen(\"file.tif\", \"r\");\nif (tif) {\n    int dir_count = 0;\n    do {\n        // Process current directory (e.g., read image data)\n        dir_count++;\n    } while (TIFFReadDirectory(tif));\n    TIFFClose(tif);\n    printf(\"Total directories: %d\\n\", dir_count);\n}\n```"
    ]
}