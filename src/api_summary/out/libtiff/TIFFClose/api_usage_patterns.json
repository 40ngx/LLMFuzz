{
    "TIFFClose": [
        "### Core API Usage Summary for 'TIFFClose'\n\n#### **API Functionality**\n- **Purpose**: Closes an opened TIFF file and releases associated resources.\n- **Role**: Ensures proper cleanup of TIFF handles, flushes pending writes, and frees memory allocated by libtiff.\n\n#### **Typical Usage**\n- Called after completing read/write operations on a `TIFF*` handle.\n- Used in destructors, cleanup routines, or after error conditions to prevent leaks.\n- **Examples**:\n  ```cpp\n  TIFF* tif = TIFFOpen(\"file.tif\", \"r\");\n  // ... operations ...\n  TIFFClose(tif); // Cleanup after use\n  ```\n\n#### **Key Parameters**\n- **`TIFF* tif`**: Pointer to the TIFF file handle obtained from `TIFFOpen`, `TIFFClientOpen`, etc.\n\n#### **Return Values**\n- **None**: `TIFFClose` is a `void` function; errors are typically handled during prior operations.\n\n#### **Error Handling**\n- **Pre-Close Validation**: Check if the `TIFF*` handle is non-null before closing to avoid undefined behavior.\n  ```cpp\n  if (tif) TIFFClose(tif); // Null-check before closing\n  ```\n- **Resource Leaks**: Ensure every `TIFFOpen`/`TIFFClientOpen` has a matching `TIFFClose`.\n\n#### **Best Practices**\n1. **Null Checks**: Always validate the `TIFF*` handle before closing.\n2. **RAII Patterns**: Use destructors or smart pointers to automate closing.\n   ```cpp\n   ~TiffLoader() { if (tiff) TIFFClose(tiff); }\n   ```\n3. **Multi-Page Handling**: Close after processing all directories in multi-page TIFFs.\n4. **Error Context**: Handle errors during read/write operations (e.g., `TIFFReadScanline` failures) before closing.\n5. **Custom Wrappers**: Use helper functions for centralized cleanup:\n   ```cpp\n   void TIFFCloseEx(TIFF* tif) { if (tif) TIFFClose(tif); }\n   ```\n\n#### **Common Pitfalls**\n- **Double-Closing**: Avoid closing the same `TIFF*` handle multiple times.\n- **Ignoring Write Errors**: Ensure write operations (e.g., `TIFFWriteScanline`) succeed before closing to prevent corrupt files.\n\n#### **Usage in Multi-Threading**\n- **Thread Safety**: Ensure thread-specific `TIFF*` handles are closed in the same thread context to avoid race conditions.\n\n#### **Cross-Platform Considerations**\n- **File Handles**: `TIFFClose` manages low-level file descriptors internally; no manual `fclose` is needed."
    ]
}