{
    "TIFFGetField": [
        "### Core API Usage Summary for 'TIFFGetField'\n\n**1. API Functionality**  \n- Retrieves metadata values from TIFF files using tag identifiers  \n- Handles multiple data types (integers, floats, strings, arrays)  \n- Supports both standard and custom TIFF tags  \n\n**2. Typical Usage**  \n```cpp\nuint32 width;\nTIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &width);\n```\n\n**3. Key Parameters**  \n- `TIFF* tif`: Opened TIFF handle  \n- `uint32 tag`: Tag identifier (e.g., TIFFTAG_IMAGEWIDTH)  \n- `...`: Variable arguments matching tag's expected data type(s)  \n\n**4. Return Values**  \n- Returns 1 (TRUE) if tag exists and parameters match  \n- Returns 0 (FALSE) for missing tags or parameter mismatches  \n- Some tags require multiple output parameters (e.g., TIFFTAG_COLORMAP)\n\n**5. Error Handling**  \n- Always check return value before using retrieved data  \n- Use TIFFGetFieldDefaulted() for optional tags with fallback values  \n- Validate retrieved values against expected ranges/formats  \n\n**6. Common Tags & Patterns**  \n| Tag | Typical Usage | Data Type |\n|-----|---------------|-----------|\n| TIFFTAG_IMAGEWIDTH | Image dimensions | uint32 |\n| TIFFTAG_BITSPERSAMPLE | Bit depth | uint16 |\n| TIFFTAG_PHOTOMETRIC | Color space | uint16 |\n| TIFFTAG_SAMPLESPERPIXEL | Channels | uint16 |\n| TIFFTAG_ICCPROFILE | Color profile | void* + size |\n\n**7. Best Practices**  \n- Use type-safe wrappers for complex data types  \n- Handle endianness when reading multi-byte values  \n- Combine with TIFFSetField for read/write consistency  \n- Prefer TIFFReadRGBAImage for pixel data in standardized formats  \n- Validate tag compatibility with current directory in multi-image files  \n\n**8. Special Cases**  \n- Array types: Pass pointer to array pointer + count variable  \n```cpp\nuint16* sampleinfo;\nTIFFGetField(tif, TIFFTAG_EXTRASAMPLES, &extrasamples, &sampleinfo);\n```\n- String values: Retrieve via pointer to char*  \n```cpp\nchar* software;\nTIFFGetField(tif, TIFFTAG_SOFTWARE, &software);\n```"
    ]
}