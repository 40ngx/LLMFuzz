{
    "TIFFRGBAImageGet": [
        "### TIFFRGBAImageGet API Summary\n\n**Functionality**  \nDecodes TIFF image data into a 32-bit RGBA raster buffer, handling color space conversions and planar configurations.\n\n**Typical Usage**  \n1. Initialize with `TIFFRGBAImageBegin`  \n2. Allocate raster buffer (`_TIFFmalloc`/C++ allocators)  \n3. Call `TIFFRGBAImageGet` to populate buffer  \n4. Cleanup with `TIFFRGBAImageEnd`\n\n**Key Parameters**  \n- `TIFFRGBAImage*`: Prepared image handle  \n- `uint32_t* raster`: Pre-allocated output buffer (size: width×height×4 bytes)  \n- `uint32_t width/height`: Dimensions from image struct  \n\n**Return Values**  \n- `1` on success  \n- `0` on failure (check via error handlers/return checks)\n\n**Error Handling**  \n1. Validate input with `TIFFRGBAImageOK` first  \n2. Check `TIFFRGBAImageGet` return value  \n3. Use error messages from `TIFFRGBAImageBegin`/`TIFFRGBAImageOK` on failure  \n\n**Best Practices**  \n1. Pre-check dimensions to prevent oversized allocations  \n2. Use libtiff's `_TIFFmalloc`/`_TIFFfree` for raster memory management  \n3. Handle orientation via `req_orientation` when needed  \n4. Validate photometric interpretation/sample format compatibility  \n5. Use RGBA8888/QImage-compatible buffer layouts for direct mapping  \n\n*(Patterns consistent across C/C++ implementations with exception handling variations)*"
    ]
}