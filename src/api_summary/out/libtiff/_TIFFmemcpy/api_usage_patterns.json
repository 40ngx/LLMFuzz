{
    "_TIFFmemcpy": [
        "### Core API Usage Summary for `_TIFFmemcpy`\n\n**1. API Functionality**  \n- Provides memory copy operations optimized for TIFF data handling.\n- Primarily used for transferring raw pixel data, tile/strip buffers, and image manipulation tasks.\n\n**2. Typical Usage**  \n- Copying raster data between buffers (e.g., `_TIFFmemcpy(pbiBits, raster, bi.biSizeImage)`).\n- Handling tile/line inversion during orientation fixes (e.g., vertical flips).\n- Transferring decoded data to output buffers in image converters.\n\n**3. Key Parameters**  \n- **Dest**: Destination buffer pointer (e.g., `pbiBits`, `work_line_buf`).\n- **Src**: Source data pointer (e.g., `raster`, `rasterForBottomLine`).\n- **Size**: Byte count derived from image metadata (e.g., `bi.biSizeImage`, `tileWidth * sizeof(uint32)`).\n\n**4. Return Values**  \n- No explicit return value checks in observed code; assumes success if parameters are valid. Likely follows `memcpy` semantics (no error return).\n\n**5. Error Handling**  \n- **No intrinsic error checking**: Relies on pre-validated buffer sizes/pointers.\n- Errors may manifest as crashes or corruption if buffers are misaligned or undersized.\n\n**6. Best Practices**  \n- Validate buffer allocations (e.g., use `_TIFFmalloc`/`_TIFFfree` pairs).\n- Ensure size calculations match TIFF metadata (e.g., `TIFFScanlineSize`, `TIFFTileSize`).\n- Prefer `_TIFFmemcpy` over `memcpy` for portability and alignment in TIFF contexts.  \n- Use in performance-critical paths (e.g., tile/strip processing) where raw copy efficiency matters."
    ]
}