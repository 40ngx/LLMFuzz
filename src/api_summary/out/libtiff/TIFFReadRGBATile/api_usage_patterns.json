{
    "TIFFReadRGBATile": [
        "### Summary of `TIFFReadRGBATile` API Usage:\n\n- **Functionality**:  \n  Reads a tile from a TIFF image into an RGBA buffer, handling decompression and color conversion. Primarily used for tiled TIFFs.\n\n- **Typical Usage**:  \n  ```c\n  bool ok = TIFFReadRGBATile(TIFF* tif, uint32 x, uint32 y, uint32* buffer);\n  ```\n  - Iterate over tile grid, read each tile, process RGBA data.\n\n- **Key Parameters**:\n  - `tif`: TIFF handle (from `TIFFOpen`).\n  - `x`, `y`: Tile coordinates (top-left corner in image space).\n  - `buffer`: Pre-allocated buffer for RGBA data (size ≥ `tile_width × tile_height × 4` bytes).\n\n- **Return Value**:\n  - `1` on success, `0` on failure. **Critical** to check return value for errors.\n\n- **Error Handling**:\n  - Check return value; log/return error if read fails.\n  - Cleanup resources (free buffers, close TIFF handle).\n  - Example:\n    ```c\n    if (!TIFFReadRGBATile(tif, x, y, buffer)) {\n      log_error(\"Read failed\");\n      goto cleanup;\n    }\n    ```\n\n- **Best Practices**:\n  1. **Check Tiling**: Use `TIFFIsTiled(tif)` before calling.\n  2. **Buffer Allocation**: Allocate buffer for `tile_width × tile_height × 4` bytes (RGBA).\n  3. **Orientation Handling**: TIFF stores tiles bottom-to-top; flip vertically during processing if needed.\n  4. **Color Conversion**: Convert RGBA to target format (e.g., BGRA→BGR, grayscale).\n  5. **Memory Management**: Free buffers with `_TIFFfree`/`delete[]`.\n  6. **Tile Boundaries**: Handle partial tiles at image edges (adjust `tile_width`/`tile_height`).\n\n### Example Workflow:\n```c\nTIFF* tif = TIFFOpen(\"image.tif\", \"r\");\nuint32 tile_width, tile_height;\nTIFFGetField(tif, TIFFTAG_TILEWIDTH, &tile_width);\nTIFFGetField(tif, TIFFTAG_TILELENGTH, &tile_height);\nuint32* buffer = _TIFFmalloc(tile_width * tile_height * sizeof(uint32));\n\nfor (uint32 y = 0; y < image_height; y += tile_height) {\n  for (uint32 x = 0; x < image_width; x += tile_width) {\n    if (!TIFFReadRGBATile(tif, x, y, buffer)) {\n      // Handle error\n    }\n    // Process buffer (e.g., convert RGBA to output format)\n  }\n}\n\n_TIFFfree(buffer);\nTIFFClose(tif);\n```"
    ]
}