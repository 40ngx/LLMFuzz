{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "file:\\.(c|cpp|cc)$ lang:c++ count:all TIFFPrintDirectory",
  "Site": {
    "BuildVersion": "316984_2025-03-18_6.1-1f1695fa27f5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 776\n//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"_TIFFmalloc\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"TIFFWriteEncodedTile\",\"_TIFFfree\",\"TIFFClose\"]\n/*\u003cCombination\u003e: [TIFF *TIFFStreamOpen(const char * , std::ostream * ),\n    TIFF *TIFFOpen(const char * filename, const char * mode),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    void *_TIFFmalloc(tmsize_t s),\n    tmsize_t TIFFReadEncodedTile(TIFF * tif, uint32_t tile, void * buf, tmsize_t size),\n    uint32_t TIFFComputeTile(TIFF * tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s),\n    tmsize_t TIFFWriteEncodedTile(TIFF * tif, uint32_t tile, void * data, tmsize_t cc),\n    void _TIFFfree(void * p),\n    void TIFFClose(TIFF * tif)\n*/\n//\u003cscore\u003e 8, nr_unique_branch: 2\n//\u003cQuality\u003e {\"density\":4,\"unique_branches\":{\"TIFFPrintDirectory\":[[298,17,298,34,0,0,4,0],[336,13,336,44,0,0,4,0]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"visited\":0}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_49(const uint8_t* data, size_t size) {\n\tif(size\u003c0) return 0;\n\n\tFILE *input_file_ptr = fopen(\"input_file\", \"wb\");\n\tif (input_file_ptr == NULL) {return 0;}\n\tfwrite(data, sizeof(uint8_t), size, input_file_ptr);\n\tfclose(input_file_ptr);\n\n    // write data into input_file.\n    FILE *in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF *in_tif = TIFFStreamOpen(\"MemTIFF\", \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // print directory\n    FILE *out_file = fopen(\"output_file\", \"wb\");\n    if (out_file == NULL) {\n        TIFFClose(in_tif);\n        assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    TIFFPrintDirectory(in_tif, out_file, 0);\n    assert_file_closed(\u0026out_file);;\n\n    TIFFClose(in_tif);\n\n    assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000049.cc",
        "path": "examples/libtiff/fuzzer_0/fuzzers/id_000049.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_0/fuzzers/id_000049.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              76,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"_TIFFmalloc\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"TIFFWriteEncodedTile\",\"_TIFFfree\",\"TIFFClose\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              45,
              18
            ],
            [
              163,
              18
            ],
            [
              232,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":4,\"unique_branches\":{\"TIFFPrintDirectory\":[[298,17,298,34,0,0,4,0],[336,13,336,44,0,0,4,0]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"visited\":0}"
        },
        {
          "limitHit": false,
          "lineNumber": 59,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, out_file, 0);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \"FuzzedDataProvider.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 776\n//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"_TIFFmalloc\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"TIFFWriteEncodedTile\",\"_TIFFfree\",\"TIFFClose\"]\n/*\u003cCombination\u003e: [TIFF *TIFFStreamOpen(const char * , std::ostream * ),\n    TIFF *TIFFOpen(const char * filename, const char * mode),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    void *_TIFFmalloc(tmsize_t s),\n    tmsize_t TIFFReadEncodedTile(TIFF * tif, uint32_t tile, void * buf, tmsize_t size),\n    uint32_t TIFFComputeTile(TIFF * tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s),\n    tmsize_t TIFFWriteEncodedTile(TIFF * tif, uint32_t tile, void * data, tmsize_t cc),\n    void _TIFFfree(void * p),\n    void TIFFClose(TIFF * tif)\n*/\n//\u003cscore\u003e 8, nr_unique_branch: 2\n//\u003cQuality\u003e {\"density\":4,\"unique_branches\":{\"TIFFPrintDirectory\":[[298,17,298,34,0,0,4,0],[336,13,336,44,0,0,4,0]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"visited\":0}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_49(const uint8_t* f_data, size_t f_size) {\n\tif(f_size\u003c18) return 0;\n\n\t\n\t//fuzzer vars shim {\n\t\tFuzzedDataProvider fdp(f_data, f_size);\n\t\tFDPConsumeRawBytes(const uint8_t *, data, size, fdp)\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_1, fuzz_str_sz_1, fdp);\n\t\tFDPConsumeIntegral(int64_t, fuzz_int64_t_2, fdp);\n\t//fuzzer shim end}\n\n\n\n\n    // write data into input_file.\n    FILE *in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF *in_tif = TIFFStreamOpen(fuzz_str_1, \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // print directory\n    FILE *out_file = fopen(\"output_file\", \"wb\");\n    if (out_file == NULL) {\n        TIFFClose(in_tif);\n        assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    TIFFPrintDirectory(in_tif, out_file, fuzz_int64_t_2);\n    assert_file_closed(\u0026out_file);;\n\n    TIFFClose(in_tif);\n\n    assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000049.cc",
        "path": "examples/libtiff/fuzzer_1/fuzzers/id_000049.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_1/fuzzers/id_000049.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              76,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"_TIFFmalloc\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"TIFFWriteEncodedTile\",\"_TIFFfree\",\"TIFFClose\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              45,
              18
            ],
            [
              163,
              18
            ],
            [
              232,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":4,\"unique_branches\":{\"TIFFPrintDirectory\":[[298,17,298,34,0,0,4,0],[336,13,336,44,0,0,4,0]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFPrintDirectory\",\"TIFFClose\"],\"visited\":0}"
        },
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, out_file, fuzz_int64_t_2);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "8722f0343793ce08807b342847b74f4bf9a38ddc"
        },
        "content": "// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n#include \u003cabsl/strings/string_view.h\u003e\n#include \u003cmemory\u003e\n#include \u003cstring\u003e\n#include \u003cutility\u003e\n\n#include \u003cboost/log/trivial.hpp\u003e\n#include \"src/openslideUtil.h\"\n#include \"src/tiffFile.h\"\n\n\nnamespace wsiToDicomConverter {\n\nTiffFile::TiffFile(absl::string_view path, const int32_t dirIndex) :\ntiffFilePath_(path), currentDirectoryIndex_(dirIndex) {\n  initalized_ = false;\n  tileReadBufSize_  = 0;\n  openslide_level_ = 0;\n  std::string path_str = std::move(static_cast\u003cstd::string\u003e(path));\n  tiffFile_ = TIFFOpen(path_str.c_str(), \"r\");\n  if (tiffFile_ == nullptr) {\n      return;\n  }\n  do {\n    // Uncomment to print description of tiff dir to stdio.\n    // TIFFPrintDirectory(tiffFile_, stdout);\n    tiffDir_.push_back(std::move(std::make_unique\u003cTiffDirectory\u003e(tiffFile_)));\n  } while (TIFFReadDirectory(tiffFile_));\n  TIFFSetDirectory(tiffFile_, currentDirectoryIndex_);\n  tileReadBufSize_ = TIFFTileSize(tiffFile_);\n  initalized_ = true;\n}\n\nTiffFile::TiffFile(const TiffFile \u0026tf, const int32_t dirIndex) :\ntiffFilePath_(tf.path()), currentDirectoryIndex_(dirIndex) {\n    initalized_ = false;\n    tileReadBufSize_  = 0;\n    openslide_level_ = 0;\n    tiffFile_ = TIFFOpen(tiffFilePath_.c_str(), \"r\");\n    if (tiffFile_ == nullptr) {\n      return;\n    }\n    const size_t dirCount = tf.directoryCount();\n    for (size_t idx = 0; idx \u003c dirCount; ++idx) {\n      tiffDir_.push_back((std::move(\n                      std::make_unique\u003cTiffDirectory\u003e(*tf.directory(idx)))));\n    }\n    TIFFSetDirectory(tiffFile_, currentDirectoryIndex_);\n    tileReadBufSize_ = tf.tileReadBufSize_;\n    if (!fileDirectory()-\u003eisJpeg2kCompressed()) {\n      osptr_ = nullptr;\n      openslide_level_ = 0;\n    } else {\n      osptr_ = std::make_unique\u003cOpenSlidePtr\u003e(tf.path());\n      openslide_t* opslide = osptr_-\u003eosr();\n      int64_t level_width = -1;\n      int64_t level_height = -1;\n      const int64_t targetWidth = fileDirectory()-\u003eimageWidth();\n      const int64_t targetHeight = fileDirectory()-\u003eimageHeight();\n      if (openslide_get_error(opslide)) {\n        BOOST_LOG_TRIVIAL(error) \u003c\u003c openslide_get_error(opslide);\n        throw 1;\n      }\n      const int32_t level_count = openslide_get_level_count(opslide);\n      for (openslide_level_ = 0;\n           openslide_level_ \u003c level_count;\n           ++openslide_level_) {\n        openslide_get_level_dimensions(opslide, openslide_level_,\n                                       \u0026level_width, \u0026level_height);\n        if (level_width == targetWidth \u0026\u0026 level_height == targetHeight) {\n          break;\n        }\n      }\n      if (level_width != targetWidth \u0026\u0026 level_height != targetHeight) {\n        BOOST_LOG_TRIVIAL(error) \u003c\u003c \"Could not find expected level in \"\n                                    \"JPG2000 encoded tiff.\";\n        throw 1;\n      }\n    }\n    initalized_ = true;\n}\n\nopenslide_t * TiffFile::getOpenslidePtr() {\n  return osptr_-\u003eosr();\n}\n\nint32_t TiffFile::getOpenslideLevel() const {\n  return openslide_level_;\n}\n\nTiffFile::~TiffFile() {\n  osptr_ = nullptr;\n  close();\n}\n\nvoid TiffFile::close() {\n  if (tiffFile_ == nullptr) {\n    return;\n  }\n  TIFFClose(tiffFile_);\n  tiffFile_ = nullptr;\n}\n\nstd::string TiffFile::path() const {\n  return tiffFilePath_;\n}\n\nint32_t TiffFile::directoryLevel() const {\n  return currentDirectoryIndex_;\n}\n\nbool TiffFile::isLoaded() const {\n  return (tiffFile_ != nullptr);\n}\n\nbool TiffFile::isInitalized() const {\n  return initalized_;\n}\n\nbool TiffFile::hasExtractablePyramidImages() const {\n  for (int32_t idx = 0; idx \u003c tiffDir_.size(); ++idx) {\n    if (tiffDir_[idx]-\u003eisExtractablePyramidImage()) {\n      return true;\n    }\n  }\n  return false;\n}\n\nint32_t TiffFile::getDirectoryIndexMatchingImageDimensions(uint32_t width,\nuint32_t height, bool isExtractablePyramidImage) const {\n  for (int32_t idx = 0; idx \u003c tiffDir_.size(); ++idx) {\n    if (!isExtractablePyramidImage ||\n        tiffDir_[idx]-\u003eisExtractablePyramidImage()) {\n      if (tiffDir_[idx]-\u003edoImageDimensionsMatch(width, height)) {\n        return idx;\n      }\n    }\n  }\n  return -1;\n}\n\nconst TiffDirectory *TiffFile::fileDirectory() const {\n  return directory(currentDirectoryIndex_);\n}\n\nconst TiffDirectory *TiffFile::directory(int64_t dirIndex) const {\n  return tiffDir_[dirIndex].get();\n}\n\nuint32_t TiffFile::directoryCount() const {\n  return tiffDir_.size();\n}\n\nclass TileReadBuffer {\n public:\n  explicit TileReadBuffer(uint64_t size);\n  virtual ~TileReadBuffer();\n  tdata_t buffer_;\n};\n\nTileReadBuffer::TileReadBuffer(uint64_t size) {\n  buffer_ = _TIFFmalloc(size);\n}\n\nTileReadBuffer::~TileReadBuffer() {\n  if (buffer_ != nullptr) {\n    _TIFFfree(buffer_);\n  }\n}\n\nstd::unique_ptr\u003cTiffTile\u003e TiffFile::tile(uint32_t tileIndex) {\n  if (tiffFile_ == nullptr) {\n    return nullptr;\n  }\n  TileReadBuffer readBuffer(tileReadBufSize_);\n  if (readBuffer.buffer_ == nullptr) {\n    return nullptr;\n  }\n  uint32_t bufferSize = TIFFReadRawTile(tiffFile_,\n                                        static_cast\u003cttile_t\u003e(tileIndex),\n                                        readBuffer.buffer_,\n                                        tileReadBufSize_);\n  if (bufferSize == 0) {\n    return nullptr;\n  }\n  std::unique_ptr\u003cuint8_t[]\u003e mem_buffer =\n                                       std::make_unique\u003cuint8_t[]\u003e(bufferSize);\n  if (mem_buffer == nullptr) {\n    return nullptr;\n  }\n  _TIFFmemcpy(mem_buffer.get(), readBuffer.buffer_, bufferSize);\n  return std::make_unique\u003cTiffTile\u003e(directory(directoryLevel()), tileIndex,\n                                    std::move(mem_buffer), bufferSize);\n}\n\n}  // namespace wsiToDicomConverter\n",
        "name": "tiffFile.cpp",
        "path": "src/tiffFile.cpp",
        "url": "/github.com/GoogleCloudPlatform/wsi-to-dicom-converter/-/blob/src/tiffFile.cpp"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              7,
              18
            ]
          ],
          "preview": "    // TIFFPrintDirectory(tiffFile_, stdout);"
        }
      ],
      "repository": {
        "name": "github.com/GoogleCloudPlatform/wsi-to-dicom-converter",
        "url": "/github.com/GoogleCloudPlatform/wsi-to-dicom-converter"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 510\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 2.6666667, nr_unique_branch: 0\n//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":2}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_30(const uint8_t *data, size_t size) {\n\tif(size\u003c0) return 0;\n\n\tFILE *input_file_ptr = fopen(\"input_file\", \"wb\");\n\tif (input_file_ptr == NULL) {return 0;}\n\tfwrite(data, sizeof(uint8_t), size, input_file_ptr);\n\tfclose(input_file_ptr);\n\n    // Write data into input_file\n    FILE *in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // Open input TIFF in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF *in_tif = TIFFStreamOpen(\"MemTIFF\", \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Set the output TIFF file name\n    const char *out_file_name = \"output_file\";\n    TIFFSetFileName(in_tif, out_file_name);\n\n    // Get the unmap file proc\n    TIFFUnmapFileProc unmap_file_proc = TIFFGetUnmapFileProc(in_tif);\n\n    // Convert LogL10 to Y\n    double logL10 = 10.0;\n    int y = LogL10toY(logL10);\n\n    // Print the input directory\n    FILE *out_file = fopen(out_file_name, \"wb\");\n    if (out_file == NULL) {\n        TIFFClose(in_tif);\n        assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    TIFFPrintDirectory(in_tif, out_file, 0);\n    assert_file_closed(\u0026out_file);;\n\n    // Write the current directory to the output file\n    TIFFWriteDirectory(in_tif);\n\n    // Convert LogLuv32 to XYZ\n    uint32_t logLuv32 = 123;\n    float xyz[3];\n    LogLuv32toXYZ(logLuv32, xyz);\n\n    // Set the write offset of the TIFF\n    TIFFSetWriteOffset(in_tif, 0);\n\n    // Convert LogLuv24 to XYZ\n    uint32_t logLuv24 = 234;\n    float xyz2[3];\n    LogLuv24toXYZ(logLuv24, xyz2);\n\n    // Close the input TIFF and release resources\n    TIFFClose(in_tif);\n    unmap_file_proc(NULL, NULL, 0);\n\n    assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000030.cc",
        "path": "examples/libtiff/fuzzer_0/fuzzers/id_000030.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_0/fuzzers/id_000030.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              146,
              18
            ],
            [
              342,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":2}"
        },
        {
          "limitHit": false,
          "lineNumber": 68,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, out_file, 0);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 514\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 8, nr_unique_branch: 0\n//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_32(const uint8_t* data, size_t size) {\n\tif(size\u003c0) return 0;\n\n\tFILE *input_file_ptr = fopen(\"input_file\", \"wb\");\n\tif (input_file_ptr == NULL) {return 0;}\n\tfwrite(data, sizeof(uint8_t), size, input_file_ptr);\n\tfclose(input_file_ptr);\n\n    // write data into input_file.\n    FILE* in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    \n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n    \n    // open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF* in_tif = TIFFStreamOpen(\"MemTIFF\", \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    const char* filename = \"output_file\";\n\n    // Set the output file name\n    TIFFSetFileName(in_tif, filename);\n\n    // Get the unmap file procedure\n    TIFFUnmapFileProc unmap_proc = TIFFGetUnmapFileProc(in_tif);\n\n    // Convert LogL10 to Y\n    double log_val = 10;\n    double converted_val = LogL10toY(log_val);\n    \n    // Print the directory information to the output file\n    FILE* out_file = fopen(filename, \"wb\");\n    if (out_file == NULL) {\n        TIFFClose(in_tif);\n        assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    TIFFPrintDirectory(in_tif, out_file, 0);\n    assert_file_closed(\u0026out_file);;\n\n    // Write the directory to the TIFF file\n    TIFFWriteDirectory(in_tif);\n\n    // Convert LogLuv32 to XYZ\n    uint32_t logLuv32 = 12345;\n    float xyz[3];\n    LogLuv32toXYZ(logLuv32, xyz);\n\n    // Set the write offset\n    TIFFSetWriteOffset(in_tif, 0);\n\n    // Convert LogLuv24 to XYZ\n    uint32_t logLuv24 = 67890;\n    float xyz2[3];\n    LogLuv24toXYZ(logLuv24, xyz2);\n    \n    // Close the TIFF file and unmap the memory\n    TIFFClose(in_tif);\n    unmap_proc(NULL, NULL, 0);\n    \n    assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000032.cc",
        "path": "examples/libtiff/fuzzer_0/fuzzers/id_000032.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_0/fuzzers/id_000032.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              146,
              18
            ],
            [
              342,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, out_file, 0);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 513\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 11, nr_unique_branch: 2\n//\u003cQuality\u003e {\"density\":11,\"unique_branches\":{\"TIFFPrintDirectory\":[[209,34,209,71,5,0,4,1],[209,34,209,71,56,0,4,1]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFClose\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"visited\":1}\n/*Here is the completed C++ program using the libtiff library APIs to achieve the event specified:\n\n*/\n\n\nextern \"C\" int LLVMFuzzerTestOneInput_31(const uint8_t* data, size_t size) {\n\tif(size\u003c0) return 0;\n\n\tFILE *input_file_ptr = fopen(\"input_file\", \"wb\");\n\tif (input_file_ptr == NULL) {return 0;}\n\tfwrite(data, sizeof(uint8_t), size, input_file_ptr);\n\tfclose(input_file_ptr);\n\n    // Write data into input_file\n    FILE* in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // Open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF* in_tif = TIFFStreamOpen(\"MemTIFF\", \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Set the output tiff file name\n    const char* out_file_name = \"output_file\";\n\n    // Create a new output tiff file\n    TIFF* out_tif = TIFFOpen(out_file_name, \"w\");\n    if (!out_tif) {\n        TIFFClose(in_tif);\n        assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Get the unmap file procedure of the input tiff file\n    TIFFUnmapFileProc unmap_proc = TIFFGetUnmapFileProc(in_tif);\n\n    // Set the write offset of the output tiff file\n    TIFFSetWriteOffset(out_tif, 0);\n\n    // Print the directory information of the input tiff file to the standard output\n    TIFFPrintDirectory(in_tif, stdout, 0);\n\n    // Convert LogLuv32 to XYZ color space\n    uint32_t log_luv32_value = 0; // Replace with the actual value\n    float xyz_color[3];\n    LogLuv32toXYZ(log_luv32_value, xyz_color);\n\n    // Write the converted XYZ color value to the output tiff file\n    TIFFWriteDirectory(out_tif);\n    TIFFSetFileName(out_tif, out_file_name);\n    TIFFPrintDirectory(out_tif, stdout, 0);\n    TIFFClose(out_tif);\n\n    // Cleanup resources\n    TIFFClose(in_tif);\n    unmap_proc(in_tif, nullptr, 0);\n\n    assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000031.cc",
        "path": "examples/libtiff/fuzzer_0/fuzzers/id_000031.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_0/fuzzers/id_000031.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              46,
              18
            ],
            [
              220,
              18
            ],
            [
              296,
              18
            ],
            [
              432,
              18
            ],
            [
              508,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":11,\"unique_branches\":{\"TIFFPrintDirectory\":[[209,34,209,71,5,0,4,1],[209,34,209,71,56,0,4,1]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFClose\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"visited\":1}"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, stdout, 0);"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(out_tif, stdout, 0);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 519\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 7, nr_unique_branch: 0\n//\u003cQuality\u003e {\"density\":7,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_33(const uint8_t* data, size_t size) {\n\tif(size\u003c0) return 0;\n\n\tFILE *input_file_ptr = fopen(\"input_file\", \"wb\");\n\tif (input_file_ptr == NULL) {return 0;}\n\tfwrite(data, sizeof(uint8_t), size, input_file_ptr);\n\tfclose(input_file_ptr);\n\n    // write data into input_file.\n    FILE *in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF *in_tif = TIFFStreamOpen(\"MemTIFF\", \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Set the output file name\n    const char* outputFileName = \"output_file\";\n    TIFFSetFileName(in_tif, outputFileName);\n\n    // Get the UnmapFileProc function pointer\n    TIFFUnmapFileProc unmapFileProc = TIFFGetUnmapFileProc(in_tif);\n\n    // Convert LogL10 values to Y values\n    double logL10Value = 10.0;\n    double yValue = LogL10toY(logL10Value);\n\n    // Print the directory of the TIFF file\n    FILE* outputFile = fopen(outputFileName, \"wb\");\n    TIFFPrintDirectory(in_tif, outputFile, 0);\n    assert_file_closed(\u0026outputFile);;\n\n    // Write the current directory to the TIFF file\n    TIFFWriteDirectory(in_tif);\n\n    // Convert LogLuv32 values to XYZ values\n    uint32_t logLuv32Value = 32;\n    float xyzValues[3];\n    LogLuv32toXYZ(logLuv32Value, xyzValues);\n\n    // Set the write offset for the TIFF file\n    toff_t writeOffset = 0;\n    TIFFSetWriteOffset(in_tif, writeOffset);\n\n    // Convert LogLuv24 values to XYZ values\n    uint32_t logLuv24Value = 24;\n    float xyzValues2[3];\n    LogLuv24toXYZ(logLuv24Value, xyzValues2);\n\n    // Cleanup and close the TIFF file\n    TIFFClose(in_tif);\n\n    // Unmap the file if necessary\n    if (unmapFileProc) {\n        unmapFileProc(in_tif, nullptr, 0);\n    }\n\n    // Open output file to read the result\n    FILE* outFile = fopen(outputFileName, \"rb\");\n    if (outFile) {\n        // read the output file if needed\n        assert_file_closed(\u0026outFile);;\n    }\n\n    assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026outFile);\n\tassert_file_closed(\u0026outputFile);\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000033.cc",
        "path": "examples/libtiff/fuzzer_0/fuzzers/id_000033.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_0/fuzzers/id_000033.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              134,
              18
            ],
            [
              330,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":7,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}"
        },
        {
          "limitHit": false,
          "lineNumber": 61,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, outputFile, 0);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \"FuzzedDataProvider.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 510\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 2.6666667, nr_unique_branch: 0\n//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":2}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_30(const uint8_t* f_data, size_t f_size) {\n\tif(f_size\u003c34) return 0;\n\n\t\n\t//fuzzer vars shim {\n\t\tFuzzedDataProvider fdp(f_data, f_size);\n\t\tFDPConsumeRawBytes(const uint8_t *, data, size, fdp)\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_1, fuzz_str_sz_1, fdp);\n\t\tFDPConsumeIntegral(int64_t, fuzz_int64_t_2, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_3, fdp);\n\t\tFDPConsumeIntegral(uint64_t, fuzz_uint64_t_4, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_5, fdp);\n\t//fuzzer shim end}\n\n\n\n\n    // Write data into input_file\n    FILE *in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // Open input TIFF in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF *in_tif = TIFFStreamOpen(fuzz_str_1, \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Set the output TIFF file name\n    const char *out_file_name = \"output_file\";\n    TIFFSetFileName(in_tif, out_file_name);\n\n    // Get the unmap file proc\n    TIFFUnmapFileProc unmap_file_proc = TIFFGetUnmapFileProc(in_tif);\n\n    // Convert LogL10 to Y\n    double logL10 = 10.0;\n    int y = LogL10toY(logL10);\n\n    // Print the input directory\n    FILE *out_file = fopen(out_file_name, \"wb\");\n    if (out_file == NULL) {\n        TIFFClose(in_tif);\n        assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n    }\n    TIFFPrintDirectory(in_tif, out_file, fuzz_int64_t_2);\n    assert_file_closed(\u0026out_file);;\n\n    // Write the current directory to the output file\n    TIFFWriteDirectory(in_tif);\n\n    // Convert LogLuv32 to XYZ\n    uint32_t logLuv32 = 123;\n    float xyz[3];\n    LogLuv32toXYZ(fuzz_uint32_t_3, xyz);\n\n    // Set the write offset of the TIFF\n    TIFFSetWriteOffset(in_tif, fuzz_uint64_t_4);\n\n    // Convert LogLuv24 to XYZ\n    uint32_t logLuv24 = 234;\n    float xyz2[3];\n    LogLuv24toXYZ(fuzz_uint32_t_5, xyz2);\n\n    // Close the input TIFF and release resources\n    TIFFClose(in_tif);\n    unmap_file_proc(NULL, NULL, 0);\n\n    assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n}",
        "name": "id_000030.cc",
        "path": "examples/libtiff/fuzzer_1/fuzzers/id_000030.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_1/fuzzers/id_000030.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              146,
              18
            ],
            [
              342,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":2}"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, out_file, fuzz_int64_t_2);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \"FuzzedDataProvider.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 514\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 8, nr_unique_branch: 0\n//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_32(const uint8_t* f_data, size_t f_size) {\n\tif(f_size\u003c38) return 0;\n\n\t\n\t//fuzzer vars shim {\n\t\tFuzzedDataProvider fdp(f_data, f_size);\n\t\tFDPConsumeRawBytes(const uint8_t *, data, size, fdp)\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_1, fuzz_str_sz_1, fdp);\n\t\tFDPConsumeIntegral(int32_t, fuzz_int32_t_2, fdp);\n\t\tFDPConsumeIntegral(int64_t, fuzz_int64_t_3, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_4, fdp);\n\t\tFDPConsumeIntegral(uint64_t, fuzz_uint64_t_5, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_6, fdp);\n\t//fuzzer shim end}\n\n\n\n\n    // write data into input_file.\n    FILE* in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    \n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n    \n    // open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF* in_tif = TIFFStreamOpen(fuzz_str_1, \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    const char* filename = \"output_file\";\n\n    // Set the output file name\n    TIFFSetFileName(in_tif, filename);\n\n    // Get the unmap file procedure\n    TIFFUnmapFileProc unmap_proc = TIFFGetUnmapFileProc(in_tif);\n\n    // Convert LogL10 to Y\n    double log_val = 10;\n    double converted_val = LogL10toY(fuzz_int32_t_2);\n    \n    // Print the directory information to the output file\n    FILE* out_file = fopen(filename, \"wb\");\n    if (out_file == NULL) {\n        TIFFClose(in_tif);\n        assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n    }\n    TIFFPrintDirectory(in_tif, out_file, fuzz_int64_t_3);\n    assert_file_closed(\u0026out_file);;\n\n    // Write the directory to the TIFF file\n    TIFFWriteDirectory(in_tif);\n\n    // Convert LogLuv32 to XYZ\n    uint32_t logLuv32 = 12345;\n    float xyz[3];\n    LogLuv32toXYZ(fuzz_uint32_t_4, xyz);\n\n    // Set the write offset\n    TIFFSetWriteOffset(in_tif, fuzz_uint64_t_5);\n\n    // Convert LogLuv24 to XYZ\n    uint32_t logLuv24 = 67890;\n    float xyz2[3];\n    LogLuv24toXYZ(fuzz_uint32_t_6, xyz2);\n    \n    // Close the TIFF file and unmap the memory\n    TIFFClose(in_tif);\n    unmap_proc(NULL, NULL, 0);\n    \n    assert_file_closed(\u0026out_file);\n\tassert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n}",
        "name": "id_000032.cc",
        "path": "examples/libtiff/fuzzer_1/fuzzers/id_000032.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_1/fuzzers/id_000032.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              146,
              18
            ],
            [
              342,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":8,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFClose\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, out_file, fuzz_int64_t_3);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \"FuzzedDataProvider.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 513\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 11, nr_unique_branch: 2\n//\u003cQuality\u003e {\"density\":11,\"unique_branches\":{\"TIFFPrintDirectory\":[[209,34,209,71,5,0,4,1],[209,34,209,71,56,0,4,1]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFClose\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"visited\":1}\n/*Here is the completed C++ program using the libtiff library APIs to achieve the event specified:\n\n*/\n\n\nextern \"C\" int LLVMFuzzerTestOneInput_31(const uint8_t* f_data, size_t f_size) {\n\tif(f_size\u003c42) return 0;\n\n\t\n\t//fuzzer vars shim {\n\t\tFuzzedDataProvider fdp(f_data, f_size);\n\t\tFDPConsumeRawBytes(const uint8_t *, data, size, fdp)\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_1, fuzz_str_sz_1, fdp);\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_2, fuzz_str_sz_2, fdp);\n\t\tFDPConsumeIntegral(uint64_t, fuzz_uint64_t_3, fdp);\n\t\tFDPConsumeIntegral(int64_t, fuzz_int64_t_4, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_5, fdp);\n\t\tFDPConsumeIntegral(int64_t, fuzz_int64_t_6, fdp);\n\t//fuzzer shim end}\n\n\n\n\n    // Write data into input_file\n    FILE* in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // Open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF* in_tif = TIFFStreamOpen(fuzz_str_1, \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Set the output tiff file name\n    const char* out_file_name = \"output_file\";\n\n    // Create a new output tiff file\n    TIFF* out_tif = TIFFOpen(out_file_name, fuzz_str_2);\n    if (!out_tif) {\n        TIFFClose(in_tif);\n        assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n    }\n\n    // Get the unmap file procedure of the input tiff file\n    TIFFUnmapFileProc unmap_proc = TIFFGetUnmapFileProc(in_tif);\n\n    // Set the write offset of the output tiff file\n    TIFFSetWriteOffset(out_tif, fuzz_uint64_t_3);\n\n    // Print the directory information of the input tiff file to the standard output\n    TIFFPrintDirectory(in_tif, stdout, fuzz_int64_t_4);\n\n    // Convert LogLuv32 to XYZ color space\n    uint32_t log_luv32_value = 0; // Replace with the actual value\n    float xyz_color[3];\n    LogLuv32toXYZ(fuzz_uint32_t_5, xyz_color);\n\n    // Write the converted XYZ color value to the output tiff file\n    TIFFWriteDirectory(out_tif);\n    TIFFSetFileName(out_tif, out_file_name);\n    TIFFPrintDirectory(out_tif, stdout, fuzz_int64_t_6);\n    TIFFClose(out_tif);\n\n    // Cleanup resources\n    TIFFClose(in_tif);\n    unmap_proc(in_tif, nullptr, 0);\n\n    assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n}",
        "name": "id_000031.cc",
        "path": "examples/libtiff/fuzzer_1/fuzzers/id_000031.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_1/fuzzers/id_000031.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              46,
              18
            ],
            [
              220,
              18
            ],
            [
              296,
              18
            ],
            [
              432,
              18
            ],
            [
              508,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":11,\"unique_branches\":{\"TIFFPrintDirectory\":[[209,34,209,71,5,0,4,1],[209,34,209,71,56,0,4,1]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFClose\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFSetFileName\",\"TIFFPrintDirectory\",\"TIFFClose\",\"TIFFClose\"],\"visited\":1}"
        },
        {
          "limitHit": false,
          "lineNumber": 82,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, stdout, fuzz_int64_t_4);"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(out_tif, stdout, fuzz_int64_t_6);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \"FuzzedDataProvider.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 519\n//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]\n/*\u003cCombination\u003e: [const char *TIFFSetFileName(TIFF * , const char * ),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    double LogL10toY(int ),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    int TIFFWriteDirectory(TIFF * ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void LogLuv24toXYZ(uint32_t , float * )\n*/\n//\u003cscore\u003e 7, nr_unique_branch: 0\n//\u003cQuality\u003e {\"density\":7,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}\n/**/\nextern \"C\" int LLVMFuzzerTestOneInput_33(const uint8_t* f_data, size_t f_size) {\n\tif(f_size\u003c34) return 0;\n\n\t\n\t//fuzzer vars shim {\n\t\tFuzzedDataProvider fdp(f_data, f_size);\n\t\tFDPConsumeRawBytes(const uint8_t *, data, size, fdp)\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_1, fuzz_str_sz_1, fdp);\n\t\tFDPConsumeIntegral(int64_t, fuzz_int64_t_2, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_3, fdp);\n\t\tFDPConsumeIntegral(uint64_t, fuzz_uint64_t_4, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_5, fdp);\n\t//fuzzer shim end}\n\n\n\n\n    // write data into input_file.\n    FILE *in_file = fopen(\"input_file\", \"wb\");\n    if (in_file == NULL) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n    fwrite(data, sizeof(uint8_t), size, in_file);\n    assert_file_closed(\u0026in_file);;\n\n    // open input tiff in memory\n    std::istringstream s(std::string(data, data + size));\n    TIFF *in_tif = TIFFStreamOpen(fuzz_str_1, \u0026s);\n    if (!in_tif) {\n        assert_file_closed(\u0026in_file);\n\treturn 0;\n    }\n\n    // Set the output file name\n    const char* outputFileName = \"output_file\";\n    TIFFSetFileName(in_tif, outputFileName);\n\n    // Get the UnmapFileProc function pointer\n    TIFFUnmapFileProc unmapFileProc = TIFFGetUnmapFileProc(in_tif);\n\n    // Convert LogL10 values to Y values\n    double logL10Value = 10.0;\n    double yValue = LogL10toY(logL10Value);\n\n    // Print the directory of the TIFF file\n    FILE* outputFile = fopen(outputFileName, \"wb\");\n    TIFFPrintDirectory(in_tif, outputFile, fuzz_int64_t_2);\n    assert_file_closed(\u0026outputFile);;\n\n    // Write the current directory to the TIFF file\n    TIFFWriteDirectory(in_tif);\n\n    // Convert LogLuv32 values to XYZ values\n    uint32_t logLuv32Value = 32;\n    float xyzValues[3];\n    LogLuv32toXYZ(fuzz_uint32_t_3, xyzValues);\n\n    // Set the write offset for the TIFF file\n    toff_t writeOffset = 0;\n    TIFFSetWriteOffset(in_tif, fuzz_uint64_t_4);\n\n    // Convert LogLuv24 values to XYZ values\n    uint32_t logLuv24Value = 24;\n    float xyzValues2[3];\n    LogLuv24toXYZ(fuzz_uint32_t_5, xyzValues2);\n\n    // Cleanup and close the TIFF file\n    TIFFClose(in_tif);\n\n    // Unmap the file if necessary\n    if (unmapFileProc) {\n        unmapFileProc(in_tif, nullptr, 0);\n    }\n\n    // Open output file to read the result\n    FILE* outFile = fopen(outputFileName, \"rb\");\n    if (outFile) {\n        // read the output file if needed\n        assert_file_closed(\u0026outFile);;\n    }\n\n    assert_file_closed(\u0026outFile);\n\tassert_file_closed(\u0026outputFile);\n\tassert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n}",
        "name": "id_000033.cc",
        "path": "examples/libtiff/fuzzer_1/fuzzers/id_000033.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_1/fuzzers/id_000033.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              66,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              134,
              18
            ],
            [
              330,
              18
            ]
          ],
          "preview": "//\u003cQuality\u003e {\"density\":7,\"unique_branches\":{},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFSetFileName\",\"TIFFGetUnmapFileProc\",\"LogL10toY\",\"TIFFPrintDirectory\",\"TIFFWriteDirectory\",\"LogLuv32toXYZ\",\"TIFFSetWriteOffset\",\"LogLuv24toXYZ\",\"TIFFClose\"],\"visited\":0}"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(in_tif, outputFile, fuzz_int64_t_2);"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 4\n//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFGetStrileOffset\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFCreateDirectory\",\"TIFFSetFileName\",\"TIFFVGetFieldDefaulted\",\"TIFFClose\"]\n/*\u003cCombination\u003e: [TIFF *TIFFStreamOpen(const char * , std::ostream * ),\n    uint64_t TIFFGetStrileOffset(TIFF * tif, uint32_t strile),\n    TIFF *TIFFOpen(const char * filename, const char * mode),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    int TIFFWriteDirectory(TIFF * ),\n    int TIFFCreateDirectory(TIFF * ),\n    const char *TIFFSetFileName(TIFF * , const char * ),\n    int TIFFVGetFieldDefaulted(TIFF * tif, uint32_t tag, __va_list_tag * ap),\n    void TIFFClose(TIFF * tif)\n*/\n//\u003cscore\u003e 1010.7143, nr_unique_branch: 5025\n//\u003cQuality\u003e {\"density\":25,\"unique_branches\":{\"TIFFHashSetInsert\":[[444,9,444,13,0,0,4,1],[453,9,453,50,0,0,4,1],[454,10,454,22,0,0,4,1],[474,9,474,24,0,0,4,1]],\"_TIFFClampDoubleToFloat\":[[437,9,437,22,0,0,4,1],[439,9,439,23,0,0,4,1]],\"ZIPCleanup\":[[538,9,538,39,0,0,4,1],[543,14,543,44,0,0,4,0],[543,14,543,44,0,0,4,1]],\"TIFFFlush\":[[32,9,32,34,0,0,4,1],[35,9,35,28,0,0,4,1],[43,9,43,43,0,0,4,0],[43,9,43,43,0,0,4,1],[44,9,44,45,0,0,4,1],[50,9,50,64,0,0,4,0],[51,9,51,35,0,0,4,1]],\"TIFFHashSetLookup\":[[506,9,506,13,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortLong8\":[[3728,9,3728,23,0,0,4,0],[3728,9,3728,23,0,0,4,1]],\"TIFFInitJPEG\":[[2834,9,2834,71,0,0,4,1],[2846,9,2846,30,0,0,4,1],[2872,9,2872,29,0,0,4,1]],\"TIFFReadDirEntryData\":[[3911,9,3911,18,0,0,4,0],[3913,13,3913,20,0,0,4,0],[3913,13,3913,20,0,0,4,1],[3915,13,3915,20,0,0,4,0],[3915,13,3915,20,0,0,4,1]],\"TIFFHashSetFindPtr\":[[413,12,413,15,0,0,4,1]],\"TIFFStartTile\":[[1445,9,1445,48,0,0,4,0],[1445,9,1445,48,0,0,4,1],[1447,13,1447,42,0,0,4,0],[1447,13,1447,42,0,0,4,1],[1453,9,1453,23,0,0,4,1],[1460,9,1460,23,0,0,4,1],[1467,9,1467,40,0,0,4,0],[1467,9,1467,40,0,0,4,1],[1475,13,1475,39,0,0,4,0],[282,6,282,54,3,0,4,0],[282,6,282,54,4,0,4,0]],\"unixErrorHandler\":[[365,9,365,23,0,0,4,0]],\"OJPEGReadHeaderInfoSecStreamSof\":[[1801,9,1801,25,0,0,4,1],[1806,9,1806,36,0,0,4,0],[1806,9,1806,36,0,0,4,1],[1809,9,1809,35,0,0,4,0],[1809,9,1809,35,0,0,4,1],[1811,9,1811,15,0,0,4,0],[1811,9,1811,15,0,0,4,1],[1813,13,1813,40,0,0,4,0],[1813,13,1813,40,0,0,4,1],[1818,9,1818,19,0,0,4,0],[1818,9,1818,19,0,0,4,1],[1820,13,1820,40,0,0,4,1],[1825,9,1825,36,0,0,4,0],[1825,9,1825,36,0,0,4,1],[1827,13,1827,39,0,0,4,0],[1827,13,1827,39,0,0,4,1],[1836,9,1836,35,0,0,4,0],[1836,9,1836,35,0,0,4,1],[1838,9,1838,15,0,0,4,0],[1838,9,1838,15,0,0,4,1],[1840,13,1840,40,0,0,4,0],[1840,13,1840,40,0,0,4,1],[1847,9,1847,31,0,0,4,0],[1847,9,1847,31,0,0,4,1],[1852,13,1852,39,0,0,4,1],[1854,13,1854,45,0,0,4,0],[1854,13,1854,45,0,0,4,1],[1855,13,1855,52,0,0,4,0],[1863,13,1863,39,0,0,4,0],[1863,13,1863,39,0,0,4,1],[1865,13,1865,44,0,0,4,0],[1865,13,1865,44,0,0,4,1],[1865,48,1865,80,0,0,4,0],[1865,48,1865,80,0,0,4,1],[1871,13,1871,43,0,0,4,0],[1871,13,1871,43,0,0,4,1],[1881,9,1881,35,0,0,4,0],[1881,9,1881,35,0,0,4,1],[1883,9,1883,15,0,0,4,0],[1883,9,1883,15,0,0,4,1],[1885,13,1885,40,0,0,4,0],[1885,13,1885,40,0,0,4,1],[1892,17,1892,22,0,0,4,0],[1892,17,1892,22,0,0,4,1],[1895,13,1895,39,0,0,4,0],[1895,13,1895,39,0,0,4,1],[1897,13,1897,40,0,0,4,0],[1897,13,1897,40,0,0,4,1],[1900,13,1900,39,0,0,4,0],[1900,13,1900,39,0,0,4,1],[1902,13,1902,40,0,0,4,0],[1902,13,1902,40,0,0,4,1],[1904,17,1904,23,0,0,4,0],[1904,17,1904,23,0,0,4,1],[1908,22,1908,48,0,0,4,0],[1908,22,1908,48,0,0,4,1],[1908,52,1908,78,0,0,4,0],[1908,52,1908,78,0,0,4,1],[1909,22,1909,48,0,0,4,0],[1909,22,1909,48,0,0,4,1],[1910,22,1910,48,0,0,4,0],[1910,22,1910,48,0,0,4,1],[1910,52,1910,78,0,0,4,0],[1910,52,1910,78,0,0,4,1],[1911,22,1911,48,0,0,4,0],[1911,22,1911,48,0,0,4,1],[1917,21,1917,28,0,0,4,0],[1917,21,1917,28,0,0,4,1],[1925,17,1925,78,0,0,4,0],[1925,17,1925,78,0,0,4,1],[1927,21,1927,27,0,0,4,0],[1927,21,1927,27,0,0,4,1],[1929,25,1929,80,0,0,4,0],[1929,25,1929,80,0,0,4,1],[1939,25,1939,32,0,0,4,0],[1939,25,1939,32,0,0,4,1],[1950,13,1950,39,0,0,4,0],[1950,13,1950,39,0,0,4,1],[1952,13,1952,40,0,0,4,0],[1952,13,1952,40,0,0,4,1],[1955,9,1955,36,0,0,4,0],[1955,9,1955,36,0,0,4,1]],\"TIFFFetchDirectory\":[[5757,9,5757,19,0,0,4,0],[5759,9,5759,18,0,0,4,0],[5761,13,5761,20,0,0,4,0],[5761,13,5761,20,0,0,4,1],[5768,13,5768,45,0,0,4,0],[5768,13,5768,45,0,0,4,1],[5770,17,5770,24,0,0,4,0],[5770,17,5770,24,0,0,4,1],[5777,17,5777,43,0,0,4,0],[5777,17,5777,43,0,0,4,1],[5779,17,5779,34,0,0,4,0],[5779,17,5779,34,0,0,4,1],[5791,17,5791,24,0,0,4,0],[5791,17,5791,24,0,0,4,1],[5798,17,5798,43,0,0,4,1],[5800,17,5800,34,0,0,4,0],[5800,17,5800,34,0,0,4,1],[5812,13,5812,28,0,0,4,0],[5812,13,5812,28,0,0,4,1],[5814,13,5814,20,0,0,4,0],[5814,13,5814,20,0,0,4,1],[5825,13,5825,23,0,0,4,0],[5827,17,5827,49,0,0,4,0],[5830,21,5830,28,0,0,4,0],[5830,21,5830,28,0,0,4,1],[5832,21,5832,47,0,0,4,0],[5832,21,5832,47,0,0,4,1],[5973,9,5973,17,0,0,4,1],[5980,17,5980,31,0,0,4,0],[5980,17,5980,31,0,0,4,1],[5983,13,5983,39,0,0,4,0],[5983,13,5983,39,0,0,4,1],[5987,13,5987,39,0,0,4,0],[5987,13,5987,39,0,0,4,1],[5991,13,5991,45,0,0,4,0],[5993,17,5993,43,0,0,4,0],[5993,17,5993,43,0,0,4,1]],\"TIFFReadDirEntryDouble\":[[1081,9,1081,34,0,0,4,0],[1081,9,1081,34,0,0,4,1],[1085,9,1085,23,0,0,4,1],[1092,9,1092,24,0,0,4,1],[1099,9,1099,24,0,0,4,0],[1099,9,1099,24,0,0,4,1],[1106,9,1106,25,0,0,4,1],[1113,9,1113,23,0,0,4,1],[1120,9,1120,24,0,0,4,1],[1127,9,1127,24,0,0,4,1],[1145,9,1145,25,0,0,4,1],[1154,9,1154,27,0,0,4,1],[1157,9,1157,28,0,0,4,1],[1160,9,1160,24,0,0,4,0],[1160,9,1160,24,0,0,4,1],[1167,9,1167,25,0,0,4,1],[1170,9,1170,16,0,0,4,0],[1170,9,1170,16,0,0,4,1]],\"TIFFWriteEncodedTile\":[[424,9,424,31,0,0,4,1],[445,9,445,55,0,0,4,1],[458,9,458,23,0,0,4,1],[465,9,465,23,0,0,4,1],[472,9,472,48,0,0,4,0],[472,9,472,48,0,0,4,1],[474,13,474,42,0,0,4,1],[485,9,485,15,0,0,4,1],[485,19,485,41,0,0,4,1],[489,9,489,47,0,0,4,0],[494,13,494,25,0,0,4,1],[498,13,498,19,0,0,4,0],[498,23,498,73,0,0,4,1],[38,6,38,43,1,0,4,0],[38,6,38,43,1,0,4,1],[38,47,38,79,1,0,4,0],[40,7,40,44,2,0,4,0],[40,7,40,44,2,0,4,1],[40,48,40,64,2,0,4,0],[41,6,41,53,2,0,4,0],[282,6,282,54,4,0,4,0],[282,6,282,54,5,0,4,0]],\"LogLuvVGetField\":[[1766,9,1766,35,0,0,4,1],[1769,9,1769,16,0,0,4,0]],\"TIFFReadDirEntryCheckRangeByteSbyte\":[[3566,9,3566,18,0,0,4,0],[3566,9,3566,18,0,0,4,1]],\"OJPEGVGetField\":[[543,9,543,34,0,0,4,1],[546,9,546,37,0,0,4,1],[550,9,550,38,0,0,4,0],[550,9,550,38,0,0,4,1],[551,17,551,49,0,0,4,0],[551,17,551,49,0,0,4,1],[556,9,556,33,0,0,4,1],[560,9,560,34,0,0,4,1],[564,9,564,34,0,0,4,1],[568,9,568,30,0,0,4,1],[571,9,571,41,0,0,4,1],[574,9,574,16,0,0,4,0],[574,9,574,16,0,0,4,1]],\"TIFFWriteDirectoryTagLongLong8Array\":[[1860,9,1860,20,0,0,4,0],[1860,9,1860,20,0,0,4,1],[1866,9,1866,48,0,0,4,1],[1872,9,1872,38,0,0,4,1],[1897,9,1897,18,0,0,4,0],[1897,9,1897,18,0,0,4,1],[1897,22,1897,52,0,0,4,1],[1901,14,1901,23,0,0,4,0],[1901,14,1901,23,0,0,4,1],[1901,27,1901,56,0,0,4,0],[1901,27,1901,56,0,0,4,1],[1905,9,1905,22,0,0,4,0],[1905,9,1905,22,0,0,4,1],[1917,13,1917,22,0,0,4,1],[1923,41,1923,51,0,0,4,0],[1923,41,1923,51,0,0,4,1],[1925,17,1925,33,0,0,4,1],[1947,13,1947,22,0,0,4,1],[1953,41,1953,51,0,0,4,0],[1953,41,1953,51,0,0,4,1],[1955,17,1955,29,0,0,4,1]],\"PredictorVSetField\":[[938,9,938,31,0,0,4,0],[938,9,938,31,0,0,4,1],[942,9,942,16,0,0,4,0],[942,9,942,16,0,0,4,1]],\"PredictorSetupDecode\":[[131,9,131,33,0,0,4,0],[131,9,131,33,0,0,4,1],[131,37,131,57,0,0,4,0],[131,37,131,57,0,0,4,1],[134,9,134,27,0,0,4,0],[134,9,134,27,0,0,4,1],[136,17,136,37,0,0,4,1],[138,13,138,19,0,0,4,0],[138,13,138,19,0,0,4,1],[141,13,141,20,0,0,4,0],[141,13,141,20,0,0,4,1],[144,13,144,20,0,0,4,1],[147,13,147,20,0,0,4,1],[155,13,155,53,0,0,4,0],[172,13,172,39,0,0,4,1],[192,14,192,32,0,0,4,1]],\"TIFFInitLZW\":[[1405,9,1405,30,0,0,4,1]],\"TIFFFetchNormalTag\":[[6027,9,6027,26,0,0,4,1],[6044,9,6044,35,0,0,4,0],[6044,9,6044,35,0,0,4,1],[6051,9,6051,31,0,0,4,0],[6051,9,6051,31,0,0,4,1],[6056,17,6056,45,0,0,4,0],[6056,17,6056,45,0,0,4,1],[6060,21,6060,33,0,0,4,0],[6060,21,6060,33,0,0,4,1],[6062,25,6062,43,0,0,4,0],[6062,47,6062,76,0,0,4,0],[6062,47,6062,76,0,0,4,1],[6074,32,6074,61,0,0,4,0],[6074,32,6074,61,0,0,4,1],[6076,33,6076,41,0,0,4,0],[6076,33,6076,41,0,0,4,1],[6083,21,6083,54,0,0,4,0],[6083,21,6083,54,0,0,4,1],[6090,26,6090,59,0,0,4,0],[6090,26,6090,59,0,0,4,1],[6101,25,6101,34,0,0,4,1],[6107,25,6107,43,0,0,4,0],[6107,25,6107,43,0,0,4,1],[6112,25,6112,34,0,0,4,0],[6112,25,6112,34,0,0,4,1],[6117,21,6117,30,0,0,4,0],[6119,21,6119,23,0,0,4,1],[6124,9,6124,31,0,0,4,0],[6124,9,6124,31,0,0,4,1],[6130,17,6130,45,0,0,4,0],[6130,17,6130,45,0,0,4,1],[6132,21,6132,59,0,0,4,1],[6137,9,6137,31,0,0,4,1],[6150,9,6150,32,0,0,4,0],[6150,9,6150,32,0,0,4,1],[6156,17,6156,45,0,0,4,0],[6156,17,6156,45,0,0,4,1],[6158,21,6158,59,0,0,4,0],[6158,21,6158,59,0,0,4,1],[6163,9,6163,32,0,0,4,1],[6176,9,6176,32,0,0,4,0],[6176,9,6176,32,0,0,4,1],[6182,17,6182,45,0,0,4,0],[6182,17,6182,45,0,0,4,1],[6184,21,6184,59,0,0,4,0],[6184,21,6184,59,0,0,4,1],[6189,9,6189,32,0,0,4,1],[6202,9,6202,32,0,0,4,0],[6202,9,6202,32,0,0,4,1],[6208,17,6208,45,0,0,4,0],[6208,17,6208,45,0,0,4,1],[6210,21,6210,59,0,0,4,1],[6215,9,6215,32,0,0,4,1],[6228,9,6228,31,0,0,4,0],[6228,9,6228,31,0,0,4,1],[6234,17,6234,45,0,0,4,0],[6234,17,6234,45,0,0,4,1],[6236,21,6236,59,0,0,4,0],[6236,21,6236,59,0,0,4,1],[6241,9,6241,32,0,0,4,0],[6241,9,6241,32,0,0,4,1],[6247,17,6247,45,0,0,4,0],[6247,17,6247,45,0,0,4,1],[6249,21,6249,59,0,0,4,1],[6254,9,6254,30,0,0,4,0],[6254,9,6254,30,0,0,4,1],[6260,17,6260,45,0,0,4,0],[6260,17,6260,45,0,0,4,1],[6262,21,6262,59,0,0,4,0],[6262,21,6262,59,0,0,4,1],[6267,9,6267,37,0,0,4,0],[6267,9,6267,37,0,0,4,1],[6272,17,6272,36,0,0,4,0],[6272,17,6272,36,0,0,4,1],[6281,17,6281,45,0,0,4,0],[6281,17,6281,45,0,0,4,1],[6287,21,6287,23,0,0,4,1],[6292,9,6292,34,0,0,4,0],[6292,9,6292,34,0,0,4,1],[6297,17,6297,65,0,0,4,0],[6297,17,6297,65,0,0,4,1],[6309,21,6309,49,0,0,4,0],[6309,21,6309,49,0,0,4,1],[6313,25,6313,34,0,0,4,0],[6315,25,6315,27,0,0,4,1],[6321,9,6321,34,0,0,4,1],[6350,9,6350,35,0,0,4,0],[6350,9,6350,35,0,0,4,1],[6355,17,6355,65,0,0,4,0],[6355,17,6355,65,0,0,4,1],[6367,21,6367,49,0,0,4,0],[6367,21,6367,49,0,0,4,1],[6371,25,6371,34,0,0,4,0],[6373,25,6373,27,0,0,4,1],[6379,9,6379,35,0,0,4,1],[6408,9,6408,35,0,0,4,0],[6408,9,6408,35,0,0,4,1],[6413,17,6413,65,0,0,4,0],[6413,17,6413,65,0,0,4,1],[6425,21,6425,49,0,0,4,0],[6425,21,6425,49,0,0,4,1],[6429,25,6429,34,0,0,4,0],[6431,25,6431,27,0,0,4,1],[6437,9,6437,35,0,0,4,1],[6466,9,6466,35,0,0,4,1],[6495,9,6495,35,0,0,4,1],[6524,9,6524,34,0,0,4,0],[6524,9,6524,34,0,0,4,1],[6529,17,6529,65,0,0,4,0],[6529,17,6529,65,0,0,4,1],[6541,21,6541,49,0,0,4,0],[6541,21,6541,49,0,0,4,1],[6545,25,6545,34,0,0,4,0],[6547,25,6547,27,0,0,4,1],[6555,9,6555,35,0,0,4,1],[6584,9,6584,35,0,0,4,0],[6584,9,6584,35,0,0,4,1],[6589,17,6589,40,0,0,4,0],[6589,17,6589,40,0,0,4,1],[6594,21,6594,49,0,0,4,0],[6594,21,6594,49,0,0,4,1],[6597,25,6597,34,0,0,4,0],[6597,25,6597,34,0,0,4,1],[6597,38,6597,56,0,0,4,0],[6598,25,6598,57,0,0,4,0],[6598,25,6598,57,0,0,4,1],[6609,25,6609,34,0,0,4,0],[6609,25,6609,34,0,0,4,1],[6611,25,6611,27,0,0,4,0],[6611,25,6611,27,0,0,4,1],[6617,9,6617,35,0,0,4,0],[6617,9,6617,35,0,0,4,1],[6622,17,6622,40,0,0,4,0],[6622,17,6622,40,0,0,4,1],[6627,21,6627,49,0,0,4,1],[6640,9,6640,35,0,0,4,1],[6663,9,6663,36,0,0,4,0],[6663,9,6663,36,0,0,4,1],[6668,17,6668,40,0,0,4,0],[6668,17,6668,40,0,0,4,1],[6673,21,6673,49,0,0,4,0],[6673,21,6673,49,0,0,4,1],[6678,25,6678,34,0,0,4,0],[6678,25,6678,34,0,0,4,1],[6680,25,6680,27,0,0,4,0],[6680,25,6680,27,0,0,4,1],[6686,9,6686,36,0,0,4,1],[6709,9,6709,36,0,0,4,0],[6709,9,6709,36,0,0,4,1],[6714,17,6714,40,0,0,4,0],[6714,17,6714,40,0,0,4,1],[6719,21,6719,49,0,0,4,0],[6719,21,6719,49,0,0,4,1],[6724,25,6724,34,0,0,4,0],[6724,25,6724,34,0,0,4,1],[6726,25,6726,27,0,0,4,0],[6726,25,6726,27,0,0,4,1],[6732,9,6732,36,0,0,4,1],[6755,9,6755,36,0,0,4,1],[6778,9,6778,36,0,0,4,1],[6801,9,6801,35,0,0,4,0],[6801,9,6801,35,0,0,4,1],[6806,17,6806,40,0,0,4,0],[6806,17,6806,40,0,0,4,1],[6811,21,6811,49,0,0,4,0],[6811,21,6811,49,0,0,4,1],[6816,25,6816,34,0,0,4,0],[6816,25,6816,34,0,0,4,1],[6818,25,6818,27,0,0,4,0],[6818,25,6818,27,0,0,4,1],[6824,9,6824,36,0,0,4,1],[6847,9,6847,34,0,0,4,0],[6847,9,6847,34,0,0,4,1],[6852,17,6852,40,0,0,4,0],[6852,17,6852,40,0,0,4,1],[6857,21,6857,49,0,0,4,0],[6857,21,6857,49,0,0,4,1],[6862,25,6862,34,0,0,4,0],[6862,25,6862,34,0,0,4,1],[6864,25,6864,27,0,0,4,1],[6870,9,6870,35,0,0,4,0],[6870,9,6870,35,0,0,4,1],[6876,17,6876,45,0,0,4,0],[6876,17,6876,45,0,0,4,1],[6879,21,6879,30,0,0,4,0],[6879,21,6879,30,0,0,4,1],[6879,34,6879,52,0,0,4,0],[6880,21,6880,53,0,0,4,0],[6880,21,6880,53,0,0,4,1],[6890,21,6890,30,0,0,4,0],[6890,21,6890,30,0,0,4,1],[6892,21,6892,23,0,0,4,1],[6897,9,6897,35,0,0,4,0],[6897,9,6897,35,0,0,4,1],[6903,17,6903,55,0,0,4,1],[6928,17,6928,45,0,0,4,0],[6928,17,6928,45,0,0,4,1],[6932,21,6932,30,0,0,4,0],[6932,21,6932,30,0,0,4,1],[6934,21,6934,23,0,0,4,0],[6934,21,6934,23,0,0,4,1],[6939,9,6939,35,0,0,4,0],[6939,9,6939,35,0,0,4,1],[6945,17,6945,45,0,0,4,0],[6945,17,6945,45,0,0,4,1],[6950,21,6950,30,0,0,4,0],[6950,21,6950,30,0,0,4,1],[6952,21,6952,23,0,0,4,0],[6952,21,6952,23,0,0,4,1],[6957,9,6957,36,0,0,4,0],[6957,9,6957,36,0,0,4,1],[6963,17,6963,45,0,0,4,0],[6963,17,6963,45,0,0,4,1],[6968,21,6968,30,0,0,4,0],[6968,21,6968,30,0,0,4,1],[6970,21,6970,23,0,0,4,0],[6970,21,6970,23,0,0,4,1],[6975,9,6975,36,0,0,4,0],[6975,9,6975,36,0,0,4,1],[6981,17,6981,45,0,0,4,0],[6981,17,6981,45,0,0,4,1],[6986,21,6986,30,0,0,4,0],[6986,21,6986,30,0,0,4,1],[6988,21,6988,23,0,0,4,0],[6988,21,6988,23,0,0,4,1],[6993,9,6993,36,0,0,4,0],[6993,9,6993,36,0,0,4,1],[6999,17,6999,45,0,0,4,0],[6999,17,6999,45,0,0,4,1],[7004,21,7004,30,0,0,4,0],[7004,21,7004,30,0,0,4,1],[7006,21,7006,23,0,0,4,0],[7006,21,7006,23,0,0,4,1],[7011,9,7011,36,0,0,4,0],[7011,9,7011,36,0,0,4,1],[7017,17,7017,45,0,0,4,0],[7017,17,7017,45,0,0,4,1],[7022,21,7022,30,0,0,4,0],[7022,21,7022,30,0,0,4,1],[7024,21,7024,23,0,0,4,0],[7024,21,7024,23,0,0,4,1],[7029,9,7029,36,0,0,4,0],[7029,9,7029,36,0,0,4,1],[7035,17,7035,45,0,0,4,0],[7035,17,7035,45,0,0,4,1],[7040,21,7040,30,0,0,4,0],[7040,21,7040,30,0,0,4,1],[7042,21,7042,23,0,0,4,0],[7042,21,7042,23,0,0,4,1],[7047,9,7047,36,0,0,4,0],[7047,9,7047,36,0,0,4,1],[7053,17,7053,45,0,0,4,0],[7053,17,7053,45,0,0,4,1],[7058,21,7058,30,0,0,4,0],[7058,21,7058,30,0,0,4,1],[7060,21,7060,23,0,0,4,0],[7060,21,7060,23,0,0,4,1],[7065,9,7065,35,0,0,4,0],[7065,9,7065,35,0,0,4,1],[7071,17,7071,45,0,0,4,0],[7071,17,7071,45,0,0,4,1],[7076,21,7076,30,0,0,4,0],[7076,21,7076,30,0,0,4,1],[7078,21,7078,23,0,0,4,0],[7078,21,7078,23,0,0,4,1],[7083,9,7083,36,0,0,4,0],[7083,9,7083,36,0,0,4,1],[7089,17,7089,45,0,0,4,0],[7089,17,7089,45,0,0,4,1],[7094,21,7094,30,0,0,4,0],[7094,21,7094,30,0,0,4,1],[7096,21,7096,23,0,0,4,0],[7096,21,7096,23,0,0,4,1],[7101,9,7101,34,0,0,4,0],[7101,9,7101,34,0,0,4,1],[7107,17,7107,45,0,0,4,0],[7107,17,7107,45,0,0,4,1],[7112,21,7112,30,0,0,4,0],[7112,21,7112,30,0,0,4,1],[7114,21,7114,23,0,0,4,0],[7114,21,7114,23,0,0,4,1],[7119,9,7119,16,0,0,4,1],[7123,9,7123,37,0,0,4,0],[7123,9,7123,37,0,0,4,1]],\"horAcc8\":[[347,9,347,27,0,0,4,1],[353,9,353,20,0,0,4,0],[353,9,353,20,0,0,4,1],[358,13,358,24,0,0,4,1],[371,18,371,29,0,0,4,1],[395,22,395,28,0,0,4,1],[316,9,316,16,2,0,4,1],[324,9,324,15,2,0,4,1],[326,9,326,15,2,0,4,1],[328,9,328,15,2,0,4,1],[330,9,330,15,2,0,4,0],[332,9,332,15,2,0,4,1]],\"Fax3PreDecode\":[[175,9,175,20,0,0,4,0],[175,9,175,20,0,0,4,1]],\"TIFFWriteDirectoryTagShortLong\":[[1797,9,1797,20,0,0,4,0],[1797,9,1797,20,0,0,4,1],[1802,9,1802,24,0,0,4,0],[1802,9,1802,24,0,0,4,1]],\"TIFFReadDirectory\":[[4115,9,4115,33,0,0,4,0],[4115,9,4115,33,0,0,4,1],[4128,9,4133,50,0,0,4,1],[4129,39,4130,75,0,0,4,0],[4139,9,4139,18,0,0,4,0],[4139,9,4139,18,0,0,4,1],[4149,9,4149,56,0,0,4,0],[4164,32,4164,45,0,0,4,0],[4164,32,4164,45,0,0,4,1],[4168,44,4168,57,0,0,4,0],[4168,44,4168,57,0,0,4,1],[4170,21,4170,49,0,0,4,0],[4170,21,4170,49,0,0,4,1],[4213,9,4213,11,0,0,4,0],[4213,9,4213,11,0,0,4,1],[4215,13,4215,44,0,0,4,0],[4215,13,4215,44,0,0,4,1],[4220,9,4220,11,0,0,4,0],[4220,9,4220,11,0,0,4,1],[4231,13,4231,44,0,0,4,0],[4231,13,4231,44,0,0,4,1],[4233,13,4233,41,0,0,4,0],[4233,13,4233,41,0,0,4,1],[4238,13,4238,59,0,0,4,1],[4244,13,4244,70,0,0,4,1],[4250,28,4250,41,0,0,4,0],[4250,28,4250,41,0,0,4,1],[4252,13,4252,29,0,0,4,0],[4252,13,4252,29,0,0,4,1],[4255,17,4255,34,0,0,4,0],[4255,17,4255,34,0,0,4,1],[4263,21,4267,27,0,0,4,1],[4283,13,4283,29,0,0,4,0],[4283,13,4283,29,0,0,4,1],[4286,17,4286,47,0,0,4,0],[4286,17,4286,47,0,0,4,1],[4292,21,4292,46,0,0,4,0],[4292,21,4292,46,0,0,4,1],[4293,21,4293,49,0,0,4,0],[4293,21,4293,49,0,0,4,1],[4294,21,4294,45,0,0,4,0],[4294,21,4294,45,0,0,4,1],[4295,21,4295,48,0,0,4,0],[4295,21,4295,48,0,0,4,1],[4298,21,4298,44,0,0,4,0],[4298,21,4298,44,0,0,4,1],[4299,21,4299,45,0,0,4,0],[4299,21,4299,45,0,0,4,1],[4300,21,4300,44,0,0,4,0],[4300,21,4300,44,0,0,4,1],[4301,21,4301,44,0,0,4,0],[4301,21,4301,44,0,0,4,1],[4302,21,4302,43,0,0,4,0],[4302,21,4302,43,0,0,4,1],[4303,21,4303,43,0,0,4,0],[4303,21,4303,43,0,0,4,1],[4304,21,4304,46,0,0,4,0],[4304,21,4304,46,0,0,4,1],[4305,21,4305,46,0,0,4,0],[4305,21,4305,46,0,0,4,1],[4306,21,4306,46,0,0,4,0],[4306,21,4306,46,0,0,4,1],[4307,29,4307,60,0,0,4,0],[4307,29,4307,60,0,0,4,1],[4311,21,4311,28,0,0,4,0],[4311,21,4311,28,0,0,4,1],[4312,29,4312,79,0,0,4,0],[4312,29,4312,79,0,0,4,1],[4327,9,4327,59,0,0,4,0],[4327,9,4327,59,0,0,4,1],[4328,9,4328,64,0,0,4,0],[4328,9,4328,64,0,0,4,1],[4330,13,4330,35,0,0,4,1],[4334,13,4334,22,0,0,4,0],[4334,13,4334,22,0,0,4,1],[4334,26,4334,47,0,0,4,0],[4334,26,4334,47,0,0,4,1],[4338,17,4338,26,0,0,4,0],[4338,17,4338,26,0,0,4,1],[4338,30,4338,51,0,0,4,0],[4338,30,4338,51,0,0,4,1],[4350,9,4350,22,0,0,4,0],[4350,9,4350,22,0,0,4,1],[4359,28,4359,41,0,0,4,0],[4359,28,4359,41,0,0,4,1],[4361,13,4361,29,0,0,4,0],[4361,13,4361,29,0,0,4,1],[4365,17,4365,44,0,0,4,0],[4365,17,4365,44,0,0,4,1],[4366,17,4366,44,0,0,4,0],[4366,17,4366,44,0,0,4,1],[4367,17,4367,43,0,0,4,0],[4367,17,4367,43,0,0,4,1],[4368,17,4368,38,0,0,4,0],[4368,17,4368,38,0,0,4,1],[4369,17,4369,42,0,0,4,0],[4369,17,4369,42,0,0,4,1],[4384,29,4384,60,0,0,4,0],[4384,29,4384,60,0,0,4,1],[4387,29,4387,57,0,0,4,0],[4387,29,4387,57,0,0,4,1],[4392,33,4392,36,0,0,4,0],[4395,29,4395,68,0,0,4,0],[4395,29,4395,68,0,0,4,1],[4397,29,4397,66,0,0,4,0],[4397,29,4397,66,0,0,4,1],[4401,17,4401,45,0,0,4,0],[4401,17,4401,45,0,0,4,1],[4402,17,4402,45,0,0,4,0],[4402,17,4402,45,0,0,4,1],[4409,25,4410,66,0,0,4,0],[4409,25,4410,66,0,0,4,1],[4414,25,4414,53,0,0,4,0],[4414,25,4414,53,0,0,4,1],[4419,29,4419,32,0,0,4,0],[4427,25,4427,27,0,0,4,1],[4431,17,4431,42,0,0,4,0],[4431,17,4431,42,0,0,4,1],[4432,17,4432,41,0,0,4,0],[4432,17,4432,41,0,0,4,1],[4435,25,4435,40,0,0,4,0],[4435,25,4435,40,0,0,4,1],[4436,25,4436,39,0,0,4,0],[4436,25,4436,39,0,0,4,1],[4437,25,4437,40,0,0,4,0],[4437,25,4437,40,0,0,4,1],[4439,25,4439,32,0,0,4,0],[4439,25,4439,32,0,0,4,1],[4442,35,4442,58,0,0,4,1],[4449,37,4449,40,0,0,4,0],[4456,17,4456,45,0,0,4,0],[4456,17,4456,45,0,0,4,1],[4457,17,4457,44,0,0,4,0],[4457,17,4457,44,0,0,4,1],[4460,25,4460,40,0,0,4,0],[4460,25,4460,40,0,0,4,1],[4461,25,4461,39,0,0,4,0],[4461,25,4461,39,0,0,4,1],[4462,25,4462,40,0,0,4,0],[4462,25,4462,40,0,0,4,1],[4464,25,4464,32,0,0,4,0],[4464,25,4464,32,0,0,4,1],[4467,35,4467,58,0,0,4,1],[4474,37,4474,40,0,0,4,0],[4481,17,4481,38,0,0,4,0],[4481,17,4481,38,0,0,4,1],[4482,17,4482,46,0,0,4,0],[4482,17,4482,46,0,0,4,1],[4496,25,4496,44,0,0,4,0],[4496,25,4496,44,0,0,4,1],[4502,29,4502,32,0,0,4,0],[4508,25,4508,59,0,0,4,0],[4508,25,4508,59,0,0,4,1],[4514,29,4514,32,0,0,4,0],[4519,25,4519,67,0,0,4,0],[4519,25,4519,67,0,0,4,1],[4520,25,4520,69,0,0,4,0],[4520,25,4520,69,0,0,4,1],[4530,25,4530,66,0,0,4,0],[4530,25,4530,66,0,0,4,1],[4534,25,4534,53,0,0,4,0],[4534,25,4534,53,0,0,4,1],[4539,29,4539,32,0,0,4,0],[4551,17,4551,42,0,0,4,1],[4621,17,4621,24,0,0,4,0],[4621,17,4621,24,0,0,4,1],[4644,9,4644,57,0,0,4,0],[4644,9,4644,57,0,0,4,1],[4646,13,4646,26,0,0,4,0],[4646,13,4646,26,0,0,4,1],[4651,17,4651,75,0,0,4,1],[4654,18,4654,64,0,0,4,0],[4654,18,4654,64,0,0,4,1],[4661,13,4661,26,0,0,4,0],[4661,13,4661,26,0,0,4,1],[4666,17,4666,61,0,0,4,1],[4669,13,4669,26,0,0,4,0],[4669,13,4669,26,0,0,4,1],[4671,17,4671,63,0,0,4,1],[4679,17,4679,65,0,0,4,0],[4679,17,4679,65,0,0,4,1],[4684,21,4684,67,0,0,4,1],[4687,22,4687,77,0,0,4,0],[4687,22,4687,77,0,0,4,1],[4688,22,4688,77,0,0,4,0],[4688,22,4688,77,0,0,4,1],[4694,21,4694,67,0,0,4,1],[4705,9,4705,22,0,0,4,0],[4705,9,4705,22,0,0,4,1],[4718,9,4718,33,0,0,4,0],[4718,9,4718,33,0,0,4,1],[4725,9,4725,62,0,0,4,0],[4725,9,4725,62,0,0,4,1],[4727,9,4727,22,0,0,4,0],[4727,9,4727,22,0,0,4,1],[4730,13,4730,63,0,0,4,0],[4730,13,4730,63,0,0,4,1],[4731,13,4731,32,0,0,4,0],[4731,13,4731,32,0,0,4,1],[4731,36,4731,66,0,0,4,0],[4731,36,4731,66,0,0,4,1],[4751,9,4751,32,0,0,4,1],[4764,14,4764,54,0,0,4,0],[4766,13,4766,60,0,0,4,0],[4766,13,4766,60,0,0,4,1],[4768,17,4770,69,0,0,4,0],[4768,17,4770,69,0,0,4,1],[4775,13,4775,63,0,0,4,0],[4775,13,4775,63,0,0,4,1],[4777,17,4779,80,0,0,4,0],[4777,17,4779,80,0,0,4,1],[4791,9,4791,23,0,0,4,0],[4791,9,4791,23,0,0,4,1],[4792,9,4793,27,0,0,4,0],[4792,9,4793,27,0,0,4,1],[4812,13,4812,28,0,0,4,1],[4822,13,4822,33,0,0,4,0],[4822,13,4822,33,0,0,4,1],[4833,9,4833,59,0,0,4,0],[4833,9,4833,59,0,0,4,1],[4834,9,4834,22,0,0,4,0],[4834,9,4834,22,0,0,4,1],[4836,13,4836,47,0,0,4,0],[4836,13,4836,47,0,0,4,1],[4837,13,4837,49,0,0,4,0],[4837,13,4837,49,0,0,4,1],[4839,18,4839,52,0,0,4,0],[4839,18,4839,52,0,0,4,1],[4852,9,4852,57,0,0,4,0],[4852,9,4852,57,0,0,4,1],[4857,13,4857,26,0,0,4,0],[4857,13,4857,26,0,0,4,1],[4864,18,4864,69,0,0,4,0],[4864,18,4864,69,0,0,4,1],[4865,18,4865,45,0,0,4,0],[4865,18,4865,45,0,0,4,1],[4866,18,4866,71,0,0,4,0],[4866,18,4866,71,0,0,4,1],[4867,18,4868,63,0,0,4,0],[4867,18,4868,63,0,0,4,1],[4877,17,4877,64,0,0,4,0],[4877,17,4877,64,0,0,4,1],[4880,18,4880,46,0,0,4,0],[4880,18,4880,46,0,0,4,1],[4881,18,4881,50,0,0,4,0],[4881,18,4881,50,0,0,4,1],[4881,54,4881,76,0,0,4,0],[4881,54,4881,76,0,0,4,1],[4892,17,4892,64,0,0,4,0],[4892,17,4892,64,0,0,4,1],[4895,18,4895,58,0,0,4,0],[4896,18,4896,69,0,0,4,0],[4896,18,4896,69,0,0,4,1],[4897,18,4897,45,0,0,4,0],[4897,18,4897,45,0,0,4,1],[4898,18,4898,65,0,0,4,0],[4898,18,4898,65,0,0,4,1],[4899,18,4900,52,0,0,4,0],[4899,18,4900,52,0,0,4,1],[4901,18,4901,53,0,0,4,0],[4901,18,4901,53,0,0,4,1],[4902,18,4902,53,0,0,4,0],[4902,18,4902,53,0,0,4,1],[4917,17,4917,64,0,0,4,1],[4921,9,4921,12,0,0,4,0],[4926,9,4926,22,0,0,4,0],[4926,9,4926,22,0,0,4,1],[4928,13,4928,48,0,0,4,0],[4928,13,4928,48,0,0,4,1],[4972,9,4972,62,0,0,4,0],[4972,9,4972,62,0,0,4,1],[4973,9,4973,39,0,0,4,0],[4973,9,4973,39,0,0,4,1],[4974,9,4974,58,0,0,4,0],[4974,9,4974,58,0,0,4,1],[4975,9,4975,79,0,0,4,0],[4975,9,4975,79,0,0,4,1],[4983,9,4983,60,0,0,4,0],[4983,9,4983,60,0,0,4,1],[4984,9,4984,56,0,0,4,0],[4984,9,4984,56,0,0,4,1],[4985,9,4985,77,0,0,4,0],[4985,9,4985,77,0,0,4,1],[4986,9,4986,44,0,0,4,0],[4986,9,4986,44,0,0,4,1],[5007,9,5007,31,0,0,4,0],[5007,9,5007,31,0,0,4,1],[5016,13,5016,31,0,0,4,0],[5016,13,5016,31,0,0,4,1],[5024,13,5024,32,0,0,4,0],[5024,13,5024,32,0,0,4,1],[5032,9,5032,12,0,0,4,0],[250,22,250,62,87,0,4,0],[250,22,250,62,87,0,4,1],[250,22,250,62,93,0,4,0],[250,22,250,62,93,0,4,1],[250,22,250,62,120,0,4,0],[250,22,250,62,120,0,4,1]],\"TIFFReadDirEntryIfd8\":[[1179,9,1179,34,0,0,4,0],[1179,9,1179,34,0,0,4,1],[1183,9,1183,23,0,0,4,0],[1183,9,1183,23,0,0,4,1],[1184,9,1184,22,0,0,4,0],[1184,9,1184,22,0,0,4,1],[1191,9,1191,24,0,0,4,0],[1191,9,1191,24,0,0,4,1],[1192,9,1192,23,0,0,4,0],[1192,9,1192,23,0,0,4,1],[1195,9,1195,16,0,0,4,0],[1195,9,1195,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteShort\":[[3575,9,3575,21,0,0,4,0],[3575,9,3575,21,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Slong8\":[[3892,9,3892,18,0,0,4,0],[3892,9,3892,18,0,0,4,1]],\"JPEGFixupTagsSubsamplingReadWord\":[[1059,9,1059,53,0,0,4,0],[1059,9,1059,53,0,0,4,1],[1061,9,1061,53,0,0,4,0],[1061,9,1061,53,0,0,4,1]],\"PixarLogPreDecode\":[[826,9,826,56,0,0,4,1]],\"OJPEGDecodeRaw\":[[906,9,906,37,0,0,4,0],[906,9,906,37,0,0,4,1],[916,13,916,47,0,0,4,0],[916,13,916,47,0,0,4,1],[918,17,921,71,0,0,4,0],[918,17,921,71,0,0,4,1],[935,21,935,60,0,0,4,0],[935,21,935,60,0,0,4,1],[938,26,938,50,0,0,4,0],[938,26,938,50,0,0,4,1],[940,30,940,54,0,0,4,0],[940,30,940,54,0,0,4,1],[949,13,949,76,0,0,4,0],[949,13,949,76,0,0,4,1],[953,14,953,19,0,0,4,0],[953,14,953,19,0,0,4,1]],\"EstimateStripByteCounts\":[[5266,9,5266,42,0,0,4,1],[5269,9,5269,32,0,0,4,0],[5269,9,5269,32,0,0,4,1],[5273,9,5273,40,0,0,4,1],[5276,9,5276,47,0,0,4,0],[5276,9,5276,47,0,0,4,1],[5282,13,5282,45,0,0,4,0],[5287,38,5287,43,0,0,4,0],[5287,38,5287,43,0,0,4,1],[5292,17,5292,31,0,0,4,0],[5292,17,5292,31,0,0,4,1],[5300,17,5300,56,0,0,4,1],[5303,17,5303,49,0,0,4,0],[5305,21,5305,34,0,0,4,0],[5305,21,5305,34,0,0,4,1],[5313,17,5313,46,0,0,4,1],[5317,13,5317,29,0,0,4,0],[5317,13,5317,29,0,0,4,1],[5322,13,5322,57,0,0,4,0],[5322,13,5322,57,0,0,4,1],[5324,25,5324,47,0,0,4,0],[5324,25,5324,47,0,0,4,1],[5334,13,5335,56,0,0,4,0],[5334,13,5335,56,0,0,4,1],[5337,13,5338,21,0,0,4,0],[5337,13,5338,21,0,0,4,1],[5340,17,5340,56,0,0,4,0],[5340,17,5340,56,0,0,4,1],[5356,25,5356,47,0,0,4,0],[5356,25,5356,47,0,0,4,1],[5363,25,5363,47,0,0,4,0],[5363,25,5363,47,0,0,4,1],[5365,17,5365,29,0,0,4,0],[5365,17,5365,29,0,0,4,1],[5365,33,5365,69,0,0,4,0],[5365,33,5365,69,0,0,4,1],[5371,9,5371,22,0,0,4,0],[5371,9,5371,22,0,0,4,1],[250,22,250,62,6,0,4,0],[250,22,250,62,6,0,4,1]],\"TIFFVSetField\":[[1207,12,1207,35,0,0,4,0]],\"OJPEGReadSkip\":[[2380,9,2380,31,0,0,4,0],[2380,9,2380,31,0,0,4,1],[2385,9,2385,14,0,0,4,0],[2385,9,2385,14,0,0,4,1],[2389,13,2389,50,0,0,4,0],[2389,13,2389,50,0,0,4,1]],\"TIFFReadDirEntrySshortArray\":[[1930,9,1930,23,0,0,4,1],[1931,9,1931,24,0,0,4,1],[1932,9,1932,24,0,0,4,1],[1933,9,1933,25,0,0,4,0],[1934,9,1934,23,0,0,4,1],[1935,9,1935,24,0,0,4,1],[1936,9,1936,24,0,0,4,1],[1937,9,1937,25,0,0,4,1],[1939,9,1939,16,0,0,4,1],[1943,9,1943,39,0,0,4,0],[1943,9,1943,39,0,0,4,1],[1943,43,1943,58,0,0,4,0],[1943,43,1943,58,0,0,4,1],[1948,13,1948,32,0,0,4,1],[1950,9,1950,24,0,0,4,1],[1970,9,1970,25,0,0,4,0],[1972,17,1972,43,0,0,4,0],[1972,17,1972,43,0,0,4,1]],\"TIFFDefaultDirectory\":[[1785,9,1785,35,0,0,4,1],[1798,9,1798,22,0,0,4,1]],\"PredictorSetup\":[[68,9,68,28,0,0,4,0],[68,9,68,28,0,0,4,1],[70,9,70,34,0,0,4,0],[70,9,70,34,0,0,4,1],[71,17,71,42,0,0,4,0],[71,17,71,42,0,0,4,1],[71,46,71,72,0,0,4,0],[71,46,71,72,0,0,4,1],[72,17,72,43,0,0,4,0],[72,47,72,73,0,0,4,0],[81,9,81,37,0,0,4,1],[102,9,102,16,0,0,4,0],[102,9,102,16,0,0,4,1],[108,10,108,52,0,0,4,0],[108,10,108,52,0,0,4,1],[117,9,117,25,0,0,4,1],[250,22,250,62,7,0,4,0]],\"TryChopUpUncompressedBigTiff\":[[7413,9,7413,44,0,0,4,0],[7413,9,7413,44,0,0,4,1],[7413,48,7413,73,0,0,4,1],[7416,9,7416,50,0,0,4,0],[7416,9,7416,50,0,0,4,1],[7416,54,7416,73,0,0,4,0],[7421,9,7421,27,0,0,4,1],[7421,31,7421,59,0,0,4,0],[7421,31,7421,59,0,0,4,1],[7428,17,7428,35,0,0,4,0],[7428,17,7428,35,0,0,4,1],[7430,13,7430,36,0,0,4,0],[7430,13,7430,36,0,0,4,1],[7432,17,7434,79,0,0,4,1],[7441,17,7441,60,0,0,4,0],[7441,17,7441,60,0,0,4,1],[7445,17,7445,22,0,0,4,0],[7445,17,7445,22,0,0,4,1],[7445,26,7447,68,0,0,4,0],[7456,9,7456,31,0,0,4,0],[7456,9,7456,31,0,0,4,1],[7463,9,7463,21,0,0,4,1],[7468,9,7468,34,0,0,4,0],[7468,38,7468,55,0,0,4,0],[7468,38,7468,55,0,0,4,1],[7474,13,7474,35,0,0,4,0],[7474,13,7474,35,0,0,4,1],[7474,39,7474,78,0,0,4,0],[282,6,282,54,3,0,4,0]],\"Fax3PrematureEOF\":[[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFWriteDirectoryTagData\":[[2874,12,2874,23,0,0,4,0],[2874,12,2874,23,0,0,4,1],[2877,13,2877,34,0,0,4,0],[2877,13,2877,34,0,0,4,1],[2881,9,2881,20,0,0,4,0],[2881,9,2881,20,0,0,4,1],[2884,25,2884,30,0,0,4,0],[2884,25,2884,30,0,0,4,1],[2891,9,2891,70,0,0,4,0],[2891,9,2891,70,0,0,4,1],[2891,24,2891,55,0,0,4,1],[2893,13,2893,17,0,0,4,0],[2893,21,2893,31,0,0,4,0],[2903,13,2903,45,0,0,4,0],[2905,13,2905,22,0,0,4,1],[2905,26,2905,43,0,0,4,1],[2910,13,2910,20,0,0,4,1],[2915,13,2915,39,0,0,4,1],[2922,13,2922,21,0,0,4,1],[2928,13,2928,33,0,0,4,1],[2930,13,2930,45,0,0,4,0],[2934,17,2934,43,0,0,4,1]],\"TIFFFillTile\":[[1190,9,1190,47,0,0,4,0],[1190,9,1190,47,0,0,4,1],[1193,13,1193,27,0,0,4,0],[1193,13,1193,27,0,0,4,1],[1193,31,1193,67,0,0,4,0],[1193,31,1193,67,0,0,4,1],[1204,13,1204,36,0,0,4,0],[1204,13,1204,36,0,0,4,1],[1209,17,1209,31,0,0,4,0],[1209,35,1209,80,0,0,4,0],[1209,35,1209,80,0,0,4,1],[1278,17,1278,50,0,0,4,1],[1283,17,1283,50,0,0,4,0],[1283,17,1283,50,0,0,4,1],[1286,21,1286,58,0,0,4,1],[1294,17,1294,49,0,0,4,1],[1317,21,1318,31,0,0,4,0],[1317,21,1318,31,0,0,4,1],[1327,17,1327,41,0,0,4,0],[1328,17,1328,29,0,0,4,0],[1328,17,1328,29,0,0,4,1],[1329,17,1329,54,0,0,4,0],[1329,17,1329,54,0,0,4,1],[251,23,251,62,3,0,4,1],[251,23,251,62,5,0,4,1],[251,23,251,62,16,0,4,1]],\"ZIPSetupDecode\":[[107,9,107,39,0,0,4,1],[116,9,116,46,0,0,4,0],[117,9,117,41,0,0,4,1]],\"TIFFFieldSetGetSize\":[[685,9,685,20,0,0,4,1],[690,9,690,35,0,0,4,1],[691,9,691,31,0,0,4,0],[691,9,691,31,0,0,4,1],[692,9,692,34,0,0,4,1],[693,9,693,35,0,0,4,1],[694,9,694,35,0,0,4,0],[694,9,694,35,0,0,4,1],[695,9,695,31,0,0,4,1],[697,9,697,31,0,0,4,0],[697,9,697,31,0,0,4,1],[698,9,698,31,0,0,4,1],[699,9,699,34,0,0,4,0],[699,9,699,34,0,0,4,1],[700,9,700,34,0,0,4,1],[701,9,701,35,0,0,4,1],[702,9,702,35,0,0,4,1],[703,9,703,35,0,0,4,0],[703,9,703,35,0,0,4,1],[704,9,704,35,0,0,4,0],[704,9,704,35,0,0,4,1],[706,9,706,32,0,0,4,0],[706,9,706,32,0,0,4,1],[707,9,707,32,0,0,4,1],[708,9,708,35,0,0,4,0],[708,9,708,35,0,0,4,1],[709,9,709,35,0,0,4,1],[710,9,710,36,0,0,4,0],[710,9,710,36,0,0,4,1],[711,9,711,36,0,0,4,1],[712,9,712,36,0,0,4,0],[712,9,712,36,0,0,4,1],[713,9,713,36,0,0,4,0],[713,9,713,36,0,0,4,1],[715,9,715,29,0,0,4,1],[716,9,716,32,0,0,4,0],[716,9,716,32,0,0,4,1],[717,9,717,32,0,0,4,1],[718,9,718,31,0,0,4,0],[718,9,718,31,0,0,4,1],[719,9,719,37,0,0,4,0],[719,9,719,37,0,0,4,1],[720,9,720,35,0,0,4,0],[720,9,720,35,0,0,4,1],[721,9,721,35,0,0,4,1],[722,9,722,34,0,0,4,0],[722,9,722,34,0,0,4,1],[723,9,723,36,0,0,4,0],[723,9,723,36,0,0,4,1],[724,9,724,36,0,0,4,1],[725,9,725,35,0,0,4,0],[725,9,725,35,0,0,4,1],[726,9,726,36,0,0,4,0],[726,9,726,36,0,0,4,1],[727,9,727,36,0,0,4,0],[727,9,727,36,0,0,4,1],[728,9,728,35,0,0,4,0],[728,9,728,35,0,0,4,1],[730,9,730,32,0,0,4,1],[731,9,731,32,0,0,4,1],[732,9,732,32,0,0,4,0],[732,9,732,32,0,0,4,1],[733,9,733,30,0,0,4,0],[733,9,733,30,0,0,4,1],[734,9,734,35,0,0,4,1],[735,9,735,35,0,0,4,1],[736,9,736,35,0,0,4,1],[737,9,737,33,0,0,4,1],[738,9,738,36,0,0,4,1],[739,9,739,36,0,0,4,1],[740,9,740,36,0,0,4,1],[741,9,741,34,0,0,4,1],[742,9,742,36,0,0,4,0],[742,9,742,36,0,0,4,1],[743,9,743,36,0,0,4,0],[743,9,743,36,0,0,4,1],[744,9,744,36,0,0,4,0],[744,9,744,36,0,0,4,1],[745,9,745,34,0,0,4,0],[745,9,745,34,0,0,4,1],[747,9,747,16,0,0,4,1]],\"TIFFReadDirectoryFindEntry\":[[5065,26,5065,38,0,0,4,0],[5065,26,5065,38,0,0,4,1],[5067,13,5067,33,0,0,4,0],[5067,13,5067,33,0,0,4,1]],\"TIFFReadDirEntryDataAndRealloc\":[[1218,9,1218,16,0,0,4,0],[1218,9,1218,16,0,0,4,1],[1227,12,1227,31,0,0,4,0],[1227,12,1227,31,0,0,4,1],[1233,13,1233,33,0,0,4,0],[1233,13,1233,33,0,0,4,1],[1233,37,1233,62,0,0,4,0],[1242,13,1242,29,0,0,4,1],[1256,13,1256,34,0,0,4,0],[1256,13,1256,34,0,0,4,1]],\"OJPEGWriteHeaderInfo\":[[1322,9,1322,40,0,0,4,1],[1332,9,1333,60,0,0,4,1],[1348,9,1349,10,0,0,4,0],[1348,9,1349,10,0,0,4,1],[1351,9,1351,72,0,0,4,0],[1351,9,1351,72,0,0,4,1],[1352,9,1352,46,0,0,4,0],[1359,13,1359,45,0,0,4,0],[1364,17,1364,41,0,0,4,1],[1364,45,1364,69,0,0,4,1],[1393,17,1393,54,0,0,4,1],[1408,17,1408,56,0,0,4,1],[1420,25,1420,59,0,0,4,0],[1420,25,1420,59,0,0,4,1],[1423,25,1423,59,0,0,4,0],[1423,25,1423,59,0,0,4,1],[1426,25,1426,59,0,0,4,0],[1426,25,1426,59,0,0,4,1],[1431,18,1431,63,0,0,4,0],[1439,18,1439,64,0,0,4,1],[1451,9,1452,80,0,0,4,0],[1451,9,1452,80,0,0,4,1],[1454,9,1454,75,0,0,4,1],[1463,9,1464,32,0,0,4,1],[1465,9,1466,32,0,0,4,1]],\"TIFFReadDirEntryCheckedShort\":[[3342,9,3342,35,0,0,4,0],[3342,9,3342,35,0,0,4,1]],\"TIFFReadDirEntryCheckedLong8\":[[3373,9,3373,41,0,0,4,0],[3377,13,3377,39,0,0,4,0],[3377,13,3377,39,0,0,4,1],[3380,13,3380,41,0,0,4,0],[3380,13,3380,41,0,0,4,1],[3385,9,3385,35,0,0,4,0],[3385,9,3385,35,0,0,4,1]],\"OJPEGWriteStreamCompressed\":[[2612,9,2612,32,0,0,4,0],[2614,13,2614,41,0,0,4,0],[2614,13,2614,41,0,0,4,1],[2621,9,2621,37,0,0,4,0],[2625,13,2625,29,0,0,4,0],[2626,21,2626,75,0,0,4,0],[2631,13,2631,26,0,0,4,1],[2634,13,2634,20,0,0,4,1]],\"TIFFReadAndRealloc\":[[85,12,85,31,0,0,4,0],[85,12,85,31,0,0,4,1],[90,13,90,33,0,0,4,0],[90,13,90,33,0,0,4,1],[90,37,90,62,0,0,4,0],[91,13,91,75,0,0,4,0],[97,13,97,75,0,0,4,0],[97,13,97,75,0,0,4,1],[103,17,103,42,0,0,4,1],[110,17,110,33,0,0,4,1],[122,13,122,37,0,0,4,1],[131,13,131,34,0,0,4,0],[131,13,131,34,0,0,4,1],[135,17,135,25,0,0,4,1]],\"PixarLogCleanup\":[[1479,9,1479,20,0,0,4,0],[1481,9,1481,19,0,0,4,0],[1483,9,1483,18,0,0,4,0],[1485,9,1485,22,0,0,4,0],[1487,9,1487,23,0,0,4,0],[1489,9,1489,22,0,0,4,0],[1491,9,1491,33,0,0,4,0],[1491,9,1491,33,0,0,4,1],[1493,13,1493,38,0,0,4,0],[1498,9,1498,17,0,0,4,0],[1498,9,1498,17,0,0,4,1]],\"TIFFFlushData1\":[[928,9,928,27,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSlong\":[[3809,9,3809,18,0,0,4,0],[3809,9,3809,18,0,0,4,1]],\"TIFFFetchStripThing\":[[7142,9,7142,37,0,0,4,0],[7142,9,7142,37,0,0,4,1],[7146,35,7146,38,0,0,4,0],[7149,9,7149,44,0,0,4,0],[7149,9,7149,44,0,0,4,1],[7155,13,7155,19,0,0,4,1],[7158,35,7158,38,0,0,4,0],[7161,13,7161,34,0,0,4,0],[7161,13,7161,34,0,0,4,1],[7169,13,7169,29,0,0,4,1],[7174,13,7174,28,0,0,4,0],[7174,13,7174,28,0,0,4,1]],\"PixarLogSetupDecode\":[[752,9,752,40,0,0,4,1],[756,9,756,42,0,0,4,1],[766,10,766,52,0,0,4,0],[766,10,766,52,0,0,4,1],[773,9,773,23,0,0,4,1],[777,9,777,25,0,0,4,1],[780,9,780,52,0,0,4,0],[782,9,782,52,0,0,4,0],[782,9,782,52,0,0,4,1],[794,9,794,41,0,0,4,1]],\"TIFFReverseBits\":[[312,12,312,17,0,0,4,0],[312,12,312,17,0,0,4,1],[324,12,324,19,0,0,4,0],[324,12,324,19,0,0,4,1]],\"TIFFWriteCheck\":[[602,9,602,34,0,0,4,1],[607,9,607,24,0,0,4,1],[627,9,627,22,0,0,4,1],[633,9,633,46,0,0,4,0],[633,50,633,71,0,0,4,1],[643,13,643,35,0,0,4,1],[649,9,649,35,0,0,4,1],[653,9,653,56,0,0,4,1],[250,22,250,62,4,0,4,0]],\"TIFFReadDirEntryCheckedLong\":[[3358,9,3358,35,0,0,4,0],[3358,9,3358,35,0,0,4,1]],\"PixarLogVSetField\":[[1514,9,1514,37,0,0,4,1],[1527,9,1527,37,0,0,4,1],[1567,9,1567,16,0,0,4,0]],\"_TIFFcalloc\":[[331,9,331,19,0,0,4,1],[331,23,331,31,0,0,4,1]],\"ZIPDecode\":[[251,32,251,71,0,0,4,0],[255,13,255,40,0,0,4,0],[262,13,262,34,0,0,4,1],[264,13,264,34,0,0,4,0],[60,23,60,47,5,0,4,1]],\"OJPEGPreDecodeSkipRaw\":[[797,9,797,43,0,0,4,1],[810,12,810,47,0,0,4,0],[810,12,810,47,0,0,4,1],[812,13,814,67,0,0,4,0],[812,13,814,67,0,0,4,1],[818,9,818,14,0,0,4,1]],\"TIFFErrorExtR\":[[110,9,110,12,0,0,4,0],[110,16,110,37,0,0,4,1],[119,9,119,26,0,0,4,0],[125,9,125,29,0,0,4,1]],\"OJPEGWriteStreamDri\":[[2526,9,2526,34,0,0,4,0],[2526,9,2526,34,0,0,4,1]],\"TIFFInitZIP\":[[670,9,670,69,0,0,4,1],[681,9,681,30,0,0,4,1]],\"TIFFScanlineSize64\":[[250,9,250,51,0,0,4,0],[250,9,250,51,0,0,4,1],[252,13,252,54,0,0,4,0],[252,13,252,54,0,0,4,1],[253,13,253,42,0,0,4,0],[253,13,253,42,0,0,4,1],[253,46,253,65,0,0,4,0],[260,17,260,44,0,0,4,1],[267,18,267,44,0,0,4,0],[267,18,267,44,0,0,4,1],[267,48,267,74,0,0,4,0],[267,48,267,74,0,0,4,1],[268,18,268,44,0,0,4,0],[268,18,268,44,0,0,4,1],[269,18,269,44,0,0,4,0],[269,18,269,44,0,0,4,1],[269,48,269,74,0,0,4,0],[269,48,269,74,0,0,4,1],[270,18,270,44,0,0,4,0],[270,18,270,44,0,0,4,1],[305,9,305,27,0,0,4,0],[305,9,305,27,0,0,4,1],[282,6,282,54,5,0,4,0],[282,6,282,54,5,0,4,1]],\"TIFFWriteDirectoryTagCheckedLong\":[[2286,9,2286,35,0,0,4,1]],\"LogLuvVSetField\":[[1702,9,1702,35,0,0,4,1],[1744,9,1744,34,0,0,4,1],[1755,9,1755,16,0,0,4,0]],\"TIFFReadDirEntryLongArray\":[[2098,9,2098,23,0,0,4,0],[2098,9,2098,23,0,0,4,1],[2099,9,2099,24,0,0,4,0],[2099,9,2099,24,0,0,4,1],[2100,9,2100,24,0,0,4,0],[2100,9,2100,24,0,0,4,1],[2101,9,2101,25,0,0,4,0],[2101,9,2101,25,0,0,4,1],[2102,9,2102,23,0,0,4,0],[2102,9,2102,23,0,0,4,1],[2103,9,2103,24,0,0,4,0],[2103,9,2103,24,0,0,4,1],[2104,9,2104,24,0,0,4,0],[2104,9,2104,24,0,0,4,1],[2105,9,2105,25,0,0,4,0],[2105,9,2105,25,0,0,4,1],[2107,9,2107,16,0,0,4,0],[2107,9,2107,16,0,0,4,1],[2111,9,2111,39,0,0,4,0],[2111,9,2111,39,0,0,4,1],[2111,43,2111,58,0,0,4,0],[2111,43,2111,58,0,0,4,1],[2116,13,2116,32,0,0,4,0],[2116,13,2116,32,0,0,4,1],[2118,9,2118,23,0,0,4,0],[2118,9,2118,23,0,0,4,1],[2120,17,2120,43,0,0,4,0],[2120,17,2120,43,0,0,4,1],[2123,9,2123,24,0,0,4,0],[2123,9,2123,24,0,0,4,1],[2128,25,2128,34,0,0,4,0],[2128,25,2128,34,0,0,4,1],[2130,21,2130,47,0,0,4,0],[2130,21,2130,47,0,0,4,1],[2133,21,2133,49,0,0,4,0],[2133,21,2133,49,0,0,4,1],[2145,9,2145,18,0,0,4,1],[2150,13,2150,32,0,0,4,1],[2152,9,2152,23,0,0,4,0],[2152,9,2152,23,0,0,4,1],[2159,25,2159,34,0,0,4,0],[2159,25,2159,34,0,0,4,1],[2163,9,2163,24,0,0,4,0],[2163,9,2163,24,0,0,4,1],[2170,25,2170,34,0,0,4,0],[2170,25,2170,34,0,0,4,1],[2173,21,2173,49,0,0,4,0],[2173,21,2173,49,0,0,4,1],[2179,9,2179,24,0,0,4,0],[2179,9,2179,24,0,0,4,1],[2186,25,2186,34,0,0,4,0],[2186,25,2186,34,0,0,4,1],[2188,21,2188,47,0,0,4,0],[2188,21,2188,47,0,0,4,1],[2194,9,2194,25,0,0,4,0],[2194,9,2194,25,0,0,4,1],[2201,25,2201,34,0,0,4,0],[2201,25,2201,34,0,0,4,1],[2203,21,2203,47,0,0,4,0],[2203,21,2203,47,0,0,4,1],[2206,21,2206,49,0,0,4,0],[2206,21,2206,49,0,0,4,1],[2212,9,2212,24,0,0,4,0],[2212,9,2212,24,0,0,4,1],[2219,25,2219,34,0,0,4,0],[2219,25,2219,34,0,0,4,1],[2221,21,2221,47,0,0,4,0],[2221,21,2221,47,0,0,4,1],[2224,21,2224,49,0,0,4,0],[2224,21,2224,49,0,0,4,1],[2230,9,2230,25,0,0,4,0],[2230,9,2230,25,0,0,4,1],[2237,25,2237,34,0,0,4,0],[2237,25,2237,34,0,0,4,1],[2239,21,2239,47,0,0,4,0],[2239,21,2239,47,0,0,4,1],[2242,21,2242,49,0,0,4,0],[2242,21,2242,49,0,0,4,1],[2250,9,2250,37,0,0,4,0],[2250,9,2250,37,0,0,4,1]],\"TIFFReadDirEntryCheckedSshort\":[[3350,9,3350,35,0,0,4,0],[3350,9,3350,35,0,0,4,1]],\"_TIFFFillStrilesInternal\":[[7840,9,7840,49,0,0,4,0]],\"PixarLogGuessDataFmt\":[[689,13,689,33,0,0,4,0],[689,13,689,33,0,0,4,1],[691,9,691,16,0,0,4,1],[695,9,695,16,0,0,4,0],[695,9,695,16,0,0,4,1],[696,17,696,44,0,0,4,1],[696,48,696,75,0,0,4,0],[696,48,696,75,0,0,4,1],[699,9,699,16,0,0,4,1],[703,9,703,16,0,0,4,1],[707,9,707,15,0,0,4,0],[707,9,707,15,0,0,4,1],[708,17,708,44,0,0,4,1],[708,48,708,75,0,0,4,0],[708,48,708,75,0,0,4,1]],\"_tiffSeekProc\":[[123,9,123,32,0,0,4,1]],\"OJPEGVSetField\":[[591,9,591,34,0,0,4,0],[591,9,591,34,0,0,4,1],[594,9,594,37,0,0,4,0],[594,9,594,37,0,0,4,1],[597,9,597,38,0,0,4,0],[597,9,597,38,0,0,4,1],[604,9,604,33,0,0,4,0],[604,9,604,33,0,0,4,1],[606,17,606,24,0,0,4,0],[606,17,606,24,0,0,4,1],[608,21,608,27,0,0,4,0],[608,21,608,27,0,0,4,1],[616,29,616,35,0,0,4,0],[616,29,616,35,0,0,4,1],[620,9,620,34,0,0,4,0],[620,9,620,34,0,0,4,1],[622,17,622,24,0,0,4,0],[622,17,622,24,0,0,4,1],[624,21,624,27,0,0,4,0],[624,21,624,27,0,0,4,1],[632,29,632,35,0,0,4,0],[632,29,632,35,0,0,4,1],[636,9,636,34,0,0,4,0],[636,9,636,34,0,0,4,1],[638,17,638,24,0,0,4,0],[638,17,638,24,0,0,4,1],[640,21,640,27,0,0,4,0],[640,21,640,27,0,0,4,1],[648,29,648,35,0,0,4,0],[648,29,648,35,0,0,4,1],[652,9,652,30,0,0,4,0],[652,9,652,30,0,0,4,1],[655,9,655,41,0,0,4,0],[655,9,655,41,0,0,4,1],[658,9,658,16,0,0,4,0],[658,9,658,16,0,0,4,1],[662,9,662,20,0,0,4,1]],\"TIFFFdOpenExt\":[[212,9,212,12,0,0,4,0]],\"OJPEGWriteStreamRst\":[[2648,9,2648,31,0,0,4,0],[2648,9,2648,31,0,0,4,1]],\"OJPEGReadHeaderInfo\":[[1198,9,1198,45,0,0,4,0],[1198,9,1198,45,0,0,4,1],[1208,13,1208,49,0,0,4,0],[1208,13,1208,49,0,0,4,1],[1218,13,1218,64,0,0,4,0],[1218,13,1218,64,0,0,4,1],[1223,9,1223,45,0,0,4,0],[1223,9,1223,45,0,0,4,1],[1225,14,1225,40,0,0,4,0],[1225,14,1225,40,0,0,4,1],[1225,44,1225,70,0,0,4,0],[1225,44,1225,70,0,0,4,1],[1226,14,1226,40,0,0,4,1],[1227,14,1227,40,0,0,4,0],[1227,14,1227,40,0,0,4,1],[1227,44,1227,70,0,0,4,0],[1227,44,1227,70,0,0,4,1],[1228,14,1228,40,0,0,4,1],[1233,13,1233,63,0,0,4,0],[1233,13,1233,63,0,0,4,1],[1245,9,1245,41,0,0,4,0],[1245,9,1245,41,0,0,4,1],[250,22,250,62,1,0,4,0]],\"TIFFHashSetClearInternal\":[[229,21,229,44,0,0,4,0],[229,21,229,44,0,0,4,1],[232,16,232,19,0,0,4,0],[232,16,232,19,0,0,4,1],[234,17,234,35,0,0,4,0],[234,17,234,35,0,0,4,1],[237,17,237,26,0,0,4,0]],\"OJPEGReadHeaderInfoSecTablesDcTable\":[[2079,9,2079,35,0,0,4,0],[2079,9,2079,35,0,0,4,1],[2085,17,2085,42,0,0,4,0],[2085,17,2085,42,0,0,4,1],[2087,13,2087,41,0,0,4,0],[2087,13,2087,41,0,0,4,1],[2088,14,2088,22,0,0,4,0],[2088,14,2088,22,0,0,4,1],[2088,26,2088,78,0,0,4,0],[2090,25,2090,34,0,0,4,0],[2090,25,2090,34,0,0,4,1],[2092,21,2092,67,0,0,4,1],[2101,17,2101,24,0,0,4,1],[2104,25,2104,31,0,0,4,0],[2104,25,2104,31,0,0,4,1],[2108,17,2108,24,0,0,4,1],[2119,25,2119,31,0,0,4,0],[2119,25,2119,31,0,0,4,1],[2122,17,2122,23,0,0,4,0],[2122,17,2122,23,0,0,4,1],[2127,17,2127,36,0,0,4,1]],\"PackBitsDecode\":[[245,12,245,18,0,0,4,0],[245,12,245,18,0,0,4,1],[245,22,245,29,0,0,4,0],[245,22,245,29,0,0,4,1],[249,13,249,18,0,0,4,0],[249,13,249,18,0,0,4,1],[251,17,251,26,0,0,4,0],[251,17,251,26,0,0,4,1],[254,17,254,34,0,0,4,0],[254,17,254,34,0,0,4,1],[262,17,262,24,0,0,4,0],[262,17,262,24,0,0,4,1],[272,20,272,27,0,0,4,0],[272,20,272,27,0,0,4,1],[277,17,277,40,0,0,4,1],[285,17,285,39,0,0,4,0],[285,17,285,39,0,0,4,1],[301,9,301,16,0,0,4,0],[301,9,301,16,0,0,4,1]],\"JPEGFixupTags\":[[814,9,814,59,0,0,4,0],[814,9,814,59,0,0,4,1],[815,9,815,62,0,0,4,0],[815,9,815,62,0,0,4,1],[816,9,816,47,0,0,4,0],[816,9,816,47,0,0,4,1],[817,9,817,49,0,0,4,0],[817,9,817,49,0,0,4,1]],\"JPEGFixupTagsSubsamplingReadByte\":[[1022,9,1022,35,0,0,4,0],[1022,9,1022,35,0,0,4,1],[1025,13,1025,37,0,0,4,0],[1025,13,1025,37,0,0,4,1],[1027,13,1027,34,0,0,4,0],[1027,13,1027,34,0,0,4,1],[1029,17,1030,27,0,0,4,0],[1029,17,1030,27,0,0,4,1],[1037,13,1037,46,0,0,4,0],[1037,13,1037,46,0,0,4,1],[1040,13,1040,78,0,0,4,0],[1040,13,1040,78,0,0,4,1]],\"JPEGSetupDecode\":[[1103,9,1103,44,0,0,4,1],[1121,13,1121,71,0,0,4,0],[1132,9,1132,31,0,0,4,0],[1132,9,1132,31,0,0,4,1],[1136,9,1136,16,0,0,4,0],[1136,9,1136,16,0,0,4,1],[209,34,209,71,4,0,4,0],[209,34,209,71,4,0,4,1]],\"OJPEGReadHeaderInfoSec\":[[1497,9,1497,27,0,0,4,0],[1497,9,1497,27,0,0,4,1],[1499,9,1499,41,0,0,4,0],[1499,9,1499,41,0,0,4,1],[1501,13,1501,57,0,0,4,0],[1501,13,1501,57,0,0,4,1],[1508,17,1508,58,0,0,4,0],[1508,17,1508,58,0,0,4,1],[1509,17,1510,66,0,0,4,0],[1509,17,1510,66,0,0,4,1],[1511,17,1513,32,0,0,4,0],[1511,17,1513,32,0,0,4,1],[1525,13,1525,43,0,0,4,0],[1525,13,1525,43,0,0,4,1],[1527,13,1527,21,0,0,4,0],[1527,13,1527,21,0,0,4,1],[1532,17,1532,43,0,0,4,0],[1532,17,1532,43,0,0,4,1],[1534,18,1534,26,0,0,4,0],[1534,18,1534,26,0,0,4,1],[1537,13,1537,33,0,0,4,1],[1540,13,1540,33,0,0,4,0],[1540,13,1540,33,0,0,4,1],[1541,13,1541,34,0,0,4,0],[1541,13,1541,34,0,0,4,1],[1542,13,1542,38,0,0,4,1],[1543,13,1543,38,0,0,4,0],[1543,13,1543,38,0,0,4,1],[1544,13,1544,38,0,0,4,1],[1545,13,1545,38,0,0,4,0],[1545,13,1545,38,0,0,4,1],[1546,13,1546,38,0,0,4,1],[1547,13,1547,38,0,0,4,1],[1548,13,1548,38,0,0,4,1],[1549,13,1549,38,0,0,4,1],[1550,13,1550,38,0,0,4,0],[1550,13,1550,38,0,0,4,1],[1551,13,1551,39,0,0,4,1],[1552,13,1552,39,0,0,4,0],[1552,13,1552,39,0,0,4,1],[1553,13,1553,39,0,0,4,1],[1554,13,1554,39,0,0,4,1],[1555,13,1555,39,0,0,4,0],[1555,13,1555,39,0,0,4,1],[1556,13,1556,39,0,0,4,0],[1556,13,1556,39,0,0,4,1],[1559,21,1559,47,0,0,4,0],[1559,21,1559,47,0,0,4,1],[1561,21,1561,26,0,0,4,0],[1561,21,1561,26,0,0,4,1],[1563,25,1563,52,0,0,4,1],[1567,21,1567,26,0,0,4,0],[1567,21,1567,26,0,0,4,1],[1570,13,1570,33,0,0,4,0],[1570,13,1570,33,0,0,4,1],[1571,21,1571,62,0,0,4,0],[1571,21,1571,62,0,0,4,1],[1574,13,1574,33,0,0,4,0],[1574,13,1574,33,0,0,4,1],[1575,21,1575,62,0,0,4,0],[1575,21,1575,62,0,0,4,1],[1578,13,1578,33,0,0,4,0],[1578,13,1578,33,0,0,4,1],[1579,21,1579,62,0,0,4,0],[1579,21,1579,62,0,0,4,1],[1582,13,1582,34,0,0,4,0],[1582,13,1582,34,0,0,4,1],[1583,13,1583,34,0,0,4,0],[1583,13,1583,34,0,0,4,1],[1584,13,1584,34,0,0,4,0],[1584,13,1584,34,0,0,4,1],[1585,21,1585,65,0,0,4,0],[1585,21,1585,65,0,0,4,1],[1587,21,1587,48,0,0,4,0],[1587,21,1587,48,0,0,4,1],[1590,13,1590,33,0,0,4,0],[1590,13,1590,33,0,0,4,1],[1591,21,1591,48,0,0,4,0],[1597,13,1597,20,0,0,4,0],[1597,13,1597,20,0,0,4,1],[1602,14,1602,34,0,0,4,0],[1603,9,1603,31,0,0,4,0],[1603,9,1603,31,0,0,4,1],[1605,9,1605,25,0,0,4,0],[1605,9,1605,25,0,0,4,1],[1607,13,1607,57,0,0,4,0],[1607,13,1607,57,0,0,4,1],[1610,21,1610,46,0,0,4,0],[1610,21,1610,46,0,0,4,1],[1613,21,1613,46,0,0,4,0],[1613,21,1613,46,0,0,4,1],[1618,13,1618,58,0,0,4,0],[1618,13,1618,58,0,0,4,1],[1620,13,1620,58,0,0,4,0],[1620,13,1620,58,0,0,4,1],[1622,21,1622,46,0,0,4,0],[1622,21,1622,46,0,0,4,1]],\"TIFFWriteDirectoryTagShort\":[[1456,9,1456,20,0,0,4,0],[1456,9,1456,20,0,0,4,1]],\"JPEGFixupTagsSubsamplingSkip\":[[1071,9,1071,54,0,0,4,0],[1071,9,1071,54,0,0,4,1],[1080,13,1080,37,0,0,4,0],[1080,13,1080,37,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSbyte\":[[3791,9,3791,18,0,0,4,0],[3791,9,3791,18,0,0,4,1]],\"OJPEGWriteStreamDcTable\":[[2502,9,2502,38,0,0,4,0],[2502,9,2502,38,0,0,4,1]],\"TIFFVGetFieldDefaulted\":[[218,9,218,36,0,0,4,0],[218,9,218,36,0,0,4,1],[220,13,220,16,0,0,4,1],[222,9,222,33,0,0,4,1],[225,9,225,35,0,0,4,1],[228,9,228,35,0,0,4,1],[231,9,231,31,0,0,4,1],[234,9,234,33,0,0,4,1],[237,9,237,37,0,0,4,1],[240,9,240,34,0,0,4,1],[243,9,243,36,0,0,4,1],[246,9,246,36,0,0,4,1],[273,9,273,34,0,0,4,1],[276,9,276,36,0,0,4,1],[279,9,279,31,0,0,4,1],[293,9,293,30,0,0,4,1],[297,9,297,28,0,0,4,1],[300,9,300,34,0,0,4,1],[303,9,303,34,0,0,4,1],[307,9,307,30,0,0,4,1],[312,9,312,31,0,0,4,1],[315,9,315,30,0,0,4,1],[318,9,318,34,0,0,4,1],[321,9,321,32,0,0,4,1],[324,9,324,39,0,0,4,1],[331,9,331,38,0,0,4,0],[335,9,335,38,0,0,4,1],[338,9,338,32,0,0,4,1],[349,9,349,38,0,0,4,1],[364,9,364,41,0,0,4,1]],\"_TIFFMultiply64\":[[50,9,50,15,0,0,4,0],[50,9,50,15,0,0,4,1],[50,19,50,46,0,0,4,0],[50,19,50,46,0,0,4,1]],\"TIFFWarningExtR\":[[83,9,83,12,0,0,4,0],[83,16,83,36,0,0,4,1],[92,9,92,28,0,0,4,0],[98,9,98,31,0,0,4,1]],\"tagCompare\":[[551,9,551,39,0,0,4,0],[551,9,551,39,0,0,4,1],[554,16,554,44,0,0,4,0]],\"Fax3Unexpected\":[[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFReadDirEntryCheckRangeShortSbyte\":[[3692,9,3692,18,0,0,4,0],[3692,9,3692,18,0,0,4,1]],\"TIFFOpenExt\":[[232,9,232,16,0,0,4,1],[241,9,241,15,0,0,4,1],[256,9,256,13,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortSshort\":[[3701,9,3701,18,0,0,4,0],[3701,9,3701,18,0,0,4,1]],\"TIFFDataWidth\":[[641,9,641,15,0,0,4,0],[641,9,641,15,0,0,4,1],[642,9,642,23,0,0,4,0],[642,9,642,23,0,0,4,1],[643,9,643,24,0,0,4,0],[643,9,643,24,0,0,4,1],[644,9,644,24,0,0,4,0],[644,9,644,24,0,0,4,1],[645,9,645,28,0,0,4,0],[645,9,645,28,0,0,4,1],[647,9,647,24,0,0,4,0],[647,9,647,24,0,0,4,1],[648,9,648,25,0,0,4,0],[648,9,648,25,0,0,4,1],[650,9,650,23,0,0,4,0],[650,9,650,23,0,0,4,1],[651,9,651,24,0,0,4,0],[651,9,651,24,0,0,4,1],[652,9,652,24,0,0,4,0],[652,9,652,24,0,0,4,1],[653,9,653,22,0,0,4,0],[653,9,653,22,0,0,4,1],[655,9,655,27,0,0,4,0],[655,9,655,27,0,0,4,1],[656,9,656,28,0,0,4,0],[656,9,656,28,0,0,4,1],[657,9,657,25,0,0,4,0],[657,9,657,25,0,0,4,1],[658,9,658,24,0,0,4,0],[658,9,658,24,0,0,4,1],[659,9,659,25,0,0,4,0],[659,9,659,25,0,0,4,1],[660,9,660,23,0,0,4,0],[660,9,660,23,0,0,4,1],[662,9,662,16,0,0,4,0],[662,9,662,16,0,0,4,1]],\"Fax3Decode1D\":[[250,9,250,29,0,0,4,0],[250,9,250,29,0,0,4,1],[257,12,257,19,0,0,4,0],[257,12,257,19,0,0,4,1],[295,13,295,24,3,0,4,0],[295,13,295,24,3,0,4,1],[300,21,300,37,3,0,4,0],[300,21,300,37,3,0,4,1],[312,16,312,31,3,0,4,0],[312,16,312,31,3,0,4,1],[371,21,371,31,4,0,4,0],[371,21,371,31,4,0,4,1],[374,21,374,33,4,0,4,0],[374,21,374,33,4,0,4,1],[377,21,377,35,4,0,4,0],[377,21,377,35,4,0,4,1],[378,21,378,34,4,0,4,0],[378,21,378,34,4,0,4,1],[382,21,382,28,4,0,4,0],[382,21,382,28,4,0,4,1],[388,17,388,28,4,0,4,0],[388,17,388,28,4,0,4,1],[395,21,395,31,4,0,4,1],[398,21,398,33,4,0,4,0],[398,21,398,33,4,0,4,1],[401,21,401,35,4,0,4,1],[402,21,402,34,4,0,4,1],[406,21,406,28,4,0,4,0],[406,21,406,28,4,0,4,1],[412,17,412,28,4,0,4,1],[414,17,414,31,4,0,4,1],[326,13,326,22,5,0,4,1],[328,13,328,24,5,0,4,0],[331,20,331,30,5,0,4,1],[333,17,333,27,5,0,4,0],[335,21,335,27,5,0,4,1],[337,21,337,39,5,0,4,1],[166,13,166,28,9,0,4,0],[166,13,166,28,9,0,4,1],[170,21,170,35,9,0,4,1],[177,21,177,43,9,0,4,0],[177,21,177,43,9,0,4,1],[146,13,146,28,12,0,4,0],[146,13,146,28,12,0,4,1],[150,21,150,35,12,0,4,0],[150,21,150,35,12,0,4,1],[194,20,194,47,13,0,4,0],[194,20,194,47,13,0,4,1],[268,13,268,38,21,0,4,1],[268,13,268,38,28,0,4,1],[326,13,326,22,34,0,4,1],[328,13,328,24,34,0,4,0],[328,13,328,24,34,0,4,1],[331,20,331,30,34,0,4,0],[331,20,331,30,34,0,4,1],[331,34,331,46,34,0,4,0],[333,17,333,27,34,0,4,0],[335,21,335,27,34,0,4,1],[337,21,337,39,34,0,4,0],[337,21,337,39,34,0,4,1],[268,13,268,38,38,0,4,1],[117,21,117,31,42,0,4,0],[117,21,117,31,42,0,4,1],[117,21,117,31,43,0,4,1],[117,21,117,31,44,0,4,0],[117,21,117,31,44,0,4,1],[166,13,166,28,45,0,4,0],[166,13,166,28,45,0,4,1],[170,21,170,35,45,0,4,1],[177,21,177,43,45,0,4,0],[177,21,177,43,45,0,4,1],[166,13,166,28,50,0,4,0],[166,13,166,28,50,0,4,1],[177,21,177,43,50,0,4,1],[268,13,268,38,63,0,4,1],[268,13,268,38,64,0,4,1],[117,21,117,31,77,0,4,0],[117,21,117,31,77,0,4,1],[117,21,117,31,78,0,4,1],[117,21,117,31,81,0,4,1]],\"TIFFReadDirEntryPersampleShort\":[[3301,9,3301,73,0,0,4,0],[3301,9,3301,73,0,0,4,1],[3304,9,3304,37,0,0,4,0],[3304,9,3304,37,0,0,4,1],[3304,41,3304,50,0,0,4,1],[3310,12,3310,18,0,0,4,0],[3310,12,3310,18,0,0,4,1],[3312,13,3312,28,0,0,4,0],[3312,13,3312,28,0,0,4,1]],\"TIFFWriteBufferSetup\":[[676,9,676,25,0,0,4,1],[685,9,685,31,0,0,4,0],[690,13,690,49,0,0,4,0],[695,13,695,28,0,0,4,1],[699,9,699,19,0,0,4,0],[702,13,702,23,0,0,4,1],[250,22,250,62,3,0,4,0]],\"_TIFFVGetField\":[[1218,9,1218,20,0,0,4,1],[1227,9,1227,39,0,0,4,1],[1234,9,1234,33,0,0,4,1],[1237,9,1237,32,0,0,4,0],[1237,9,1237,32,0,0,4,1],[1240,9,1240,33,0,0,4,0],[1240,9,1240,33,0,0,4,1],[1243,9,1243,35,0,0,4,1],[1246,9,1246,33,0,0,4,1],[1249,9,1249,33,0,0,4,1],[1252,9,1252,35,0,0,4,1],[1255,9,1255,31,0,0,4,1],[1258,9,1258,33,0,0,4,1],[1261,9,1261,37,0,0,4,1],[1264,9,1264,34,0,0,4,1],[1267,9,1267,36,0,0,4,1],[1270,9,1270,36,0,0,4,1],[1273,9,1273,37,0,0,4,1],[1287,9,1287,37,0,0,4,1],[1301,9,1301,33,0,0,4,1],[1304,9,1304,33,0,0,4,1],[1307,9,1307,34,0,0,4,1],[1310,9,1310,31,0,0,4,1],[1313,9,1313,31,0,0,4,1],[1316,9,1316,36,0,0,4,1],[1319,9,1319,32,0,0,4,1],[1323,9,1323,35,0,0,4,1],[1327,9,1327,30,0,0,4,1],[1332,9,1332,34,0,0,4,1],[1333,9,1333,33,0,0,4,1],[1339,9,1339,37,0,0,4,1],[1340,9,1340,36,0,0,4,1],[1346,9,1346,30,0,0,4,1],[1351,9,1351,34,0,0,4,1],[1355,9,1355,31,0,0,4,1],[1358,9,1358,32,0,0,4,1],[1361,9,1361,31,0,0,4,1],[1364,9,1364,30,0,0,4,1],[1381,9,1381,34,0,0,4,1],[1384,9,1384,32,0,0,4,1],[1387,9,1387,28,0,0,4,1],[1391,9,1391,38,0,0,4,1],[1394,9,1394,38,0,0,4,0],[1394,9,1394,38,0,0,4,1],[1398,9,1398,38,0,0,4,1],[1411,9,1411,41,0,0,4,1],[1414,9,1414,30,0,0,4,1],[1417,9,1417,34,0,0,4,1],[1420,9,1420,16,0,0,4,1]],\"TIFFReadDirEntryLong\":[[656,9,656,34,0,0,4,0],[656,9,656,34,0,0,4,1],[660,9,660,23,0,0,4,0],[660,9,660,23,0,0,4,1],[667,9,667,24,0,0,4,0],[667,9,667,24,0,0,4,1],[672,17,672,45,0,0,4,0],[672,17,672,45,0,0,4,1],[677,9,677,24,0,0,4,0],[677,9,677,24,0,0,4,1],[684,9,684,25,0,0,4,0],[684,9,684,25,0,0,4,1],[689,17,689,45,0,0,4,0],[689,17,689,45,0,0,4,1],[694,9,694,23,0,0,4,0],[694,9,694,23,0,0,4,1],[697,9,697,24,0,0,4,0],[697,9,697,24,0,0,4,1],[702,17,702,45,0,0,4,0],[702,17,702,45,0,0,4,1],[707,9,707,24,0,0,4,0],[707,9,707,24,0,0,4,1],[711,17,711,45,0,0,4,0],[711,17,711,45,0,0,4,1],[714,17,714,45,0,0,4,0],[714,17,714,45,0,0,4,1],[719,9,719,25,0,0,4,0],[719,9,719,25,0,0,4,1],[723,17,723,45,0,0,4,0],[723,17,723,45,0,0,4,1],[726,17,726,45,0,0,4,0],[726,17,726,45,0,0,4,1],[731,9,731,16,0,0,4,0],[731,9,731,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortSlong8\":[[3737,9,3737,20,0,0,4,0],[3737,9,3737,20,0,0,4,1],[3737,24,3737,40,0,0,4,0],[3737,24,3737,40,0,0,4,1]],\"OJPEGCleanup\":[[1047,9,1047,16,0,0,4,0],[1052,13,1052,31,0,0,4,0],[1052,13,1052,31,0,0,4,1],[1054,13,1054,31,0,0,4,1],[1056,13,1056,31,0,0,4,0],[1056,13,1056,31,0,0,4,1],[1058,13,1058,31,0,0,4,1],[1060,13,1060,32,0,0,4,0],[1060,13,1060,32,0,0,4,1],[1062,13,1062,32,0,0,4,1],[1064,13,1064,32,0,0,4,0],[1064,13,1064,32,0,0,4,1],[1066,13,1066,32,0,0,4,1],[1068,13,1068,32,0,0,4,0],[1068,13,1068,32,0,0,4,1],[1070,13,1070,32,0,0,4,1],[1072,13,1072,32,0,0,4,0],[1072,13,1072,32,0,0,4,1],[1074,13,1074,32,0,0,4,1],[1076,13,1076,44,0,0,4,0],[1076,13,1076,44,0,0,4,1],[1078,13,1078,50,0,0,4,0],[1078,13,1078,50,0,0,4,1],[1080,13,1080,52,0,0,4,0],[1080,13,1080,52,0,0,4,1],[1082,13,1082,33,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortSlong\":[[3719,9,3719,20,0,0,4,0],[3719,9,3719,20,0,0,4,1],[3719,24,3719,40,0,0,4,0],[3719,24,3719,40,0,0,4,1]],\"TIFFReadDirEntryByte\":[[299,9,299,34,0,0,4,0],[299,9,299,34,0,0,4,1],[303,9,303,23,0,0,4,0],[303,9,303,23,0,0,4,1],[304,9,304,28,0,0,4,0],[304,9,304,28,0,0,4,1],[308,9,308,24,0,0,4,0],[308,9,308,24,0,0,4,1],[313,17,313,45,0,0,4,0],[313,17,313,45,0,0,4,1],[318,9,318,24,0,0,4,0],[318,9,318,24,0,0,4,1],[323,17,323,45,0,0,4,0],[323,17,323,45,0,0,4,1],[328,9,328,25,0,0,4,0],[328,9,328,25,0,0,4,1],[333,17,333,45,0,0,4,0],[333,17,333,45,0,0,4,1],[338,9,338,23,0,0,4,0],[338,9,338,23,0,0,4,1],[343,17,343,45,0,0,4,0],[343,17,343,45,0,0,4,1],[348,9,348,24,0,0,4,0],[348,9,348,24,0,0,4,1],[353,17,353,45,0,0,4,0],[353,17,353,45,0,0,4,1],[358,9,358,24,0,0,4,0],[358,9,358,24,0,0,4,1],[362,17,362,45,0,0,4,0],[362,17,362,45,0,0,4,1],[365,17,365,45,0,0,4,0],[365,17,365,45,0,0,4,1],[370,9,370,25,0,0,4,0],[370,9,370,25,0,0,4,1],[374,17,374,45,0,0,4,0],[374,17,374,45,0,0,4,1],[377,17,377,45,0,0,4,0],[377,17,377,45,0,0,4,1],[382,9,382,16,0,0,4,0],[382,9,382,16,0,0,4,1]],\"TIFFSwabArrayOfLong\":[[123,12,123,19,0,0,4,0],[123,12,123,19,0,0,4,1]],\"OJPEGWriteStream\":[[2410,17,2410,30,0,0,4,1],[2412,13,2412,25,0,0,4,0],[2412,13,2412,25,0,0,4,1],[2415,13,2415,29,0,0,4,0],[2415,13,2415,29,0,0,4,1],[2418,13,2418,29,0,0,4,0],[2418,13,2418,29,0,0,4,1],[2421,13,2421,29,0,0,4,0],[2421,13,2421,29,0,0,4,1],[2424,13,2424,29,0,0,4,0],[2424,13,2424,29,0,0,4,1],[2427,13,2427,30,0,0,4,0],[2427,13,2427,30,0,0,4,1],[2430,13,2430,30,0,0,4,0],[2430,13,2430,30,0,0,4,1],[2433,13,2433,30,0,0,4,0],[2433,13,2433,30,0,0,4,1],[2436,13,2436,30,0,0,4,0],[2436,13,2436,30,0,0,4,1],[2439,13,2439,30,0,0,4,0],[2439,13,2439,30,0,0,4,1],[2442,13,2442,30,0,0,4,0],[2442,13,2442,30,0,0,4,1],[2445,13,2445,30,0,0,4,0],[2445,13,2445,30,0,0,4,1],[2448,13,2448,30,0,0,4,0],[2448,13,2448,30,0,0,4,1],[2451,13,2451,25,0,0,4,0],[2451,13,2451,25,0,0,4,1],[2454,13,2454,25,0,0,4,0],[2454,13,2454,25,0,0,4,1],[2457,13,2457,25,0,0,4,0],[2457,13,2457,25,0,0,4,1],[2460,13,2460,32,0,0,4,0],[2460,13,2460,32,0,0,4,1],[2461,21,2461,67,0,0,4,0],[2461,21,2461,67,0,0,4,1],[2464,13,2464,25,0,0,4,0],[2464,13,2464,25,0,0,4,1],[2467,13,2467,25,0,0,4,1],[2471,14,2471,23,0,0,4,0],[2471,14,2471,23,0,0,4,1]],\"TIFFGetBitRevTable\":[[307,13,307,21,0,0,4,0],[307,13,307,21,0,0,4,1]],\"_TIFFCheckFieldIsValidForCodec\":[[1240,9,1240,31,0,0,4,0],[1240,9,1240,31,0,0,4,1],[1242,9,1242,32,0,0,4,0],[1242,9,1242,32,0,0,4,1],[1244,9,1244,34,0,0,4,0],[1244,9,1244,34,0,0,4,1],[1245,9,1245,37,0,0,4,0],[1245,9,1245,37,0,0,4,1],[1246,9,1246,33,0,0,4,0],[1246,9,1246,33,0,0,4,1],[1247,9,1247,34,0,0,4,0],[1247,9,1247,34,0,0,4,1],[1248,9,1248,34,0,0,4,0],[1248,9,1248,34,0,0,4,1],[1249,9,1249,30,0,0,4,0],[1249,9,1249,30,0,0,4,1],[1250,9,1250,41,0,0,4,0],[1250,9,1250,41,0,0,4,1],[1252,9,1252,33,0,0,4,0],[1252,9,1252,33,0,0,4,1],[1253,9,1253,34,0,0,4,0],[1253,9,1253,34,0,0,4,1],[1254,9,1254,44,0,0,4,0],[1254,9,1254,44,0,0,4,1],[1255,9,1255,35,0,0,4,0],[1255,9,1255,35,0,0,4,1],[1256,9,1256,35,0,0,4,0],[1256,9,1256,35,0,0,4,1],[1258,9,1258,37,0,0,4,0],[1258,9,1258,37,0,0,4,1],[1260,9,1260,16,0,0,4,0],[1260,9,1260,16,0,0,4,1],[1263,9,1263,60,0,0,4,0],[1263,9,1263,60,0,0,4,1],[1269,13,1269,40,0,0,4,0],[1269,13,1269,40,0,0,4,1],[1271,9,1271,29,0,0,4,0],[1271,9,1271,29,0,0,4,1],[1272,17,1272,41,0,0,4,0],[1272,17,1272,41,0,0,4,1],[1275,9,1275,34,0,0,4,0],[1275,9,1275,34,0,0,4,1],[1278,9,1278,37,0,0,4,1],[1281,9,1281,30,0,0,4,0],[1281,9,1281,30,0,0,4,1],[1284,9,1284,30,0,0,4,0],[1284,9,1284,30,0,0,4,1],[1285,17,1285,42,0,0,4,0],[1285,17,1285,42,0,0,4,1],[1288,9,1288,31,0,0,4,0],[1288,9,1288,31,0,0,4,1],[1289,21,1289,24,0,0,4,0],[1289,21,1289,24,0,0,4,1],[1291,17,1291,42,0,0,4,0],[1291,17,1291,42,0,0,4,1],[1292,17,1292,45,0,0,4,0],[1292,17,1292,45,0,0,4,1],[1293,17,1293,41,0,0,4,0],[1293,17,1293,41,0,0,4,1],[1294,17,1294,42,0,0,4,0],[1294,17,1294,42,0,0,4,1],[1295,17,1295,42,0,0,4,0],[1295,17,1295,42,0,0,4,1],[1296,17,1296,38,0,0,4,0],[1296,17,1296,38,0,0,4,1],[1297,17,1297,49,0,0,4,0],[1297,17,1297,49,0,0,4,1],[1301,9,1301,34,0,0,4,0],[1301,9,1301,34,0,0,4,1],[1302,9,1302,35,0,0,4,0],[1302,9,1302,35,0,0,4,1],[1303,9,1303,35,0,0,4,0],[1303,9,1303,35,0,0,4,1],[1304,9,1304,35,0,0,4,0],[1304,9,1304,35,0,0,4,1],[1305,21,1305,24,0,0,4,0],[1305,21,1305,24,0,0,4,1],[1307,17,1307,41,0,0,4,0],[1307,17,1307,41,0,0,4,1],[1308,17,1308,42,0,0,4,0],[1308,17,1308,42,0,0,4,1],[1309,17,1309,52,0,0,4,0],[1309,17,1309,52,0,0,4,1],[1311,17,1311,43,0,0,4,0],[1311,17,1311,43,0,0,4,1],[1312,25,1312,77,0,0,4,0],[1312,25,1312,77,0,0,4,1],[1315,17,1315,43,0,0,4,0],[1315,17,1315,43,0,0,4,1],[1316,25,1316,77,0,0,4,0],[1316,25,1316,77,0,0,4,1],[1321,9,1321,30,0,0,4,1],[1324,9,1324,33,0,0,4,0],[1324,9,1324,33,0,0,4,1],[1325,9,1325,39,0,0,4,0],[1325,9,1325,39,0,0,4,1],[1326,17,1326,41,0,0,4,0],[1326,17,1326,41,0,0,4,1],[1329,9,1329,34,0,0,4,0],[1329,9,1329,34,0,0,4,1],[1330,17,1330,41,0,0,4,0],[1330,17,1330,41,0,0,4,1],[1333,9,1333,32,0,0,4,0],[1333,9,1333,32,0,0,4,1],[1334,9,1334,34,0,0,4,1],[1337,9,1337,30,0,0,4,0],[1337,9,1337,30,0,0,4,1],[1338,17,1338,41,0,0,4,1],[1341,9,1341,30,0,0,4,1],[1345,9,1345,30,0,0,4,1]],\"JPEGPreDecode\":[[1199,9,1199,44,0,0,4,1],[1209,9,1209,28,0,0,4,1],[1215,9,1215,57,0,0,4,0]],\"PixarLogMakeTables\":[[587,9,587,24,0,0,4,1],[587,28,587,42,0,0,4,1],[587,46,587,59,0,0,4,1],[588,9,588,26,0,0,4,1],[588,30,588,48,0,0,4,1],[588,52,588,69,0,0,4,1],[613,17,613,25,0,0,4,0],[613,17,613,25,0,0,4,1],[619,20,619,29,0,0,4,0],[619,20,619,29,0,0,4,1],[624,17,624,28,0,0,4,0],[624,17,624,28,0,0,4,1],[627,25,627,38,0,0,4,0],[627,25,627,38,0,0,4,1],[629,24,629,35,0,0,4,0],[629,24,629,35,0,0,4,1],[633,17,633,28,0,0,4,0],[633,17,633,28,0,0,4,1],[635,13,635,76,0,0,4,0],[635,13,635,76,0,0,4,1],[646,17,646,26,0,0,4,0],[646,17,646,26,0,0,4,1],[648,16,648,77,0,0,4,0],[648,16,648,77,0,0,4,1],[654,17,654,24,0,0,4,0],[654,17,654,24,0,0,4,1],[656,16,656,73,0,0,4,0],[656,16,656,73,0,0,4,1]],\"TIFFWriteDirectoryTagCheckedShortArray\":[[2260,9,2260,35,0,0,4,1]],\"TIFFPredictorInit\":[[1002,9,1002,77,0,0,4,1]],\"LZMAVGetField\":[[421,9,421,32,0,0,4,1],[424,9,424,16,0,0,4,0]],\"_TIFFMergeFields\":[[582,9,582,24,0,0,4,0],[582,9,582,24,0,0,4,1],[582,28,582,48,0,0,4,0],[593,9,593,25,0,0,4,1],[600,17,600,22,0,0,4,0],[600,17,600,22,0,0,4,1],[605,13,605,17,0,0,4,0]],\"TIFFReadRawStripOrTile2\":[[664,9,664,16,0,0,4,0],[664,9,664,16,0,0,4,1],[666,13,666,21,0,0,4,1],[682,9,682,75,0,0,4,0],[682,9,682,75,0,0,4,1]],\"OJPEGPreDecode\":[[731,9,731,41,0,0,4,0],[731,9,731,41,0,0,4,1],[733,9,733,33,0,0,4,0],[733,9,733,33,0,0,4,1],[735,13,735,42,0,0,4,0],[735,13,735,42,0,0,4,1],[738,9,738,32,0,0,4,1],[747,9,747,36,0,0,4,0],[747,9,747,36,0,0,4,1],[748,10,748,36,0,0,4,1],[748,40,748,65,0,0,4,1],[754,9,754,34,0,0,4,0],[754,9,754,34,0,0,4,1],[759,13,759,46,0,0,4,0],[759,13,759,46,0,0,4,1],[760,13,761,48,0,0,4,1],[771,13,771,43,0,0,4,0],[771,13,771,43,0,0,4,1],[774,12,774,35,0,0,4,0],[774,12,774,35,0,0,4,1],[776,13,776,46,0,0,4,0],[778,17,778,48,0,0,4,0],[778,17,778,48,0,0,4,1],[250,22,250,62,1,0,4,0]],\"JPEGCleanup\":[[2527,9,2527,30,0,0,4,0],[2527,9,2527,30,0,0,4,1],[2529,9,2529,37,0,0,4,0],[2529,9,2529,37,0,0,4,1]],\"TIFFTileRowSize64\":[[147,9,147,31,0,0,4,1],[152,9,152,30,0,0,4,1],[159,9,159,51,0,0,4,0],[159,9,159,51,0,0,4,1],[161,13,161,40,0,0,4,1],[170,9,170,25,0,0,4,0],[170,9,170,25,0,0,4,1],[296,6,296,16,2,0,4,0],[296,6,296,16,2,0,4,1]],\"_TIFFgetMode\":[[56,9,56,17,0,0,4,0],[56,9,56,17,0,0,4,1],[58,17,58,31,0,0,4,1],[61,9,61,17,0,0,4,0],[61,9,61,17,0,0,4,1],[62,9,62,17,0,0,4,1],[64,17,64,31,0,0,4,0],[67,9,67,16,0,0,4,1]],\"OJPEGWriteStreamSos\":[[2590,17,2590,52,0,0,4,0],[2590,17,2590,52,0,0,4,1]],\"_TIFFSetupFields\":[[515,9,515,24,0,0,4,0],[515,9,515,24,0,0,4,1],[515,28,515,48,0,0,4,0],[519,21,519,41,0,0,4,0],[519,21,519,41,0,0,4,1],[522,17,522,40,0,0,4,0],[524,21,524,51,0,0,4,0],[524,21,524,51,0,0,4,1],[524,55,524,80,0,0,4,1],[540,9,540,70,0,0,4,1]],\"JPEGFixupTagsSubsamplingSec\":[[892,17,892,60,0,0,4,0],[892,17,892,60,0,0,4,1],[894,17,894,25,0,0,4,0],[894,17,894,25,0,0,4,1],[899,17,899,60,0,0,4,0],[899,17,899,60,0,0,4,1],[901,17,901,25,0,0,4,0],[901,17,901,25,0,0,4,1],[906,13,906,33,0,0,4,0],[906,13,906,33,0,0,4,1],[909,13,909,33,0,0,4,0],[909,13,909,33,0,0,4,1],[910,13,910,34,0,0,4,0],[910,13,910,34,0,0,4,1],[911,13,911,38,0,0,4,0],[911,13,911,38,0,0,4,1],[912,13,912,38,0,0,4,0],[912,13,912,38,0,0,4,1],[913,13,913,38,0,0,4,0],[913,13,913,38,0,0,4,1],[914,13,914,38,0,0,4,0],[914,13,914,38,0,0,4,1],[915,13,915,38,0,0,4,0],[915,13,915,38,0,0,4,1],[916,13,916,38,0,0,4,0],[916,13,916,38,0,0,4,1],[917,13,917,38,0,0,4,0],[917,13,917,38,0,0,4,1],[918,13,918,38,0,0,4,0],[918,13,918,38,0,0,4,1],[919,13,919,38,0,0,4,0],[919,13,919,38,0,0,4,1],[920,13,920,39,0,0,4,0],[920,13,920,39,0,0,4,1],[921,13,921,39,0,0,4,0],[921,13,921,39,0,0,4,1],[922,13,922,39,0,0,4,0],[922,13,922,39,0,0,4,1],[923,13,923,39,0,0,4,0],[923,13,923,39,0,0,4,1],[924,13,924,39,0,0,4,0],[924,13,924,39,0,0,4,1],[925,13,925,39,0,0,4,0],[925,13,925,39,0,0,4,1],[926,13,926,33,0,0,4,0],[926,13,926,33,0,0,4,1],[927,13,927,33,0,0,4,0],[927,13,927,33,0,0,4,1],[928,13,928,33,0,0,4,0],[928,13,928,33,0,0,4,1],[929,13,929,33,0,0,4,0],[929,13,929,33,0,0,4,1],[934,25,934,68,0,0,4,0],[934,25,934,68,0,0,4,1],[936,25,936,30,0,0,4,0],[936,25,936,30,0,0,4,1],[939,25,939,30,0,0,4,0],[939,25,939,30,0,0,4,1],[943,13,943,34,0,0,4,0],[943,13,943,34,0,0,4,1],[944,13,944,34,0,0,4,0],[944,13,944,34,0,0,4,1],[945,13,945,34,0,0,4,0],[945,13,945,34,0,0,4,1],[948,13,948,34,0,0,4,0],[948,13,948,34,0,0,4,1],[949,13,949,35,0,0,4,0],[949,13,949,35,0,0,4,1],[959,25,959,68,0,0,4,0],[959,25,959,68,0,0,4,1],[961,25,961,75,0,0,4,0],[961,25,961,75,0,0,4,1],[964,25,964,68,0,0,4,0],[964,25,964,68,0,0,4,1],[969,33,969,74,0,0,4,0],[969,33,969,74,0,0,4,1],[972,29,972,72,0,0,4,0],[972,29,972,72,0,0,4,1],[974,29,974,38,0,0,4,0],[974,29,974,38,0,0,4,1],[986,26,986,35,0,0,4,0],[986,26,986,35,0,0,4,1],[986,39,986,48,0,0,4,0],[986,39,986,48,0,0,4,1],[986,52,986,61,0,0,4,0],[986,52,986,61,0,0,4,1],[987,26,987,35,0,0,4,0],[987,26,987,35,0,0,4,1],[987,39,987,48,0,0,4,0],[987,39,987,48,0,0,4,1],[987,52,987,61,0,0,4,0],[987,52,987,61,0,0,4,1],[996,25,996,74,0,0,4,0],[996,25,996,74,0,0,4,1],[997,25,997,74,0,0,4,0],[997,25,997,74,0,0,4,1],[1012,13,1012,20,0,0,4,0],[1012,13,1012,20,0,0,4,1]],\"ChopUpSingleUncompressedStrip\":[[7335,9,7335,23,0,0,4,0],[7335,9,7335,23,0,0,4,1],[7335,27,7335,52,0,0,4,1],[7339,9,7339,50,0,0,4,0],[7339,9,7339,50,0,0,4,1],[7339,54,7339,73,0,0,4,0],[7348,9,7348,43,0,0,4,0],[7348,9,7348,43,0,0,4,1],[7353,14,7353,31,0,0,4,0],[7353,14,7353,31,0,0,4,1],[7366,9,7366,44,0,0,4,0],[7366,9,7366,44,0,0,4,1],[7369,9,7369,21,0,0,4,0],[7369,9,7369,21,0,0,4,1],[7374,9,7374,34,0,0,4,0],[7374,38,7374,55,0,0,4,0],[7374,38,7374,55,0,0,4,1],[7375,10,7375,35,0,0,4,0],[7375,10,7375,35,0,0,4,1],[7376,10,7376,70,0,0,4,0],[7376,10,7376,70,0,0,4,1],[282,6,282,54,5,0,4,0]],\"TIFFNoDecode\":[[79,9,79,10,0,0,4,0],[79,9,79,10,0,0,4,1]],\"DumpModeDecode\":[[77,9,77,28,0,0,4,0]],\"TIFFCleanup\":[[49,9,49,34,0,0,4,0],[49,9,49,34,0,0,4,1],[59,12,59,31,0,0,4,1],[68,9,68,25,0,0,4,0],[68,9,68,25,0,0,4,1],[68,29,68,61,0,0,4,0],[76,9,76,24,0,0,4,0],[76,9,76,24,0,0,4,1],[76,28,76,48,0,0,4,0],[80,21,80,41,0,0,4,0],[80,21,80,41,0,0,4,1],[83,17,83,40,0,0,4,0],[85,21,85,51,0,0,4,0],[85,21,85,51,0,0,4,1],[90,21,90,46,0,0,4,0],[90,21,90,46,0,0,4,1],[101,9,101,35,0,0,4,1],[251,23,251,62,2,0,4,1]],\"TIFFFieldWithTag\":[[847,9,847,13,0,0,4,1]],\"TIFFSetCompressionScheme\":[[177,13,177,14,0,0,4,0],[177,13,177,14,0,0,4,1]],\"OJPEGSubsamplingCorrect\":[[1098,9,1098,47,0,0,4,0],[1098,9,1098,47,0,0,4,1],[1099,10,1099,60,0,0,4,0],[1099,10,1099,60,0,0,4,1],[1100,10,1100,61,0,0,4,0],[1102,13,1102,37,0,0,4,1],[1117,13,1117,74,0,0,4,0],[1117,13,1117,74,0,0,4,1],[1123,14,1123,41,0,0,4,0],[1123,14,1123,41,0,0,4,1],[1123,45,1123,72,0,0,4,0],[1123,45,1123,72,0,0,4,1],[1124,13,1124,76,0,0,4,0],[1124,13,1124,76,0,0,4,1],[1126,17,1126,41,0,0,4,0],[1126,17,1126,41,0,0,4,1],[1143,13,1143,74,0,0,4,0],[1143,13,1143,74,0,0,4,1],[1145,17,1145,41,0,0,4,0],[1145,17,1145,41,0,0,4,1],[1163,13,1163,74,0,0,4,0],[1163,13,1163,74,0,0,4,1],[1165,17,1165,58,0,0,4,0],[1165,17,1165,58,0,0,4,1]],\"TIFFInitCCITTRLE\":[[1703,9,1703,27,0,0,4,0]],\"LZMACleanup\":[[377,9,377,18,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteSlong8\":[[3620,9,3620,20,0,0,4,0],[3620,9,3620,20,0,0,4,1],[3620,24,3620,38,0,0,4,0],[3620,24,3620,38,0,0,4,1]],\"_TIFFCheckRealloc\":[[105,9,105,19,0,0,4,0],[105,9,105,19,0,0,4,1],[110,9,110,19,0,0,4,0],[110,9,110,19,0,0,4,1]],\"OJPEGDecode\":[[857,9,857,24,0,0,4,1],[863,9,863,40,0,0,4,1],[876,9,876,39,0,0,4,1],[880,9,880,42,0,0,4,0],[882,13,882,46,0,0,4,0],[882,13,882,46,0,0,4,1]],\"JPEGVGetField\":[[2643,9,2643,32,0,0,4,1],[2647,9,2647,33,0,0,4,1],[2650,9,2650,35,0,0,4,1],[2653,9,2653,36,0,0,4,1],[2656,9,2656,16,0,0,4,0]],\"TIFFFreeDirectory\":[[1644,17,1644,44,0,0,4,0],[1644,17,1644,44,0,0,4,1],[1646,13,1646,41,0,0,4,0],[1646,13,1646,41,0,0,4,1],[1609,13,1609,23,1,0,4,0],[1609,13,1609,23,1,0,4,1],[1609,13,1609,23,2,0,4,0],[1609,13,1609,23,2,0,4,1],[1609,13,1609,23,3,0,4,0],[1609,13,1609,23,3,0,4,1],[1609,13,1609,23,4,0,4,0],[1609,13,1609,23,4,0,4,1],[1609,13,1609,23,5,0,4,0],[1609,13,1609,23,5,0,4,1],[1609,13,1609,23,6,0,4,0],[1609,13,1609,23,6,0,4,1],[1609,13,1609,23,7,0,4,0],[1609,13,1609,23,7,0,4,1],[1609,13,1609,23,8,0,4,0],[1609,13,1609,23,8,0,4,1],[1609,13,1609,23,9,0,4,0],[1609,13,1609,23,9,0,4,1],[1609,13,1609,23,10,0,4,0],[1609,13,1609,23,10,0,4,1],[1609,13,1609,23,11,0,4,0],[1609,13,1609,23,11,0,4,1],[1609,13,1609,23,12,0,4,0],[1609,13,1609,23,12,0,4,1],[1609,13,1609,23,13,0,4,0],[1609,13,1609,23,13,0,4,1],[1609,13,1609,23,14,0,4,0],[1609,13,1609,23,14,0,4,1],[1609,13,1609,23,17,0,4,0],[1609,13,1609,23,17,0,4,1]],\"TIFFReadDirectoryCheckOrder\":[[5045,26,5045,38,0,0,4,0],[5045,26,5045,38,0,0,4,1],[5047,13,5047,28,0,0,4,0],[5047,13,5047,28,0,0,4,1]],\"LZWDecodeCompat\":[[820,9,820,24,0,0,4,1],[874,12,874,19,0,0,4,0],[874,12,874,19,0,0,4,1],[877,13,877,29,0,0,4,0],[877,13,877,29,0,0,4,1],[879,13,879,31,0,0,4,0],[879,13,879,31,0,0,4,1],[890,22,890,40,0,0,4,1],[891,17,891,33,0,0,4,1],[893,17,893,34,0,0,4,0],[893,17,893,34,0,0,4,1],[911,13,911,44,0,0,4,0],[911,13,911,44,0,0,4,1],[912,13,912,49,0,0,4,1],[921,13,921,50,0,0,4,1],[922,13,922,55,0,0,4,1],[932,13,932,32,0,0,4,0],[932,13,932,32,0,0,4,1],[933,13,933,35,0,0,4,1],[941,13,941,24,0,0,4,0],[941,13,941,24,0,0,4,1],[947,17,947,35,0,0,4,0],[1010,9,1010,16,0,0,4,0],[1010,9,1010,16,0,0,4,1],[768,13,768,43,5,0,4,0],[768,13,768,43,5,0,4,1],[768,13,768,43,13,0,4,1],[790,13,790,29,33,0,4,0],[790,13,790,29,33,0,4,1],[790,13,790,29,34,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Sbyte\":[[3865,9,3865,18,0,0,4,0],[3865,9,3865,18,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteLong8\":[[3611,9,3611,21,0,0,4,0],[3611,9,3611,21,0,0,4,1]],\"TIFFReadDirEntryByteArray\":[[1395,9,1395,24,0,0,4,0],[1395,9,1395,24,0,0,4,1],[1396,9,1396,28,0,0,4,0],[1396,9,1396,28,0,0,4,1],[1397,9,1397,23,0,0,4,0],[1397,9,1397,23,0,0,4,1],[1398,9,1398,24,0,0,4,0],[1398,9,1398,24,0,0,4,1],[1399,9,1399,24,0,0,4,0],[1399,9,1399,24,0,0,4,1],[1400,9,1400,25,0,0,4,0],[1400,9,1400,25,0,0,4,1],[1401,9,1401,23,0,0,4,0],[1401,9,1401,23,0,0,4,1],[1402,9,1402,24,0,0,4,0],[1402,9,1402,24,0,0,4,1],[1403,9,1403,24,0,0,4,0],[1403,9,1403,24,0,0,4,1],[1404,9,1404,25,0,0,4,0],[1404,9,1404,25,0,0,4,1],[1406,9,1406,16,0,0,4,0],[1406,9,1406,16,0,0,4,1],[1410,9,1410,39,0,0,4,0],[1410,9,1410,39,0,0,4,1],[1410,43,1410,58,0,0,4,0],[1410,43,1410,58,0,0,4,1],[1415,13,1415,32,0,0,4,0],[1415,13,1415,32,0,0,4,1],[1417,9,1417,24,0,0,4,0],[1417,9,1417,24,0,0,4,1],[1418,9,1418,28,0,0,4,0],[1418,9,1418,28,0,0,4,1],[1419,9,1419,23,0,0,4,0],[1419,9,1419,23,0,0,4,1],[1422,9,1422,24,0,0,4,0],[1422,9,1422,24,0,0,4,1],[1427,25,1427,34,0,0,4,0],[1427,25,1427,34,0,0,4,1],[1430,21,1430,49,0,0,4,0],[1430,21,1430,49,0,0,4,1],[1442,9,1442,18,0,0,4,1],[1447,13,1447,32,0,0,4,1],[1449,9,1449,24,0,0,4,0],[1449,9,1449,24,0,0,4,1],[1456,25,1456,34,0,0,4,0],[1456,25,1456,34,0,0,4,1],[1458,21,1458,47,0,0,4,0],[1458,21,1458,47,0,0,4,1],[1461,21,1461,49,0,0,4,0],[1461,21,1461,49,0,0,4,1],[1467,9,1467,25,0,0,4,0],[1467,9,1467,25,0,0,4,1],[1474,25,1474,34,0,0,4,0],[1474,25,1474,34,0,0,4,1],[1476,21,1476,47,0,0,4,0],[1476,21,1476,47,0,0,4,1],[1479,21,1479,49,0,0,4,0],[1479,21,1479,49,0,0,4,1],[1485,9,1485,23,0,0,4,0],[1485,9,1485,23,0,0,4,1],[1492,25,1492,34,0,0,4,0],[1492,25,1492,34,0,0,4,1],[1494,21,1494,47,0,0,4,0],[1494,21,1494,47,0,0,4,1],[1497,21,1497,49,0,0,4,0],[1497,21,1497,49,0,0,4,1],[1503,9,1503,24,0,0,4,0],[1503,9,1503,24,0,0,4,1],[1510,25,1510,34,0,0,4,0],[1510,25,1510,34,0,0,4,1],[1512,21,1512,47,0,0,4,0],[1512,21,1512,47,0,0,4,1],[1515,21,1515,49,0,0,4,0],[1515,21,1515,49,0,0,4,1],[1521,9,1521,24,0,0,4,0],[1521,9,1521,24,0,0,4,1],[1528,25,1528,34,0,0,4,0],[1528,25,1528,34,0,0,4,1],[1530,21,1530,47,0,0,4,0],[1530,21,1530,47,0,0,4,1],[1533,21,1533,49,0,0,4,0],[1533,21,1533,49,0,0,4,1],[1539,9,1539,25,0,0,4,0],[1539,9,1539,25,0,0,4,1],[1546,25,1546,34,0,0,4,0],[1546,25,1546,34,0,0,4,1],[1548,21,1548,47,0,0,4,0],[1548,21,1548,47,0,0,4,1],[1551,21,1551,49,0,0,4,0],[1551,21,1551,49,0,0,4,1],[1559,9,1559,37,0,0,4,0],[1559,9,1559,37,0,0,4,1]],\"TIFFClientOpenExt\":[[220,9,220,16,0,0,4,1],[223,9,223,13,0,0,4,1],[235,9,235,20,0,0,4,1],[255,24,255,31,0,0,4,0],[256,26,256,35,0,0,4,0],[257,9,257,13,0,0,4,1],[266,9,266,18,0,0,4,1],[266,22,266,32,0,0,4,1],[266,36,266,45,0,0,4,1],[266,49,266,59,0,0,4,1],[266,63,266,72,0,0,4,1],[281,9,281,22,0,0,4,0],[281,9,281,22,0,0,4,1],[285,9,285,22,0,0,4,0],[285,9,285,22,0,0,4,1],[285,26,285,37,0,0,4,1],[344,21,344,24,0,0,4,0],[344,21,344,24,0,0,4,1],[345,17,345,20,0,0,4,0],[345,17,345,20,0,0,4,1],[347,13,347,21,0,0,4,1],[353,13,353,21,0,0,4,1],[359,13,359,21,0,0,4,1],[363,13,363,21,0,0,4,1],[367,13,367,21,0,0,4,1],[375,13,375,21,0,0,4,1],[379,13,379,21,0,0,4,0],[379,13,379,21,0,0,4,1],[380,21,380,34,0,0,4,0],[383,13,383,21,0,0,4,1],[387,13,387,21,0,0,4,1],[391,13,391,21,0,0,4,1],[394,13,394,21,0,0,4,1],[398,13,398,21,0,0,4,1],[401,13,401,21,0,0,4,1],[418,9,418,22,0,0,4,0],[418,9,418,22,0,0,4,1],[419,9,419,16,0,0,4,0],[419,9,419,16,0,0,4,1],[421,13,421,38,0,0,4,0],[421,13,421,38,0,0,4,1],[434,13,434,41,0,0,4,1],[436,13,436,45,0,0,4,0],[440,17,440,43,0,0,4,1],[465,13,465,21,0,0,4,1],[473,13,473,64,0,0,4,1],[488,13,488,39,0,0,4,1],[498,9,498,60,0,0,4,0],[498,9,498,60,0,0,4,1],[499,9,499,63,0,0,4,0],[499,9,499,63,0,0,4,1],[505,9,505,62,0,0,4,0],[505,9,505,62,0,0,4,1],[523,9,523,60,0,0,4,0],[523,9,523,60,0,0,4,1],[535,9,535,35,0,0,4,0],[535,9,535,35,0,0,4,1],[537,9,537,70,0,0,4,0],[537,9,537,70,0,0,4,1],[538,9,538,66,0,0,4,0],[538,9,538,66,0,0,4,1],[547,9,547,68,0,0,4,0],[547,9,547,68,0,0,4,1],[549,13,549,39,0,0,4,0],[549,13,549,39,0,0,4,1],[555,13,555,20,0,0,4,0],[555,13,555,20,0,0,4,1],[562,13,562,39,0,0,4,0],[562,13,562,39,0,0,4,1],[567,13,567,53,0,0,4,0],[567,13,567,53,0,0,4,1],[576,13,576,49,0,0,4,0],[576,13,576,49,0,0,4,1],[594,13,594,20,0,0,4,1],[596,9,596,17,0,0,4,0],[597,17,597,49,0,0,4,0],[597,17,597,49,0,0,4,1],[606,17,606,45,0,0,4,1],[623,17,623,49,0,0,4,1],[629,17,629,39,0,0,4,0],[629,17,629,39,0,0,4,1],[634,9,634,17,0,0,4,1]],\"OJPEGReadBufferFill\":[[2217,13,2217,41,0,0,4,0],[2217,13,2217,41,0,0,4,1],[2219,17,2219,48,0,0,4,0],[2225,17,2225,54,0,0,4,0],[2225,17,2225,54,0,0,4,1],[2228,17,2228,23,0,0,4,0],[2228,17,2228,23,0,0,4,1],[2244,13,2244,32,0,0,4,0],[2244,13,2244,32,0,0,4,1],[2245,21,2245,53,0,0,4,0],[2245,21,2245,53,0,0,4,1],[2253,13,2253,44,0,0,4,0],[2253,13,2253,44,0,0,4,1],[2256,13,2256,29,0,0,4,0],[2256,13,2256,29,0,0,4,1],[2257,21,2257,76,0,0,4,0],[2257,21,2257,76,0,0,4,1],[2264,25,2264,28,0,0,4,0],[2264,25,2264,28,0,0,4,1],[2266,25,2266,52,0,0,4,0],[2266,25,2266,52,0,0,4,1],[2270,29,2270,32,0,0,4,0],[2270,29,2270,32,0,0,4,1],[2272,29,2272,68,0,0,4,0],[2272,29,2272,68,0,0,4,1],[2274,34,2274,48,0,0,4,0],[2274,34,2274,48,0,0,4,1],[2280,33,2280,61,0,0,4,1],[2282,38,2283,78,0,0,4,1],[2284,38,2286,55,0,0,4,0],[2284,38,2286,55,0,0,4,1],[2294,13,2294,20,0,0,4,0],[2294,13,2294,20,0,0,4,1]],\"TIFFRewriteDirectory\":[[316,9,316,29,0,0,4,0]],\"TIFFReadDirEntryFloatArray\":[[2757,9,2757,23,0,0,4,0],[2757,9,2757,23,0,0,4,1],[2758,9,2758,24,0,0,4,0],[2758,9,2758,24,0,0,4,1],[2759,9,2759,24,0,0,4,0],[2759,9,2759,24,0,0,4,1],[2760,9,2760,25,0,0,4,0],[2760,9,2760,25,0,0,4,1],[2761,9,2761,23,0,0,4,0],[2761,9,2761,23,0,0,4,1],[2762,9,2762,24,0,0,4,0],[2762,9,2762,24,0,0,4,1],[2763,9,2763,24,0,0,4,0],[2763,9,2763,24,0,0,4,1],[2764,9,2764,25,0,0,4,0],[2764,9,2764,25,0,0,4,1],[2765,9,2765,27,0,0,4,0],[2765,9,2765,27,0,0,4,1],[2766,9,2766,28,0,0,4,0],[2766,9,2766,28,0,0,4,1],[2767,9,2767,24,0,0,4,0],[2767,9,2767,24,0,0,4,1],[2768,9,2768,25,0,0,4,0],[2768,9,2768,25,0,0,4,1],[2770,9,2770,16,0,0,4,0],[2770,9,2770,16,0,0,4,1],[2774,9,2774,39,0,0,4,0],[2774,9,2774,39,0,0,4,1],[2774,43,2774,58,0,0,4,0],[2774,43,2774,58,0,0,4,1],[2779,13,2779,32,0,0,4,0],[2779,13,2779,32,0,0,4,1],[2781,9,2781,24,0,0,4,0],[2781,9,2781,24,0,0,4,1],[2782,17,2782,43,0,0,4,0],[2782,17,2782,43,0,0,4,1],[2789,9,2789,18,0,0,4,1],[2794,13,2794,32,0,0,4,1],[2796,9,2796,23,0,0,4,0],[2796,9,2796,23,0,0,4,1],[2803,25,2803,34,0,0,4,0],[2803,25,2803,34,0,0,4,1],[2807,9,2807,24,0,0,4,0],[2807,9,2807,24,0,0,4,1],[2814,25,2814,34,0,0,4,0],[2814,25,2814,34,0,0,4,1],[2818,9,2818,24,0,0,4,0],[2818,9,2818,24,0,0,4,1],[2825,25,2825,34,0,0,4,0],[2825,25,2825,34,0,0,4,1],[2827,21,2827,47,0,0,4,0],[2827,21,2827,47,0,0,4,1],[2833,9,2833,25,0,0,4,0],[2833,9,2833,25,0,0,4,1],[2840,25,2840,34,0,0,4,0],[2840,25,2840,34,0,0,4,1],[2842,21,2842,47,0,0,4,0],[2842,21,2842,47,0,0,4,1],[2848,9,2848,23,0,0,4,0],[2848,9,2848,23,0,0,4,1],[2855,25,2855,34,0,0,4,0],[2855,25,2855,34,0,0,4,1],[2857,21,2857,47,0,0,4,0],[2857,21,2857,47,0,0,4,1],[2863,9,2863,24,0,0,4,0],[2863,9,2863,24,0,0,4,1],[2870,25,2870,34,0,0,4,0],[2870,25,2870,34,0,0,4,1],[2872,21,2872,47,0,0,4,0],[2872,21,2872,47,0,0,4,1],[2878,9,2878,24,0,0,4,0],[2878,9,2878,24,0,0,4,1],[2885,25,2885,34,0,0,4,0],[2885,25,2885,34,0,0,4,1],[2887,21,2887,47,0,0,4,1],[2902,9,2902,25,0,0,4,0],[2902,9,2902,25,0,0,4,1],[2909,25,2909,34,0,0,4,0],[2909,25,2909,34,0,0,4,1],[2911,21,2911,47,0,0,4,1],[2917,9,2917,27,0,0,4,0],[2917,9,2917,27,0,0,4,1],[2926,25,2926,34,0,0,4,0],[2926,25,2926,34,0,0,4,1],[2928,21,2928,47,0,0,4,0],[2928,21,2928,47,0,0,4,1],[2931,21,2931,47,0,0,4,0],[2931,21,2931,47,0,0,4,1],[2934,21,2934,29,0,0,4,0],[2934,21,2934,29,0,0,4,1],[2941,9,2941,28,0,0,4,0],[2941,9,2941,28,0,0,4,1],[2950,25,2950,34,0,0,4,0],[2950,25,2950,34,0,0,4,1],[2952,21,2952,47,0,0,4,0],[2952,21,2952,47,0,0,4,1],[2956,21,2956,47,0,0,4,0],[2956,21,2956,47,0,0,4,1],[2959,21,2959,29,0,0,4,0],[2959,21,2959,29,0,0,4,1],[2966,9,2966,25,0,0,4,0],[2966,9,2966,25,0,0,4,1],[2971,17,2971,43,0,0,4,1],[2976,25,2976,34,0,0,4,0],[2976,25,2976,34,0,0,4,1],[2979,21,2979,34,0,0,4,0],[2979,21,2979,34,0,0,4,1],[2981,26,2981,40,0,0,4,0],[2981,26,2981,40,0,0,4,1]],\"TIFFVGetField\":[[1602,13,1602,16,0,0,4,0],[248,24,248,36,2,0,4,1],[209,34,209,71,3,0,4,0],[209,34,209,71,3,0,4,1]],\"LZWDecode\":[[424,9,424,23,0,0,4,1],[436,9,436,24,0,0,4,1],[493,9,493,17,0,0,4,1],[503,9,503,27,0,0,4,0],[503,9,503,27,0,0,4,1],[505,9,505,19,0,0,4,0],[505,9,505,19,0,0,4,1],[507,9,507,25,0,0,4,0],[507,9,507,25,0,0,4,1],[513,9,513,26,0,0,4,0],[513,9,513,26,0,0,4,1],[521,9,521,31,0,0,4,1],[539,9,539,17,0,0,4,0],[539,9,539,17,0,0,4,1],[550,9,550,27,0,0,4,0],[550,9,550,27,0,0,4,1],[552,13,552,31,0,0,4,0],[552,13,552,31,0,0,4,1],[566,9,566,31,0,0,4,1],[590,9,590,16,0,0,4,0],[590,9,590,16,0,0,4,1],[592,13,592,21,0,0,4,0],[592,13,592,21,0,0,4,1],[594,17,594,25,0,0,4,0],[594,17,594,25,0,0,4,1],[610,9,610,17,0,0,4,0],[610,9,610,17,0,0,4,1],[612,13,612,21,0,0,4,0],[612,13,612,21,0,0,4,1],[614,17,614,25,0,0,4,0],[614,17,614,25,0,0,4,1],[634,9,634,18,0,0,4,0],[634,9,634,18,0,0,4,1],[639,9,639,24,0,0,4,0],[639,9,639,24,0,0,4,1],[644,13,644,21,0,0,4,1],[660,9,660,16,0,0,4,0],[660,9,660,16,0,0,4,1],[666,18,666,25,0,0,4,0],[666,18,666,25,0,0,4,1],[672,9,672,17,0,0,4,1],[686,14,686,32,0,0,4,1],[687,9,687,25,0,0,4,1],[689,9,689,24,0,0,4,1],[696,9,696,17,0,0,4,0],[696,9,696,17,0,0,4,1],[714,14,714,33,0,0,4,0],[714,14,714,33,0,0,4,1],[722,14,722,19,0,0,4,0],[722,14,722,19,0,0,4,1],[738,9,738,16,0,0,4,0],[738,9,738,16,0,0,4,1],[372,13,372,25,5,0,4,0],[372,13,372,25,5,0,4,1],[374,17,374,52,5,0,4,0],[374,17,374,52,5,0,4,1],[387,21,387,37,5,0,4,0],[387,21,387,37,5,0,4,1],[394,21,394,33,5,0,4,1],[372,13,372,25,19,0,4,0],[372,13,372,25,19,0,4,1],[374,17,374,52,19,0,4,0]],\"TIFFSwabArrayOfLong8\":[[144,12,144,19,0,0,4,0],[144,12,144,19,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongLong8\":[[3818,9,3818,27,0,0,4,0],[3818,9,3818,27,0,0,4,1]],\"JPEGVSetField\":[[2585,9,2585,32,0,0,4,0],[2585,9,2585,32,0,0,4,1],[2587,17,2587,25,0,0,4,0],[2587,17,2587,25,0,0,4,1],[2597,9,2597,33,0,0,4,1],[2600,9,2600,35,0,0,4,1],[2604,9,2604,33,0,0,4,0],[2604,9,2604,33,0,0,4,1],[2610,9,2610,36,0,0,4,1],[2613,9,2613,38,0,0,4,0],[2613,9,2613,38,0,0,4,1],[2618,9,2618,16,0,0,4,0],[2618,9,2618,16,0,0,4,1],[2622,9,2622,51,0,0,4,0]],\"NeXTPreDecode\":[[176,9,176,34,0,0,4,1]],\"ThunderSetupDecode\":[[73,9,73,43,0,0,4,0],[73,9,73,43,0,0,4,1]],\"TIFFAppendToStrip\":[[767,9,767,29,0,0,4,0],[770,9,770,41,0,0,4,0],[774,13,774,48,0,0,4,1],[815,9,815,41,0,0,4,0],[817,9,817,30,0,0,4,1],[817,34,817,52,0,0,4,1],[823,9,823,35,0,0,4,1],[906,9,906,17,0,0,4,1],[915,9,915,66,0,0,4,0]],\"Fax4Decode\":[[1512,9,1512,29,0,0,4,0],[1512,9,1512,29,0,0,4,1],[1518,12,1518,19,0,0,4,0],[1518,12,1518,19,0,0,4,1],[1531,13,1531,19,0,0,4,0],[1531,13,1531,19,0,0,4,1],[1533,13,1533,42,0,0,4,1],[1556,13,1556,42,0,0,4,1],[1566,17,1566,25,0,0,4,0],[1566,17,1566,25,0,0,4,1],[454,16,454,26,3,0,4,0],[454,16,454,26,3,0,4,1],[456,17,456,42,3,0,4,1],[467,17,467,28,3,0,4,0],[467,17,467,28,3,0,4,1],[469,25,469,58,3,0,4,1],[484,17,484,29,3,0,4,0],[484,17,484,29,3,0,4,1],[485,25,485,43,3,0,4,0],[485,25,485,43,3,0,4,1],[492,33,492,45,3,0,4,0],[492,33,492,45,3,0,4,1],[495,33,495,47,3,0,4,1],[496,33,496,46,3,0,4,0],[496,33,496,46,3,0,4,1],[500,33,500,40,3,0,4,0],[500,33,500,40,3,0,4,1],[510,33,510,45,3,0,4,0],[510,33,510,45,3,0,4,1],[513,33,513,47,3,0,4,0],[513,33,513,47,3,0,4,1],[514,33,514,46,3,0,4,1],[518,33,518,40,3,0,4,1],[531,33,531,45,3,0,4,0],[531,33,531,45,3,0,4,1],[534,33,534,47,3,0,4,0],[534,33,534,47,3,0,4,1],[535,33,535,46,3,0,4,0],[535,33,535,46,3,0,4,1],[539,33,539,40,3,0,4,1],[549,33,549,45,3,0,4,0],[549,33,549,45,3,0,4,1],[552,33,552,47,3,0,4,1],[553,33,553,46,3,0,4,1],[557,33,557,40,3,0,4,0],[557,33,557,40,3,0,4,1],[565,17,565,26,3,0,4,0],[565,17,565,26,3,0,4,1],[568,25,568,54,3,0,4,1],[580,17,580,26,3,0,4,0],[580,17,580,26,3,0,4,1],[583,25,583,54,3,0,4,1],[595,17,595,26,3,0,4,0],[595,17,595,26,3,0,4,1],[597,25,597,55,3,0,4,0],[597,25,597,55,3,0,4,1],[605,17,605,27,3,0,4,0],[605,17,605,27,3,0,4,1],[609,17,609,27,3,0,4,0],[609,17,609,27,3,0,4,1],[617,17,617,24,3,0,4,1],[633,13,633,22,3,0,4,0],[633,13,633,22,3,0,4,1],[635,17,635,39,3,0,4,1],[268,13,268,38,4,0,4,1],[166,13,166,28,6,0,4,0],[170,21,170,35,6,0,4,0],[177,21,177,43,6,0,4,0],[177,21,177,43,6,0,4,1],[432,13,432,26,15,0,4,0],[432,13,432,26,15,0,4,1],[433,20,433,28,15,0,4,0],[433,20,433,28,15,0,4,1],[433,32,433,42,15,0,4,0],[435,21,435,54,15,0,4,1],[268,13,268,38,21,0,4,1],[268,13,268,38,26,0,4,1],[268,13,268,38,31,0,4,1],[268,13,268,38,36,0,4,1],[432,13,432,26,39,0,4,0],[433,20,433,28,39,0,4,0],[433,20,433,28,39,0,4,1],[433,32,433,42,39,0,4,0],[433,32,433,42,39,0,4,1],[435,21,435,54,39,0,4,1],[432,13,432,26,41,0,4,0],[432,13,432,26,41,0,4,1],[433,20,433,28,41,0,4,0],[433,20,433,28,41,0,4,1],[433,32,433,42,41,0,4,0],[435,21,435,54,41,0,4,1],[268,13,268,38,42,0,4,1],[432,13,432,26,46,0,4,0],[432,13,432,26,46,0,4,1],[433,20,433,28,46,0,4,0],[433,20,433,28,46,0,4,1],[433,32,433,42,46,0,4,0],[435,21,435,54,46,0,4,1],[268,13,268,38,47,0,4,1],[432,13,432,26,51,0,4,0],[432,13,432,26,51,0,4,1],[433,20,433,28,51,0,4,0],[433,20,433,28,51,0,4,1],[433,32,433,42,51,0,4,0],[435,21,435,54,51,0,4,1],[268,13,268,38,53,0,4,1],[146,13,146,28,57,0,4,0],[146,13,146,28,57,0,4,1],[150,21,150,35,57,0,4,0],[194,20,194,47,58,0,4,0],[194,20,194,47,58,0,4,1],[326,13,326,22,65,0,4,1],[328,13,328,24,65,0,4,0],[331,20,331,30,65,0,4,1],[333,17,333,27,65,0,4,0],[335,21,335,27,65,0,4,1],[337,21,337,39,65,0,4,0],[337,21,337,39,65,0,4,1],[268,13,268,38,69,0,4,1],[326,13,326,22,70,0,4,0],[326,13,326,22,70,0,4,1],[328,13,328,24,70,0,4,0],[328,13,328,24,70,0,4,1],[331,20,331,30,70,0,4,0],[331,20,331,30,70,0,4,1],[331,34,331,46,70,0,4,0],[333,17,333,27,70,0,4,0],[335,21,335,27,70,0,4,1],[337,21,337,39,70,0,4,0],[337,21,337,39,70,0,4,1],[117,21,117,31,73,0,4,0],[117,21,117,31,73,0,4,1],[117,21,117,31,74,0,4,1],[146,13,146,28,78,0,4,0],[146,13,146,28,78,0,4,1],[150,21,150,35,78,0,4,1],[166,13,166,28,85,0,4,0],[177,21,177,43,85,0,4,0],[177,21,177,43,85,0,4,1],[166,13,166,28,90,0,4,0],[166,13,166,28,90,0,4,1],[177,21,177,43,90,0,4,1],[166,13,166,28,95,0,4,0],[170,21,170,35,95,0,4,1],[177,21,177,43,95,0,4,0],[177,21,177,43,95,0,4,1],[166,13,166,28,100,0,4,0],[170,21,170,35,100,0,4,1],[177,21,177,43,100,0,4,1],[117,21,117,31,123,0,4,0],[117,21,117,31,123,0,4,1],[268,13,268,38,126,0,4,1],[268,13,268,38,127,0,4,1],[268,13,268,38,133,0,4,1],[268,13,268,38,135,0,4,1],[268,13,268,38,136,0,4,1],[117,21,117,31,142,0,4,0],[117,21,117,31,142,0,4,1],[117,21,117,31,145,0,4,1],[117,21,117,31,146,0,4,1],[117,21,117,31,149,0,4,1],[117,21,117,31,153,0,4,0],[117,21,117,31,153,0,4,1],[117,21,117,31,154,0,4,1],[117,21,117,31,157,0,4,0],[117,21,117,31,157,0,4,1]],\"OJPEGLibjpegJpegSourceMgrFillInputBuffer\":[[2772,9,2772,47,0,0,4,0],[2772,9,2772,47,0,0,4,1]],\"TIFFReadDirEntryCheckedSlong\":[[3366,9,3366,35,0,0,4,0],[3366,9,3366,35,0,0,4,1]],\"TIFFFlushData\":[[148,9,148,49,0,0,4,0],[148,9,148,49,0,0,4,1],[150,9,150,41,0,0,4,1]],\"_TIFFcallocExt\":[[135,9,135,20,0,0,4,0],[135,24,135,57,0,0,4,1]],\"countInkNamesString\":[[196,9,196,17,0,0,4,0],[196,9,196,17,0,0,4,1],[202,20,202,27,0,0,4,0],[202,31,202,42,0,0,4,0],[202,31,202,42,0,0,4,1],[205,17,205,25,0,0,4,1],[209,18,209,25,0,0,4,0],[209,18,209,25,0,0,4,1]],\"allocChoppedUpStripArrays\":[[7259,9,7259,50,0,0,4,1],[7260,9,7260,46,0,0,4,1],[7271,9,7271,26,0,0,4,1],[7271,30,7271,48,0,0,4,1],[7288,17,7288,28,0,0,4,0],[7288,17,7288,28,0,0,4,1],[7290,13,7290,35,0,0,4,0],[7290,13,7290,35,0,0,4,1],[7293,25,7293,35,0,0,4,0],[7293,25,7293,35,0,0,4,1]],\"OJPEGReadWord\":[[2337,9,2337,35,0,0,4,0],[2337,9,2337,35,0,0,4,1],[2340,9,2340,35,0,0,4,0],[2340,9,2340,35,0,0,4,1]],\"TIFFInitPixarLog\":[[1609,9,1609,79,0,0,4,1],[1620,9,1620,30,0,0,4,1]],\"Fax3BadLength\":[[219,21,219,31,0,0,4,0],[219,21,219,31,0,0,4,1],[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFNumberOfStrips\":[[64,16,64,51,0,0,4,0],[64,16,64,51,0,0,4,1],[67,9,67,53,0,0,4,0],[67,9,67,53,0,0,4,1],[282,6,282,54,1,0,4,0],[282,6,282,54,1,0,4,1]],\"TIFFReadDirEntrySlong8Array\":[[2606,9,2606,23,0,0,4,1],[2607,9,2607,24,0,0,4,1],[2608,9,2608,24,0,0,4,1],[2609,9,2609,25,0,0,4,1],[2610,9,2610,23,0,0,4,1],[2611,9,2611,24,0,0,4,1],[2612,9,2612,24,0,0,4,1],[2613,9,2613,25,0,0,4,0],[2615,9,2615,16,0,0,4,1],[2619,9,2619,39,0,0,4,0],[2619,9,2619,39,0,0,4,1],[2619,43,2619,58,0,0,4,0],[2619,43,2619,58,0,0,4,1],[2624,13,2624,32,0,0,4,1],[2626,9,2626,24,0,0,4,1],[2646,9,2646,25,0,0,4,0],[2648,17,2648,43,0,0,4,0],[2648,17,2648,43,0,0,4,1]],\"_TIFFreallocExt\":[[152,9,152,20,0,0,4,0],[152,24,152,57,0,0,4,1]],\"_TIFFSeekOK\":[[457,12,457,37,0,0,4,0],[457,12,457,37,0,0,4,1],[457,41,457,80,0,0,4,0],[457,41,457,80,0,0,4,1]],\"TIFFInitSGILog\":[[1790,9,1790,75,0,0,4,1],[1800,9,1800,30,0,0,4,1],[1805,23,1805,55,0,0,4,0],[1805,23,1805,55,0,0,4,1]],\"TIFFInitLZMA\":[[448,9,448,71,0,0,4,1],[458,9,458,30,0,0,4,1],[482,26,482,61,0,0,4,0]],\"_TIFFReserveLargeEnoughWriteBuffer\":[[192,9,192,51,0,0,4,1]],\"PixarLogVGetField\":[[1579,9,1579,37,0,0,4,1],[1582,9,1582,37,0,0,4,1],[1585,9,1585,16,0,0,4,0]],\"Fax3SetupState\":[[499,9,499,34,0,0,4,0],[499,9,499,34,0,0,4,1],[518,9,518,57,0,0,4,1],[531,21,531,62,0,0,4,0],[531,21,531,62,0,0,4,1],[532,21,532,64,0,0,4,0],[532,21,532,64,0,0,4,1],[541,9,541,21,0,0,4,0],[541,9,541,21,0,0,4,1],[545,9,545,26,0,0,4,0],[545,9,545,26,0,0,4,1],[545,30,545,78,0,0,4,0],[545,30,545,78,0,0,4,1],[555,9,555,26,0,0,4,1],[560,9,560,21,0,0,4,0],[560,9,560,21,0,0,4,1],[564,9,564,52,0,0,4,0],[564,9,564,52,0,0,4,1],[571,9,571,21,0,0,4,0],[571,9,571,21,0,0,4,1],[582,13,582,33,0,0,4,1],[250,22,250,62,3,0,4,0],[302,27,302,63,7,0,4,0],[302,27,302,63,7,0,4,1],[302,27,302,63,8,0,4,0],[302,27,302,63,8,0,4,1],[302,27,302,63,9,0,4,0],[302,27,302,63,10,0,4,0],[97,26,97,69,12,0,4,0],[97,26,97,69,12,0,4,1],[282,6,282,54,16,0,4,0]],\"LZWCleanup\":[[1384,9,1384,39,0,0,4,0],[1384,9,1384,39,0,0,4,1],[1387,9,1387,39,0,0,4,1]],\"TIFFVTileSize64\":[[192,9,192,31,0,0,4,1],[192,35,192,56,0,0,4,0],[192,35,192,56,0,0,4,1],[193,9,193,30,0,0,4,0],[193,9,193,30,0,0,4,1],[195,9,195,53,0,0,4,0],[195,9,195,53,0,0,4,1],[196,9,196,50,0,0,4,0],[196,9,196,50,0,0,4,1],[197,9,197,38,0,0,4,0],[197,9,197,38,0,0,4,1],[197,42,197,61,0,0,4,0],[215,14,215,38,0,0,4,0],[215,14,215,38,0,0,4,1],[215,42,215,66,0,0,4,0],[215,42,215,66,0,0,4,1],[216,14,216,38,0,0,4,0],[216,14,216,38,0,0,4,1],[217,14,217,38,0,0,4,0],[217,14,217,38,0,0,4,1],[217,42,217,66,0,0,4,0],[217,42,217,66,0,0,4,1],[218,14,218,38,0,0,4,0],[218,14,218,38,0,0,4,1],[282,6,282,54,5,0,4,0],[282,6,282,54,5,0,4,1],[282,6,282,54,6,0,4,0],[282,6,282,54,6,0,4,1],[296,6,296,16,7,0,4,0],[296,6,296,16,7,0,4,1]],\"TIFFInitJBIG\":[[213,9,213,41,0,0,4,1]],\"LZMAVSetField\":[[395,9,395,32,0,0,4,1],[409,9,409,16,0,0,4,0]],\"Fax3VSetField\":[[1267,9,1267,29,0,0,4,0],[1267,9,1267,29,0,0,4,1],[1270,9,1270,33,0,0,4,0],[1270,9,1270,33,0,0,4,1],[1273,9,1273,35,0,0,4,0],[1273,9,1273,35,0,0,4,1],[1275,17,1275,69,0,0,4,0],[1278,9,1278,35,0,0,4,0],[1278,9,1278,35,0,0,4,1],[1280,17,1280,69,0,0,4,0],[1283,9,1283,33,0,0,4,0],[1283,9,1283,33,0,0,4,1],[1286,9,1286,34,0,0,4,0],[1286,9,1286,34,0,0,4,1],[1289,9,1289,44,0,0,4,0],[1289,9,1289,44,0,0,4,1],[1292,9,1292,16,0,0,4,0],[1292,9,1292,16,0,0,4,1],[1296,9,1296,51,0,0,4,0]],\"TIFFReadDirEntryCheckRangeByteLong\":[[3593,9,3593,21,0,0,4,0],[3593,9,3593,21,0,0,4,1]],\"ZIPPreDecode\":[[139,9,139,46,0,0,4,1],[150,27,150,65,0,0,4,0]],\"TIFFReadDirEntryLong8ArrayWithLimit\":[[2431,9,2431,23,0,0,4,0],[2431,9,2431,23,0,0,4,1],[2432,9,2432,24,0,0,4,0],[2432,9,2432,24,0,0,4,1],[2433,9,2433,24,0,0,4,0],[2433,9,2433,24,0,0,4,1],[2434,9,2434,25,0,0,4,0],[2434,9,2434,25,0,0,4,1],[2435,9,2435,23,0,0,4,0],[2435,9,2435,23,0,0,4,1],[2436,9,2436,24,0,0,4,0],[2436,9,2436,24,0,0,4,1],[2437,9,2437,24,0,0,4,0],[2437,9,2437,24,0,0,4,1],[2438,9,2438,25,0,0,4,0],[2438,9,2438,25,0,0,4,1],[2440,9,2440,16,0,0,4,0],[2440,9,2440,16,0,0,4,1],[2445,9,2445,39,0,0,4,0],[2445,9,2445,39,0,0,4,1],[2445,43,2445,58,0,0,4,0],[2445,43,2445,58,0,0,4,1],[2450,13,2450,32,0,0,4,0],[2450,13,2450,32,0,0,4,1],[2452,9,2452,24,0,0,4,0],[2452,9,2452,24,0,0,4,1],[2454,17,2454,43,0,0,4,0],[2454,17,2454,43,0,0,4,1],[2457,9,2457,25,0,0,4,0],[2457,9,2457,25,0,0,4,1],[2462,25,2462,34,0,0,4,0],[2462,25,2462,34,0,0,4,1],[2464,21,2464,47,0,0,4,0],[2464,21,2464,47,0,0,4,1],[2467,21,2467,49,0,0,4,0],[2467,21,2467,49,0,0,4,1],[2479,9,2479,18,0,0,4,1],[2484,13,2484,32,0,0,4,1],[2486,9,2486,23,0,0,4,0],[2486,9,2486,23,0,0,4,1],[2493,25,2493,34,0,0,4,0],[2493,25,2493,34,0,0,4,1],[2497,9,2497,24,0,0,4,0],[2497,9,2497,24,0,0,4,1],[2504,25,2504,34,0,0,4,0],[2504,25,2504,34,0,0,4,1],[2507,21,2507,49,0,0,4,0],[2507,21,2507,49,0,0,4,1],[2513,9,2513,24,0,0,4,0],[2513,9,2513,24,0,0,4,1],[2520,25,2520,34,0,0,4,0],[2520,25,2520,34,0,0,4,1],[2522,21,2522,47,0,0,4,0],[2522,21,2522,47,0,0,4,1],[2528,9,2528,25,0,0,4,0],[2528,9,2528,25,0,0,4,1],[2535,25,2535,34,0,0,4,0],[2535,25,2535,34,0,0,4,1],[2537,21,2537,47,0,0,4,0],[2537,21,2537,47,0,0,4,1],[2540,21,2540,49,0,0,4,0],[2540,21,2540,49,0,0,4,1],[2546,9,2546,23,0,0,4,0],[2546,9,2546,23,0,0,4,1],[2553,25,2553,34,0,0,4,0],[2553,25,2553,34,0,0,4,1],[2555,21,2555,47,0,0,4,0],[2555,21,2555,47,0,0,4,1],[2561,9,2561,24,0,0,4,0],[2561,9,2561,24,0,0,4,1],[2568,25,2568,34,0,0,4,0],[2568,25,2568,34,0,0,4,1],[2570,21,2570,47,0,0,4,0],[2570,21,2570,47,0,0,4,1],[2573,21,2573,49,0,0,4,0],[2573,21,2573,49,0,0,4,1],[2581,9,2581,37,0,0,4,0],[2581,9,2581,37,0,0,4,1]],\"TIFFWriteDirectoryTagCheckedShort\":[[2247,9,2247,35,0,0,4,1]],\"OJPEGPostDecode\":[[996,9,996,66,0,0,4,1]],\"setExtraSamples\":[[146,9,146,46,0,0,4,0],[146,9,146,46,0,0,4,1],[149,9,149,15,0,0,4,0],[149,9,149,15,0,0,4,1],[149,19,149,29,0,0,4,1],[151,17,151,23,0,0,4,0],[151,17,151,23,0,0,4,1],[153,13,153,43,0,0,4,0],[153,13,153,43,0,0,4,1],[161,17,161,54,0,0,4,1],[168,9,168,43,0,0,4,1]],\"OkToChangeTag\":[[1116,9,1116,13,0,0,4,1],[1122,9,1122,35,0,0,4,0],[1122,9,1122,35,0,0,4,1],[1122,39,1122,74,0,0,4,1]],\"TIFFReadDirEntryDoubleArray\":[[3002,9,3002,23,0,0,4,0],[3002,9,3002,23,0,0,4,1],[3003,9,3003,24,0,0,4,0],[3003,9,3003,24,0,0,4,1],[3004,9,3004,24,0,0,4,0],[3004,9,3004,24,0,0,4,1],[3005,9,3005,25,0,0,4,0],[3005,9,3005,25,0,0,4,1],[3006,9,3006,23,0,0,4,0],[3006,9,3006,23,0,0,4,1],[3007,9,3007,24,0,0,4,0],[3007,9,3007,24,0,0,4,1],[3008,9,3008,24,0,0,4,0],[3008,9,3008,24,0,0,4,1],[3009,9,3009,25,0,0,4,0],[3009,9,3009,25,0,0,4,1],[3010,9,3010,27,0,0,4,0],[3010,9,3010,27,0,0,4,1],[3011,9,3011,28,0,0,4,0],[3011,9,3011,28,0,0,4,1],[3012,9,3012,24,0,0,4,0],[3012,9,3012,24,0,0,4,1],[3013,9,3013,25,0,0,4,0],[3013,9,3013,25,0,0,4,1],[3015,9,3015,16,0,0,4,0],[3015,9,3015,16,0,0,4,1],[3019,9,3019,39,0,0,4,0],[3019,9,3019,39,0,0,4,1],[3019,43,3019,58,0,0,4,0],[3019,43,3019,58,0,0,4,1],[3024,13,3024,32,0,0,4,0],[3024,13,3024,32,0,0,4,1],[3026,9,3026,25,0,0,4,0],[3026,9,3026,25,0,0,4,1],[3027,17,3027,43,0,0,4,0],[3027,17,3027,43,0,0,4,1],[3034,9,3034,18,0,0,4,1],[3039,13,3039,32,0,0,4,1],[3041,9,3041,23,0,0,4,0],[3041,9,3041,23,0,0,4,1],[3048,25,3048,34,0,0,4,0],[3048,25,3048,34,0,0,4,1],[3052,9,3052,24,0,0,4,0],[3052,9,3052,24,0,0,4,1],[3059,25,3059,34,0,0,4,0],[3059,25,3059,34,0,0,4,1],[3063,9,3063,24,0,0,4,0],[3063,9,3063,24,0,0,4,1],[3070,25,3070,34,0,0,4,0],[3070,25,3070,34,0,0,4,1],[3072,21,3072,47,0,0,4,0],[3072,21,3072,47,0,0,4,1],[3078,9,3078,25,0,0,4,0],[3078,9,3078,25,0,0,4,1],[3085,25,3085,34,0,0,4,0],[3085,25,3085,34,0,0,4,1],[3087,21,3087,47,0,0,4,0],[3087,21,3087,47,0,0,4,1],[3093,9,3093,23,0,0,4,0],[3093,9,3093,23,0,0,4,1],[3100,25,3100,34,0,0,4,0],[3100,25,3100,34,0,0,4,1],[3102,21,3102,47,0,0,4,0],[3102,21,3102,47,0,0,4,1],[3108,9,3108,24,0,0,4,0],[3108,9,3108,24,0,0,4,1],[3115,25,3115,34,0,0,4,0],[3115,25,3115,34,0,0,4,1],[3117,21,3117,47,0,0,4,0],[3117,21,3117,47,0,0,4,1],[3123,9,3123,24,0,0,4,0],[3123,9,3123,24,0,0,4,1],[3130,25,3130,34,0,0,4,0],[3130,25,3130,34,0,0,4,1],[3132,21,3132,47,0,0,4,1],[3147,9,3147,25,0,0,4,0],[3147,9,3147,25,0,0,4,1],[3154,25,3154,34,0,0,4,0],[3154,25,3154,34,0,0,4,1],[3156,21,3156,47,0,0,4,1],[3162,9,3162,27,0,0,4,0],[3162,9,3162,27,0,0,4,1],[3171,25,3171,34,0,0,4,0],[3171,25,3171,34,0,0,4,1],[3173,21,3173,47,0,0,4,1],[3176,21,3176,47,0,0,4,1],[3179,21,3179,29,0,0,4,0],[3179,21,3179,29,0,0,4,1],[3186,9,3186,28,0,0,4,0],[3186,9,3186,28,0,0,4,1],[3195,25,3195,34,0,0,4,0],[3195,25,3195,34,0,0,4,1],[3197,21,3197,47,0,0,4,1],[3201,21,3201,47,0,0,4,1],[3204,21,3204,29,0,0,4,0],[3204,21,3204,29,0,0,4,1],[3211,9,3211,24,0,0,4,0],[3211,9,3211,24,0,0,4,1],[3216,17,3216,43,0,0,4,0],[3216,17,3216,43,0,0,4,1],[3221,25,3221,34,0,0,4,0],[3221,25,3221,34,0,0,4,1]],\"TIFFReadRawTile1\":[[1093,9,1093,18,0,0,4,0],[1097,13,1097,20,0,0,4,0],[1097,13,1097,20,0,0,4,1],[1106,13,1106,23,0,0,4,0],[1106,13,1106,23,0,0,4,1]],\"TIFFSwabArrayOfShort\":[[87,12,87,19,0,0,4,0],[87,12,87,19,0,0,4,1]],\"_WriteAsType\":[[1813,9,1813,40,0,0,4,0]],\"TIFFHashSetGetNewListElt\":[[192,9,192,29,0,0,4,1]],\"OJPEGReadHeaderInfoSecStreamDht\":[[1723,9,1723,35,0,0,4,0],[1723,9,1723,35,0,0,4,1],[1725,9,1725,15,0,0,4,0],[1725,9,1725,15,0,0,4,1],[1727,13,1727,40,0,0,4,1],[1731,9,1731,36,0,0,4,0],[1731,9,1731,36,0,0,4,1],[1739,13,1739,20,0,0,4,1],[1749,13,1749,70,0,0,4,1],[1755,13,1755,27,0,0,4,0],[1757,17,1757,22,0,0,4,1],[1763,17,1763,36,0,0,4,1]],\"LogLuvCleanup\":[[1686,9,1686,17,0,0,4,1]],\"_TIFFFax3fillruns\":[[380,9,380,26,0,0,4,0],[380,9,380,26,0,0,4,1],[383,12,383,23,0,0,4,0],[383,12,383,23,0,0,4,1],[386,13,386,28,0,0,4,0],[386,13,386,28,0,0,4,1],[386,32,386,43,0,0,4,1],[388,13,388,16,0,0,4,0],[388,13,388,16,0,0,4,1],[392,17,392,29,0,0,4,0],[392,17,392,29,0,0,4,1],[394,21,394,23,0,0,4,0],[394,21,394,23,0,0,4,1],[399,21,399,40,0,0,4,0],[399,21,399,40,0,0,4,1],[401,25,401,50,0,0,4,0],[401,25,401,50,0,0,4,1],[406,32,406,33,0,0,4,0],[406,37,406,47,0,0,4,0],[406,37,406,47,0,0,4,1],[414,34,414,38,0,0,4,0],[414,34,414,38,0,0,4,1],[420,21,420,24,0,0,4,0],[420,21,420,24,0,0,4,1],[428,13,428,28,0,0,4,1],[428,32,428,43,0,0,4,1],[430,13,430,16,0,0,4,0],[430,13,430,16,0,0,4,1],[434,17,434,29,0,0,4,0],[434,17,434,29,0,0,4,1],[436,21,436,23,0,0,4,0],[436,21,436,23,0,0,4,1],[441,21,441,40,0,0,4,0],[441,21,441,40,0,0,4,1],[443,25,443,50,0,0,4,0],[443,25,443,50,0,0,4,1],[448,32,448,33,0,0,4,0],[448,37,448,47,0,0,4,0],[448,37,448,47,0,0,4,1],[456,34,456,38,0,0,4,0],[456,34,456,38,0,0,4,1],[463,21,463,24,0,0,4,0],[463,21,463,24,0,0,4,1],[360,29,360,40,2,0,4,0],[360,29,360,40,2,0,4,1],[353,29,353,40,4,0,4,0],[353,29,353,40,4,0,4,1]],\"_TIFFMultiply32\":[[38,9,38,15,0,0,4,0],[38,9,38,15,0,0,4,1],[38,19,38,46,0,0,4,0],[38,19,38,46,0,0,4,1]],\"Fax3Cleanup\":[[1219,9,1219,17,0,0,4,0],[1219,9,1219,17,0,0,4,1],[1221,9,1221,20,0,0,4,0],[1221,9,1221,20,0,0,4,1]],\"InitCCITTFax3\":[[1409,9,1409,69,0,0,4,1],[1421,9,1421,30,0,0,4,1],[1442,9,1442,32,0,0,4,0]],\"Fax3DecodeRLE\":[[1653,9,1653,29,0,0,4,0],[1653,9,1653,29,0,0,4,1],[1660,12,1660,19,0,0,4,0],[1660,12,1660,19,0,0,4,1],[1675,13,1675,37,0,0,4,0],[371,21,371,31,3,0,4,0],[371,21,371,31,3,0,4,1],[374,21,374,33,3,0,4,0],[374,21,374,33,3,0,4,1],[377,21,377,35,3,0,4,0],[377,21,377,35,3,0,4,1],[378,21,378,34,3,0,4,0],[378,21,378,34,3,0,4,1],[382,21,382,28,3,0,4,0],[382,21,382,28,3,0,4,1],[388,17,388,28,3,0,4,0],[388,17,388,28,3,0,4,1],[395,21,395,31,3,0,4,0],[395,21,395,31,3,0,4,1],[398,21,398,33,3,0,4,0],[398,21,398,33,3,0,4,1],[401,21,401,35,3,0,4,0],[401,21,401,35,3,0,4,1],[402,21,402,34,3,0,4,0],[402,21,402,34,3,0,4,1],[406,21,406,28,3,0,4,0],[406,21,406,28,3,0,4,1],[412,17,412,28,3,0,4,0],[412,17,412,28,3,0,4,1],[414,17,414,31,3,0,4,1],[268,13,268,38,15,0,4,1],[268,13,268,38,22,0,4,1],[326,13,326,22,27,0,4,1],[328,13,328,24,27,0,4,0],[331,20,331,30,27,0,4,1],[333,17,333,27,27,0,4,0],[335,21,335,27,27,0,4,1],[337,21,337,39,27,0,4,1],[326,13,326,22,28,0,4,0],[326,13,326,22,28,0,4,1],[328,13,328,24,28,0,4,0],[328,13,328,24,28,0,4,1],[331,20,331,30,28,0,4,0],[331,20,331,30,28,0,4,1],[331,34,331,46,28,0,4,0],[333,17,333,27,28,0,4,0],[335,21,335,27,28,0,4,1],[337,21,337,39,28,0,4,0],[337,21,337,39,28,0,4,1],[166,13,166,28,30,0,4,0],[166,13,166,28,30,0,4,1],[170,21,170,35,30,0,4,0],[170,21,170,35,30,0,4,1],[177,21,177,43,30,0,4,0],[177,21,177,43,30,0,4,1],[166,13,166,28,35,0,4,0],[166,13,166,28,35,0,4,1],[177,21,177,43,35,0,4,0],[177,21,177,43,35,0,4,1],[268,13,268,38,43,0,4,1],[268,13,268,38,46,0,4,1],[268,13,268,38,48,0,4,1],[268,13,268,38,49,0,4,1],[117,21,117,31,52,0,4,0],[117,21,117,31,52,0,4,1],[117,21,117,31,53,0,4,0],[117,21,117,31,53,0,4,1],[117,21,117,31,56,0,4,1],[117,21,117,31,57,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSlong8\":[[3827,9,3827,20,0,0,4,0],[3827,9,3827,20,0,0,4,1],[3827,24,3827,53,0,0,4,0],[3827,24,3827,53,0,0,4,1]],\"TIFFStripSize64\":[[188,9,188,33,0,0,4,0],[188,9,188,33,0,0,4,1]],\"_TIFFVSetField\":[[231,9,231,20,0,0,4,1],[239,9,239,39,0,0,4,0],[239,9,239,39,0,0,4,1],[246,9,246,33,0,0,4,0],[246,9,246,33,0,0,4,1],[249,9,249,32,0,0,4,0],[249,9,249,32,0,0,4,1],[252,9,252,33,0,0,4,0],[252,9,252,33,0,0,4,1],[255,9,255,35,0,0,4,0],[255,9,255,35,0,0,4,1],[264,17,264,43,0,0,4,0],[264,17,264,43,0,0,4,1],[266,21,266,46,0,0,4,0],[266,21,266,46,0,0,4,1],[268,26,268,52,0,0,4,0],[268,26,268,52,0,0,4,1],[270,26,270,52,0,0,4,0],[270,26,270,52,0,0,4,1],[272,26,272,52,0,0,4,0],[272,26,272,52,0,0,4,1],[274,26,274,52,0,0,4,0],[274,26,274,52,0,0,4,1],[276,26,276,53,0,0,4,0],[276,26,276,53,0,0,4,1],[280,9,280,33,0,0,4,0],[280,9,280,33,0,0,4,1],[289,21,289,54,0,0,4,0],[289,21,289,54,0,0,4,1],[297,17,297,65,0,0,4,0],[302,9,302,33,0,0,4,0],[302,9,302,33,0,0,4,1],[305,9,305,35,0,0,4,0],[305,9,305,35,0,0,4,1],[308,9,308,31,0,0,4,0],[308,9,308,31,0,0,4,1],[310,17,310,39,0,0,4,0],[310,17,310,39,0,0,4,1],[310,43,310,65,0,0,4,0],[310,43,310,65,0,0,4,1],[314,9,314,33,0,0,4,0],[314,9,314,33,0,0,4,1],[316,17,316,40,0,0,4,0],[316,17,316,40,0,0,4,1],[316,44,316,67,0,0,4,0],[316,44,316,67,0,0,4,1],[321,9,321,37,0,0,4,0],[321,9,321,37,0,0,4,1],[323,17,323,23,0,0,4,0],[323,17,323,23,0,0,4,1],[325,17,325,44,0,0,4,0],[325,17,325,44,0,0,4,1],[328,21,328,51,0,0,4,0],[328,21,328,51,0,0,4,1],[338,21,338,51,0,0,4,0],[338,21,338,51,0,0,4,1],[351,21,351,55,0,0,4,1],[366,9,366,34,0,0,4,0],[366,9,366,34,0,0,4,1],[368,17,368,25,0,0,4,0],[368,17,368,25,0,0,4,1],[371,17,371,30,0,0,4,0],[371,17,371,30,0,0,4,1],[377,9,377,36,0,0,4,0],[377,9,377,36,0,0,4,1],[380,9,380,36,0,0,4,0],[380,9,380,36,0,0,4,1],[383,9,383,37,0,0,4,0],[383,9,383,37,0,0,4,1],[384,17,384,48,0,0,4,0],[393,9,393,37,0,0,4,0],[393,9,393,37,0,0,4,1],[394,17,394,48,0,0,4,0],[403,9,403,33,0,0,4,0],[403,9,403,33,0,0,4,1],[405,17,405,33,0,0,4,0],[405,17,405,33,0,0,4,1],[405,37,405,47,0,0,4,0],[405,37,405,47,0,0,4,1],[409,9,409,33,0,0,4,0],[409,9,409,33,0,0,4,1],[411,17,411,33,0,0,4,0],[411,17,411,33,0,0,4,1],[411,37,411,47,0,0,4,0],[411,37,411,47,0,0,4,1],[415,9,415,34,0,0,4,0],[415,9,415,34,0,0,4,1],[417,17,417,41,0,0,4,0],[417,17,417,41,0,0,4,1],[417,45,417,71,0,0,4,0],[417,45,417,71,0,0,4,1],[421,9,421,31,0,0,4,0],[421,9,421,31,0,0,4,1],[424,9,424,31,0,0,4,0],[424,9,424,31,0,0,4,1],[427,9,427,36,0,0,4,0],[427,9,427,36,0,0,4,1],[429,17,429,33,0,0,4,0],[429,17,429,33,0,0,4,1],[429,37,429,59,0,0,4,0],[429,37,429,59,0,0,4,1],[433,9,433,32,0,0,4,0],[433,9,433,32,0,0,4,1],[437,9,437,35,0,0,4,0],[437,9,437,35,0,0,4,1],[441,9,441,30,0,0,4,0],[441,9,441,30,0,0,4,1],[450,9,450,34,0,0,4,0],[450,9,450,34,0,0,4,1],[451,17,451,46,0,0,4,0],[451,17,451,46,0,0,4,1],[454,9,454,30,0,0,4,0],[454,9,454,30,0,0,4,1],[456,17,456,36,0,0,4,0],[456,17,456,36,0,0,4,1],[462,9,462,31,0,0,4,0],[462,9,462,31,0,0,4,1],[464,17,464,25,0,0,4,0],[464,17,464,25,0,0,4,1],[466,21,466,46,0,0,4,1],[475,9,475,32,0,0,4,0],[475,9,475,32,0,0,4,1],[477,17,477,25,0,0,4,0],[477,17,477,25,0,0,4,1],[479,21,479,46,0,0,4,1],[488,9,488,31,0,0,4,0],[488,9,488,31,0,0,4,1],[490,17,490,25,0,0,4,0],[490,17,490,25,0,0,4,1],[494,9,494,30,0,0,4,0],[494,9,494,30,0,0,4,1],[498,17,498,35,0,0,4,0],[498,17,498,35,0,0,4,1],[501,17,501,34,0,0,4,0],[501,17,501,34,0,0,4,1],[504,17,504,35,0,0,4,0],[504,17,504,35,0,0,4,1],[507,17,507,37,0,0,4,0],[507,17,507,37,0,0,4,1],[510,17,510,24,0,0,4,0],[510,17,510,24,0,0,4,1],[515,9,515,34,0,0,4,0],[515,9,515,34,0,0,4,1],[517,17,517,38,0,0,4,0],[517,17,517,38,0,0,4,1],[517,42,517,72,0,0,4,0],[517,42,517,72,0,0,4,1],[522,17,522,63,0,0,4,0],[522,17,522,63,0,0,4,1],[523,17,523,43,0,0,4,0],[523,17,523,43,0,0,4,1],[524,17,524,58,0,0,4,1],[526,23,526,69,0,0,4,0],[526,23,526,69,0,0,4,1],[527,23,527,72,0,0,4,1],[528,22,528,48,0,0,4,0],[528,22,528,48,0,0,4,1],[529,22,529,63,0,0,4,1],[532,9,532,32,0,0,4,0],[532,9,532,32,0,0,4,1],[535,9,535,28,0,0,4,0],[535,9,535,28,0,0,4,1],[536,17,536,54,0,0,4,0],[550,9,550,38,0,0,4,0],[550,9,550,38,0,0,4,1],[553,9,553,38,0,0,4,0],[553,9,553,38,0,0,4,1],[557,9,557,38,0,0,4,0],[557,9,557,38,0,0,4,1],[560,17,560,67,0,0,4,0],[560,17,560,67,0,0,4,1],[561,25,561,30,0,0,4,0],[561,25,561,30,0,0,4,1],[567,9,567,41,0,0,4,0],[567,9,567,41,0,0,4,1],[572,9,572,30,0,0,4,0],[572,9,572,30,0,0,4,1],[579,17,579,34,0,0,4,0],[579,17,579,34,0,0,4,1],[606,25,606,70,0,0,4,0],[606,25,606,70,0,0,4,1],[620,9,620,34,0,0,4,0],[620,9,620,34,0,0,4,1],[645,25,645,70,0,0,4,0],[645,25,645,70,0,0,4,1],[657,9,657,31,0,0,4,1],[664,9,664,16,0,0,4,0],[664,9,664,16,0,0,4,1],[680,17,680,47,0,0,4,1],[690,17,690,47,0,0,4,1],[705,31,705,64,0,0,4,0],[705,31,705,64,0,0,4,1],[707,21,707,72,0,0,4,1],[722,17,722,27,0,0,4,0],[730,21,730,38,0,0,4,1],[754,17,754,29,0,0,4,1],[762,17,762,46,0,0,4,0],[762,17,762,46,0,0,4,1],[766,21,766,41,0,0,4,0],[766,21,766,41,0,0,4,1],[776,25,776,43,0,0,4,1],[792,21,792,41,0,0,4,0],[792,21,792,41,0,0,4,1],[794,25,794,64,0,0,4,0],[794,25,794,64,0,0,4,1],[799,26,799,64,0,0,4,1],[800,26,800,65,0,0,4,1],[802,26,802,59,0,0,4,1],[807,21,807,35,0,0,4,0],[807,21,807,35,0,0,4,1],[821,21,821,31,0,0,4,1],[827,21,827,55,0,0,4,0],[827,21,827,55,0,0,4,1],[828,21,828,61,0,0,4,0],[840,26,840,46,0,0,4,0],[840,26,840,46,0,0,4,1],[841,26,841,64,0,0,4,1],[842,26,842,65,0,0,4,1],[843,26,843,59,0,0,4,1],[843,63,843,76,0,0,4,0],[843,63,843,76,0,0,4,1],[851,25,851,57,0,0,4,0],[853,29,853,63,0,0,4,0],[853,29,853,63,0,0,4,1],[856,45,856,58,0,0,4,0],[856,45,856,58,0,0,4,1],[858,37,858,59,0,0,4,0],[858,37,858,59,0,0,4,1],[872,34,872,69,0,0,4,0],[872,34,872,69,0,0,4,1],[875,45,875,58,0,0,4,0],[875,45,875,58,0,0,4,1],[877,37,877,57,0,0,4,0],[877,37,877,57,0,0,4,1],[878,37,878,64,0,0,4,0],[878,37,878,64,0,0,4,1],[901,25,901,39,0,0,4,0],[901,25,901,39,0,0,4,1],[902,25,902,44,0,0,4,1],[908,25,908,40,0,0,4,1],[914,25,914,40,0,0,4,0],[914,25,914,40,0,0,4,1],[920,25,920,41,0,0,4,1],[926,25,926,39,0,0,4,0],[926,25,926,39,0,0,4,1],[927,25,927,38,0,0,4,1],[933,25,933,40,0,0,4,1],[939,25,939,40,0,0,4,1],[940,25,940,39,0,0,4,0],[940,25,940,39,0,0,4,1],[946,33,946,65,0,0,4,0],[947,33,947,51,0,0,4,0],[947,33,947,51,0,0,4,1],[959,25,959,41,0,0,4,1],[978,25,978,43,0,0,4,1],[979,25,979,44,0,0,4,1],[1008,25,1008,40,0,0,4,0],[1008,25,1008,40,0,0,4,1],[1015,25,1015,41,0,0,4,0],[1015,25,1015,41,0,0,4,1],[1021,25,1021,32,0,0,4,1],[1030,9,1030,15,0,0,4,0],[1030,9,1030,15,0,0,4,1],[1033,13,1033,17,0,0,4,0],[1045,37,1045,41,0,0,4,0],[1053,39,1053,43,0,0,4,0],[1061,27,1061,31,0,0,4,0],[1071,24,1071,58,0,0,4,0],[1073,13,1073,65,0,0,4,0],[1073,13,1073,65,0,0,4,1],[1079,9,1079,20,0,0,4,0],[1082,13,1082,31,0,0,4,0],[1090,30,1090,59,0,0,4,1],[209,34,209,71,9,0,4,0],[209,34,209,71,9,0,4,1],[209,34,209,71,75,0,4,1],[209,34,209,71,77,0,4,0],[209,34,209,71,77,0,4,1],[209,34,209,71,79,0,4,1],[209,34,209,71,80,0,4,0],[209,34,209,71,80,0,4,1]],\"TIFFReadDirEntrySbyteArray\":[[1577,9,1577,28,0,0,4,1],[1578,9,1578,23,0,0,4,1],[1579,9,1579,24,0,0,4,0],[1580,9,1580,24,0,0,4,1],[1581,9,1581,25,0,0,4,1],[1582,9,1582,23,0,0,4,1],[1583,9,1583,24,0,0,4,1],[1584,9,1584,24,0,0,4,1],[1585,9,1585,25,0,0,4,1],[1587,9,1587,16,0,0,4,1],[1591,9,1591,39,0,0,4,0],[1591,9,1591,39,0,0,4,1],[1591,43,1591,58,0,0,4,0],[1591,43,1591,58,0,0,4,1],[1596,13,1596,32,0,0,4,1],[1598,9,1598,28,0,0,4,1],[1599,9,1599,23,0,0,4,1],[1617,9,1617,24,0,0,4,0]],\"_TIFFCastUInt64ToSSize\":[[86,9,86,42,0,0,4,0],[86,9,86,42,0,0,4,1],[88,13,88,24,0,0,4,0],[88,28,88,42,0,0,4,0]],\"TIFFComputeTile\":[[44,9,44,31,0,0,4,0],[44,9,44,31,0,0,4,1],[46,9,46,27,0,0,4,0],[46,9,46,27,0,0,4,1],[48,9,48,27,0,0,4,0],[48,9,48,27,0,0,4,1],[50,9,50,27,0,0,4,1],[52,9,52,16,0,0,4,0],[52,20,52,27,0,0,4,0],[52,31,52,38,0,0,4,0],[52,31,52,38,0,0,4,1],[58,13,58,57,0,0,4,0],[58,13,58,57,0,0,4,1],[282,6,282,54,1,0,4,0],[282,6,282,54,1,0,4,1],[282,6,282,54,2,0,4,0],[282,6,282,54,2,0,4,1],[282,6,282,54,3,0,4,0]],\"Fax3Decode2D\":[[300,9,300,29,0,0,4,0],[300,9,300,29,0,0,4,1],[306,12,306,19,0,0,4,0],[306,12,306,19,0,0,4,1],[326,13,326,17,0,0,4,0],[326,13,326,17,0,0,4,1],[331,13,331,37,0,0,4,0],[295,13,295,24,3,0,4,0],[295,13,295,24,3,0,4,1],[300,21,300,37,3,0,4,0],[300,21,300,37,3,0,4,1],[312,16,312,31,3,0,4,0],[312,16,312,31,3,0,4,1],[146,13,146,28,4,0,4,0],[146,13,146,28,4,0,4,1],[371,21,371,31,7,0,4,0],[371,21,371,31,7,0,4,1],[374,21,374,33,7,0,4,0],[374,21,374,33,7,0,4,1],[377,21,377,35,7,0,4,0],[377,21,377,35,7,0,4,1],[378,21,378,34,7,0,4,0],[378,21,378,34,7,0,4,1],[382,21,382,28,7,0,4,0],[382,21,382,28,7,0,4,1],[388,17,388,28,7,0,4,0],[388,17,388,28,7,0,4,1],[395,21,395,31,7,0,4,1],[398,21,398,33,7,0,4,0],[401,21,401,35,7,0,4,1],[402,21,402,34,7,0,4,1],[406,21,406,28,7,0,4,1],[412,17,412,28,7,0,4,1],[414,17,414,31,7,0,4,1],[454,16,454,26,8,0,4,0],[454,16,454,26,8,0,4,1],[456,17,456,42,8,0,4,1],[467,17,467,28,8,0,4,0],[467,17,467,28,8,0,4,1],[469,25,469,58,8,0,4,1],[484,17,484,29,8,0,4,0],[484,17,484,29,8,0,4,1],[485,25,485,43,8,0,4,0],[485,25,485,43,8,0,4,1],[492,33,492,45,8,0,4,0],[492,33,492,45,8,0,4,1],[495,33,495,47,8,0,4,1],[496,33,496,46,8,0,4,0],[496,33,496,46,8,0,4,1],[500,33,500,40,8,0,4,0],[500,33,500,40,8,0,4,1],[510,33,510,45,8,0,4,0],[513,33,513,47,8,0,4,1],[514,33,514,46,8,0,4,1],[518,33,518,40,8,0,4,1],[531,33,531,45,8,0,4,0],[531,33,531,45,8,0,4,1],[534,33,534,47,8,0,4,1],[535,33,535,46,8,0,4,0],[535,33,535,46,8,0,4,1],[539,33,539,40,8,0,4,0],[539,33,539,40,8,0,4,1],[549,33,549,45,8,0,4,0],[549,33,549,45,8,0,4,1],[552,33,552,47,8,0,4,1],[553,33,553,46,8,0,4,1],[557,33,557,40,8,0,4,0],[557,33,557,40,8,0,4,1],[565,17,565,26,8,0,4,0],[565,17,565,26,8,0,4,1],[568,25,568,54,8,0,4,1],[580,17,580,26,8,0,4,0],[580,17,580,26,8,0,4,1],[583,25,583,54,8,0,4,1],[595,17,595,26,8,0,4,0],[595,17,595,26,8,0,4,1],[597,25,597,55,8,0,4,0],[597,25,597,55,8,0,4,1],[605,17,605,27,8,0,4,0],[605,17,605,27,8,0,4,1],[609,17,609,27,8,0,4,0],[609,17,609,27,8,0,4,1],[617,17,617,24,8,0,4,1],[633,13,633,22,8,0,4,0],[633,13,633,22,8,0,4,1],[635,17,635,39,8,0,4,1],[268,13,268,38,9,0,4,1],[326,13,326,22,11,0,4,1],[328,13,328,24,11,0,4,0],[331,20,331,30,11,0,4,1],[333,17,333,27,11,0,4,0],[335,21,335,27,11,0,4,1],[337,21,337,39,11,0,4,1],[166,13,166,28,15,0,4,0],[166,13,166,28,15,0,4,1],[170,21,170,35,15,0,4,1],[177,21,177,43,15,0,4,0],[177,21,177,43,15,0,4,1],[146,13,146,28,18,0,4,0],[146,13,146,28,18,0,4,1],[150,21,150,35,18,0,4,0],[150,21,150,35,18,0,4,1],[194,20,194,47,19,0,4,0],[194,20,194,47,19,0,4,1],[117,21,117,31,24,0,4,1],[268,13,268,38,28,0,4,1],[268,13,268,38,35,0,4,1],[326,13,326,22,40,0,4,1],[328,13,328,24,40,0,4,0],[331,20,331,30,40,0,4,1],[333,17,333,27,40,0,4,0],[335,21,335,27,40,0,4,1],[337,21,337,39,40,0,4,1],[326,13,326,22,41,0,4,0],[326,13,326,22,41,0,4,1],[328,13,328,24,41,0,4,0],[331,20,331,30,41,0,4,0],[331,20,331,30,41,0,4,1],[331,34,331,46,41,0,4,0],[333,17,333,27,41,0,4,0],[335,21,335,27,41,0,4,1],[337,21,337,39,41,0,4,1],[432,13,432,26,46,0,4,1],[268,13,268,38,52,0,4,1],[268,13,268,38,57,0,4,1],[268,13,268,38,62,0,4,1],[268,13,268,38,67,0,4,1],[432,13,432,26,70,0,4,0],[433,20,433,28,70,0,4,0],[433,32,433,42,70,0,4,0],[433,32,433,42,70,0,4,1],[435,21,435,54,70,0,4,1],[432,13,432,26,72,0,4,0],[432,13,432,26,72,0,4,1],[433,20,433,28,72,0,4,0],[433,20,433,28,72,0,4,1],[433,32,433,42,72,0,4,0],[435,21,435,54,72,0,4,1],[268,13,268,38,73,0,4,1],[432,13,432,26,77,0,4,1],[268,13,268,38,78,0,4,1],[432,13,432,26,82,0,4,0],[432,13,432,26,82,0,4,1],[433,20,433,28,82,0,4,0],[433,20,433,28,82,0,4,1],[433,32,433,42,82,0,4,0],[435,21,435,54,82,0,4,1],[268,13,268,38,84,0,4,1],[146,13,146,28,88,0,4,0],[146,13,146,28,88,0,4,1],[150,21,150,35,88,0,4,0],[150,21,150,35,88,0,4,1],[194,20,194,47,89,0,4,0],[194,20,194,47,89,0,4,1],[326,13,326,22,96,0,4,1],[328,13,328,24,96,0,4,0],[331,20,331,30,96,0,4,1],[333,17,333,27,96,0,4,0],[335,21,335,27,96,0,4,1],[337,21,337,39,96,0,4,1],[268,13,268,38,100,0,4,1],[326,13,326,22,101,0,4,0],[326,13,326,22,101,0,4,1],[328,13,328,24,101,0,4,0],[328,13,328,24,101,0,4,1],[331,20,331,30,101,0,4,0],[331,20,331,30,101,0,4,1],[331,34,331,46,101,0,4,0],[333,17,333,27,101,0,4,0],[335,21,335,27,101,0,4,1],[337,21,337,39,101,0,4,0],[337,21,337,39,101,0,4,1],[268,13,268,38,107,0,4,1],[117,21,117,31,111,0,4,0],[117,21,117,31,111,0,4,1],[117,21,117,31,112,0,4,0],[117,21,117,31,112,0,4,1],[117,21,117,31,113,0,4,0],[117,21,117,31,113,0,4,1],[166,13,166,28,114,0,4,0],[166,13,166,28,114,0,4,1],[170,21,170,35,114,0,4,0],[170,21,170,35,114,0,4,1],[177,21,177,43,114,0,4,0],[177,21,177,43,114,0,4,1],[166,13,166,28,119,0,4,0],[177,21,177,43,119,0,4,1],[268,13,268,38,127,0,4,1],[268,13,268,38,130,0,4,1],[268,13,268,38,133,0,4,1],[146,13,146,28,138,0,4,0],[146,13,146,28,138,0,4,1],[150,21,150,35,138,0,4,1],[166,13,166,28,145,0,4,0],[177,21,177,43,145,0,4,0],[177,21,177,43,145,0,4,1],[166,13,166,28,150,0,4,1],[166,13,166,28,155,0,4,0],[177,21,177,43,155,0,4,1],[166,13,166,28,160,0,4,0],[166,13,166,28,160,0,4,1],[177,21,177,43,160,0,4,1],[117,21,117,31,183,0,4,0],[117,21,117,31,183,0,4,1],[268,13,268,38,187,0,4,1],[268,13,268,38,193,0,4,1],[268,13,268,38,195,0,4,1],[268,13,268,38,196,0,4,1],[117,21,117,31,212,0,4,0],[117,21,117,31,212,0,4,1],[117,21,117,31,213,0,4,1],[117,21,117,31,216,0,4,1],[117,21,117,31,240,0,4,0],[117,21,117,31,240,0,4,1],[117,21,117,31,243,0,4,1],[117,21,117,31,244,0,4,1],[117,21,117,31,251,0,4,1],[117,21,117,31,255,0,4,1]],\"PredictorDecodeTile\":[[589,9,589,45,0,0,4,0],[589,9,589,45,0,0,4,1],[593,13,593,34,0,0,4,1],[600,16,600,24,0,0,4,0],[600,16,600,24,0,0,4,1],[602,17,602,55,0,0,4,1]],\"ByteCountLooksBad\":[[4075,9,4075,20,0,0,4,0],[4075,9,4075,20,0,0,4,1],[4077,9,4077,23,0,0,4,0],[4077,9,4077,23,0,0,4,1],[4079,9,4079,56,0,0,4,0],[4079,9,4079,56,0,0,4,1],[4082,9,4082,27,0,0,4,0],[4082,9,4082,27,0,0,4,1],[4082,31,4082,60,0,0,4,0],[4082,31,4082,60,0,0,4,1],[4084,9,4084,34,0,0,4,0],[4087,13,4087,44,0,0,4,0],[4087,13,4087,44,0,0,4,1],[4088,13,4088,68,0,0,4,1],[4092,13,4092,67,0,0,4,0],[4092,13,4092,67,0,0,4,1]],\"TIFFReadDirEntryCheckedDouble\":[[3542,9,3542,41,0,0,4,0],[3546,13,3546,39,0,0,4,0],[3546,13,3546,39,0,0,4,1],[3549,13,3549,41,0,0,4,0],[3549,13,3549,41,0,0,4,1],[3558,9,3558,35,0,0,4,0],[3558,9,3558,35,0,0,4,1]],\"_TIFFMultiplySSize\":[[62,9,62,19,0,0,4,0],[62,9,62,19,0,0,4,1],[62,23,62,34,0,0,4,1],[64,13,64,24,0,0,4,0],[64,28,64,41,0,0,4,1],[73,9,73,43,0,0,4,1]],\"TIFFReadDirEntryCheckedRational\":[[3419,9,3419,41,0,0,4,0],[3423,13,3423,39,0,0,4,0],[3423,13,3423,39,0,0,4,1],[3426,13,3426,41,0,0,4,0],[3426,13,3426,41,0,0,4,1],[3431,9,3431,35,0,0,4,0],[3431,9,3431,35,0,0,4,1],[3436,9,3436,20,0,0,4,0],[3436,9,3436,20,0,0,4,1],[3436,24,3436,35,0,0,4,0],[3436,24,3436,35,0,0,4,1]],\"OJPEGReadHeaderInfoSecTablesQTable\":[[2018,9,2018,34,0,0,4,0],[2018,9,2018,34,0,0,4,1],[2024,17,2024,42,0,0,4,0],[2024,17,2024,42,0,0,4,1],[2026,13,2026,40,0,0,4,0],[2026,13,2026,40,0,0,4,1],[2027,14,2027,22,0,0,4,0],[2027,14,2027,22,0,0,4,1],[2027,26,2027,76,0,0,4,0],[2029,25,2029,34,0,0,4,0],[2029,25,2029,34,0,0,4,1],[2031,21,2031,65,0,0,4,0],[2039,17,2039,24,0,0,4,1],[2052,17,2052,24,0,0,4,1],[2057,17,2057,35,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Slong\":[[3883,9,3883,18,0,0,4,0],[3883,9,3883,18,0,0,4,1]],\"TIFFReadDirectoryFindFieldInfo\":[[5081,13,5081,25,0,0,4,0],[5081,13,5081,25,0,0,4,1],[5087,13,5087,62,0,0,4,0],[5087,13,5087,62,0,0,4,1],[5089,13,5089,61,0,0,4,0],[5089,13,5089,61,0,0,4,1],[5096,13,5096,20,0,0,4,0],[5096,13,5096,20,0,0,4,1],[5098,13,5098,66,0,0,4,0]],\"TIFFReadDirEntryShort\":[[485,9,485,34,0,0,4,0],[485,9,485,34,0,0,4,1],[489,9,489,23,0,0,4,0],[489,9,489,23,0,0,4,1],[496,9,496,24,0,0,4,0],[496,9,496,24,0,0,4,1],[501,17,501,45,0,0,4,0],[501,17,501,45,0,0,4,1],[506,9,506,24,0,0,4,0],[506,9,506,24,0,0,4,1],[509,9,509,25,0,0,4,0],[509,9,509,25,0,0,4,1],[514,17,514,45,0,0,4,0],[514,17,514,45,0,0,4,1],[519,9,519,23,0,0,4,0],[519,9,519,23,0,0,4,1],[524,17,524,45,0,0,4,0],[524,17,524,45,0,0,4,1],[529,9,529,24,0,0,4,0],[529,9,529,24,0,0,4,1],[534,17,534,45,0,0,4,0],[534,17,534,45,0,0,4,1],[539,9,539,24,0,0,4,0],[539,9,539,24,0,0,4,1],[543,17,543,45,0,0,4,0],[543,17,543,45,0,0,4,1],[546,17,546,45,0,0,4,0],[546,17,546,45,0,0,4,1],[551,9,551,25,0,0,4,0],[551,9,551,25,0,0,4,1],[555,17,555,45,0,0,4,0],[555,17,555,45,0,0,4,1],[558,17,558,45,0,0,4,0],[563,9,563,16,0,0,4,0],[563,9,563,16,0,0,4,1]],\"TIFFReadDirEntryCheckedSlong8\":[[3393,9,3393,41,0,0,4,0],[3397,13,3397,39,0,0,4,0],[3397,13,3397,39,0,0,4,1],[3400,13,3400,41,0,0,4,0],[3400,13,3400,41,0,0,4,1],[3405,9,3405,35,0,0,4,0],[3405,9,3405,35,0,0,4,1]],\"add_ms\":[[725,9,725,16,0,0,4,1],[725,20,725,27,0,0,4,1],[727,14,727,41,0,0,4,1]],\"PredictorVGetField\":[[958,9,958,31,0,0,4,1],[961,9,961,16,0,0,4,0]],\"JPEGFixupTagsSubsampling\":[[852,9,852,24,0,0,4,0],[852,9,852,24,0,0,4,1],[863,9,863,25,0,0,4,1],[875,9,875,41,0,0,4,0],[875,9,875,41,0,0,4,1]],\"TIFFIsCODECConfigured\":[[150,9,150,22,0,0,4,0],[150,9,150,22,0,0,4,1],[154,9,154,28,0,0,4,1],[158,9,158,37,0,0,4,0]],\"_TIFFGetMaxColorChannels\":[[4035,9,4035,33,0,0,4,0],[4035,9,4035,33,0,0,4,1],[4036,9,4036,36,0,0,4,0],[4036,9,4036,36,0,0,4,1],[4037,9,4037,36,0,0,4,0],[4037,9,4037,36,0,0,4,1],[4039,9,4039,31,0,0,4,0],[4039,9,4039,31,0,0,4,1],[4040,9,4040,29,0,0,4,0],[4040,9,4040,29,0,0,4,1],[4041,9,4041,32,0,0,4,0],[4041,9,4041,32,0,0,4,1],[4042,9,4042,32,0,0,4,0],[4042,9,4042,32,0,0,4,1],[4043,9,4043,32,0,0,4,0],[4043,9,4043,32,0,0,4,1],[4044,9,4044,32,0,0,4,0],[4044,9,4044,32,0,0,4,1],[4046,9,4046,35,0,0,4,0],[4046,9,4046,35,0,0,4,1],[4047,9,4047,30,0,0,4,0],[4047,9,4047,30,0,0,4,1],[4049,9,4049,30,0,0,4,0],[4049,9,4049,30,0,0,4,1],[4050,9,4050,29,0,0,4,1],[4051,9,4051,16,0,0,4,0],[4051,9,4051,16,0,0,4,1]],\"TIFFVStripSize64\":[[81,9,81,32,0,0,4,0],[81,9,81,32,0,0,4,1],[83,9,83,53,0,0,4,0],[83,9,83,53,0,0,4,1],[84,9,84,50,0,0,4,0],[84,9,84,50,0,0,4,1],[84,54,84,73,0,0,4,0],[100,13,100,40,0,0,4,0],[100,13,100,40,0,0,4,1],[107,14,107,38,0,0,4,0],[107,14,107,38,0,0,4,1],[107,42,107,66,0,0,4,0],[107,42,107,66,0,0,4,1],[108,14,108,38,0,0,4,0],[108,14,108,38,0,0,4,1],[109,14,109,38,0,0,4,0],[109,14,109,38,0,0,4,1],[109,42,109,66,0,0,4,0],[109,42,109,66,0,0,4,1],[110,14,110,38,0,0,4,0],[110,14,110,38,0,0,4,1],[282,6,282,54,5,0,4,0],[282,6,282,54,5,0,4,1],[282,6,282,54,6,0,4,0],[282,6,282,54,6,0,4,1],[296,6,296,16,7,0,4,0],[296,6,296,16,7,0,4,1]],\"Fax3VGetField\":[[1313,9,1313,29,0,0,4,1],[1316,9,1316,33,0,0,4,1],[1319,9,1319,35,0,0,4,1],[1320,9,1320,35,0,0,4,1],[1323,9,1323,33,0,0,4,1],[1326,9,1326,34,0,0,4,1],[1329,9,1329,44,0,0,4,1],[1332,9,1332,16,0,0,4,0]],\"TIFFInitCCITTFax3\":[[1472,9,1472,27,0,0,4,0],[1477,13,1477,75,0,0,4,1]],\"TIFFReadDirEntryLong8\":[[818,9,818,34,0,0,4,0],[818,9,818,34,0,0,4,1],[822,9,822,23,0,0,4,0],[822,9,822,23,0,0,4,1],[829,9,829,24,0,0,4,0],[829,9,829,24,0,0,4,1],[834,17,834,45,0,0,4,0],[834,17,834,45,0,0,4,1],[839,9,839,24,0,0,4,0],[839,9,839,24,0,0,4,1],[846,9,846,25,0,0,4,0],[846,9,846,25,0,0,4,1],[851,17,851,45,0,0,4,0],[851,17,851,45,0,0,4,1],[856,9,856,23,0,0,4,0],[856,9,856,23,0,0,4,1],[863,9,863,24,0,0,4,0],[863,9,863,24,0,0,4,1],[868,17,868,45,0,0,4,0],[868,17,868,45,0,0,4,1],[873,9,873,24,0,0,4,0],[873,9,873,24,0,0,4,1],[876,9,876,25,0,0,4,0],[876,9,876,25,0,0,4,1],[880,17,880,45,0,0,4,0],[880,17,880,45,0,0,4,1],[883,17,883,45,0,0,4,0],[883,17,883,45,0,0,4,1],[888,9,888,16,0,0,4,0],[888,9,888,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSshort\":[[3800,9,3800,18,0,0,4,0],[3800,9,3800,18,0,0,4,1]],\"TIFFReadDirEntryIfd8Array\":[[3240,9,3240,23,0,0,4,0],[3240,9,3240,23,0,0,4,1],[3241,9,3241,24,0,0,4,0],[3241,9,3241,24,0,0,4,1],[3242,9,3242,22,0,0,4,0],[3242,9,3242,22,0,0,4,1],[3243,9,3243,23,0,0,4,0],[3243,9,3243,23,0,0,4,1],[3245,9,3245,16,0,0,4,0],[3245,9,3245,16,0,0,4,1],[3249,9,3249,39,0,0,4,0],[3249,9,3249,39,0,0,4,1],[3249,43,3249,58,0,0,4,0],[3249,43,3249,58,0,0,4,1],[3254,13,3254,32,0,0,4,0],[3254,13,3254,32,0,0,4,1],[3256,9,3256,24,0,0,4,0],[3256,9,3256,24,0,0,4,1],[3257,9,3257,23,0,0,4,0],[3257,9,3257,23,0,0,4,1],[3259,17,3259,43,0,0,4,0],[3259,17,3259,43,0,0,4,1],[3264,9,3264,18,0,0,4,1],[3269,13,3269,32,0,0,4,1],[3271,9,3271,23,0,0,4,0],[3271,9,3271,23,0,0,4,1],[3272,9,3272,22,0,0,4,0],[3272,9,3272,22,0,0,4,1],[3279,25,3279,34,0,0,4,0],[3279,25,3279,34,0,0,4,1],[3281,21,3281,47,0,0,4,0],[3281,21,3281,47,0,0,4,1]],\"TIFFInitCCITTFax4\":[[1612,9,1612,27,0,0,4,0],[1617,13,1617,75,0,0,4,1]],\"_TIFFmalloc\":[[323,9,323,15,0,0,4,1]],\"PixarLogDecode\":[[846,9,846,35,0,0,4,1],[849,9,849,35,0,0,4,0],[849,9,849,35,0,0,4,1],[850,9,850,40,0,0,4,1],[851,9,851,38,0,0,4,1],[854,9,854,34,0,0,4,0],[854,9,854,34,0,0,4,1],[855,9,855,38,0,0,4,1],[858,9,858,16,0,0,4,1],[879,9,879,60,0,0,4,1],[885,9,885,55,0,0,4,1],[893,13,893,34,0,0,4,1],[897,13,897,34,0,0,4,0],[901,31,901,45,0,0,4,0]],\"OJPEGReadBytePeek\":[[2317,9,2317,32,0,0,4,0],[2317,9,2317,32,0,0,4,1],[2319,13,2319,41,0,0,4,0],[2319,13,2319,41,0,0,4,1]],\"TIFFWriteDirectoryTagCheckedLongArray\":[[2299,9,2299,35,0,0,4,1]],\"TIFFInitOJPEG\":[[485,9,485,73,0,0,4,1],[494,9,494,19,0,0,4,1]],\"OJPEGReadHeaderInfoSecTablesAcTable\":[[2149,9,2149,35,0,0,4,0],[2149,9,2149,35,0,0,4,1],[2155,17,2155,42,0,0,4,0],[2155,17,2155,42,0,0,4,1],[2157,13,2157,41,0,0,4,0],[2157,13,2157,41,0,0,4,1],[2158,14,2158,22,0,0,4,0],[2158,14,2158,22,0,0,4,1],[2158,26,2158,78,0,0,4,0],[2160,25,2160,34,0,0,4,0],[2160,25,2160,34,0,0,4,1],[2162,21,2162,67,0,0,4,1],[2171,17,2171,24,0,0,4,0],[2171,17,2171,24,0,0,4,1],[2174,25,2174,31,0,0,4,0],[2174,25,2174,31,0,0,4,1],[2178,17,2178,24,0,0,4,1],[2189,25,2189,31,0,0,4,0],[2189,25,2189,31,0,0,4,1],[2192,17,2192,23,0,0,4,0],[2192,17,2192,23,0,0,4,1],[2197,17,2197,36,0,0,4,1]],\"TIFFReadDirEntryShortArray\":[[1757,9,1757,23,0,0,4,0],[1757,9,1757,23,0,0,4,1],[1758,9,1758,24,0,0,4,0],[1758,9,1758,24,0,0,4,1],[1759,9,1759,24,0,0,4,0],[1759,9,1759,24,0,0,4,1],[1760,9,1760,25,0,0,4,0],[1760,9,1760,25,0,0,4,1],[1761,9,1761,23,0,0,4,0],[1761,9,1761,23,0,0,4,1],[1762,9,1762,24,0,0,4,0],[1762,9,1762,24,0,0,4,1],[1763,9,1763,24,0,0,4,0],[1763,9,1763,24,0,0,4,1],[1764,9,1764,25,0,0,4,0],[1764,9,1764,25,0,0,4,1],[1766,9,1766,16,0,0,4,0],[1766,9,1766,16,0,0,4,1],[1770,9,1770,39,0,0,4,0],[1770,9,1770,39,0,0,4,1],[1770,43,1770,58,0,0,4,0],[1770,43,1770,58,0,0,4,1],[1775,13,1775,32,0,0,4,0],[1775,13,1775,32,0,0,4,1],[1777,9,1777,24,0,0,4,0],[1777,9,1777,24,0,0,4,1],[1779,17,1779,43,0,0,4,0],[1779,17,1779,43,0,0,4,1],[1782,9,1782,25,0,0,4,0],[1782,9,1782,25,0,0,4,1],[1787,25,1787,34,0,0,4,0],[1787,25,1787,34,0,0,4,1],[1789,21,1789,47,0,0,4,0],[1789,21,1789,47,0,0,4,1],[1792,21,1792,49,0,0,4,0],[1792,21,1792,49,0,0,4,1],[1804,9,1804,18,0,0,4,1],[1809,13,1809,32,0,0,4,1],[1811,9,1811,23,0,0,4,0],[1811,9,1811,23,0,0,4,1],[1818,25,1818,34,0,0,4,0],[1818,25,1818,34,0,0,4,1],[1822,9,1822,24,0,0,4,0],[1822,9,1822,24,0,0,4,1],[1829,25,1829,34,0,0,4,0],[1829,25,1829,34,0,0,4,1],[1832,21,1832,49,0,0,4,0],[1832,21,1832,49,0,0,4,1],[1838,9,1838,23,0,0,4,0],[1838,9,1838,23,0,0,4,1],[1845,25,1845,34,0,0,4,0],[1845,25,1845,34,0,0,4,1],[1847,21,1847,47,0,0,4,0],[1847,21,1847,47,0,0,4,1],[1850,21,1850,49,0,0,4,0],[1850,21,1850,49,0,0,4,1],[1856,9,1856,24,0,0,4,0],[1856,9,1856,24,0,0,4,1],[1863,25,1863,34,0,0,4,0],[1863,25,1863,34,0,0,4,1],[1865,21,1865,47,0,0,4,0],[1865,21,1865,47,0,0,4,1],[1868,21,1868,49,0,0,4,0],[1868,21,1868,49,0,0,4,1],[1874,9,1874,24,0,0,4,0],[1874,9,1874,24,0,0,4,1],[1881,25,1881,34,0,0,4,0],[1881,25,1881,34,0,0,4,1],[1883,21,1883,47,0,0,4,0],[1883,21,1883,47,0,0,4,1],[1886,21,1886,49,0,0,4,0],[1886,21,1886,49,0,0,4,1],[1892,9,1892,25,0,0,4,0],[1892,9,1892,25,0,0,4,1],[1899,25,1899,34,0,0,4,0],[1899,25,1899,34,0,0,4,1],[1901,21,1901,47,0,0,4,0],[1901,21,1901,47,0,0,4,1],[1904,21,1904,49,0,0,4,0],[1904,21,1904,49,0,0,4,1],[1912,9,1912,37,0,0,4,0],[1912,9,1912,37,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortLong\":[[3710,9,3710,23,0,0,4,0],[3710,9,3710,23,0,0,4,1]],\"_TIFFmallocExt\":[[123,9,123,20,0,0,4,0],[123,9,123,20,0,0,4,1],[123,24,123,57,0,0,4,1]],\"TIFFReadDirEntryFloat\":[[967,9,967,34,0,0,4,0],[967,9,967,34,0,0,4,1],[971,9,971,23,0,0,4,0],[971,9,971,23,0,0,4,1],[978,9,978,24,0,0,4,0],[978,9,978,24,0,0,4,1],[985,9,985,24,0,0,4,0],[985,9,985,24,0,0,4,1],[992,9,992,25,0,0,4,0],[992,9,992,25,0,0,4,1],[999,9,999,23,0,0,4,0],[999,9,999,23,0,0,4,1],[1006,9,1006,24,0,0,4,0],[1006,9,1006,24,0,0,4,1],[1013,9,1013,24,0,0,4,0],[1013,9,1013,24,0,0,4,1],[1017,17,1017,45,0,0,4,0],[1017,17,1017,45,0,0,4,1],[1031,9,1031,25,0,0,4,0],[1031,9,1031,25,0,0,4,1],[1035,17,1035,45,0,0,4,0],[1035,17,1035,45,0,0,4,1],[1040,9,1040,27,0,0,4,0],[1040,9,1040,27,0,0,4,1],[1044,17,1044,45,0,0,4,0],[1044,17,1044,45,0,0,4,1],[1049,9,1049,28,0,0,4,0],[1049,9,1049,28,0,0,4,1],[1053,17,1053,45,0,0,4,0],[1053,17,1053,45,0,0,4,1],[1058,9,1058,24,0,0,4,0],[1058,9,1058,24,0,0,4,1],[1061,9,1061,25,0,0,4,0],[1061,9,1061,25,0,0,4,1],[1065,17,1065,45,0,0,4,0],[1065,17,1065,45,0,0,4,1],[1067,17,1067,30,0,0,4,0],[1067,17,1067,30,0,0,4,1],[1067,34,1067,48,0,0,4,0],[1067,34,1067,48,0,0,4,1],[1072,9,1072,16,0,0,4,0],[1072,9,1072,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteSshort\":[[3584,9,3584,20,0,0,4,0],[3584,9,3584,20,0,0,4,1],[3584,24,3584,38,0,0,4,0],[3584,24,3584,38,0,0,4,1]],\"ZIPVSetField\":[[569,9,569,32,0,0,4,1],[604,9,604,38,0,0,4,1],[623,9,623,16,0,0,4,0]],\"TIFFInitCCITTRLEW\":[[1721,9,1721,27,0,0,4,0]],\"TIFFReadDirEntryOutputErr\":[[3938,9,3938,17,0,0,4,0],[3938,9,3938,17,0,0,4,1],[3942,13,3942,42,0,0,4,0],[3942,13,3942,42,0,0,4,1],[3946,13,3946,41,0,0,4,0],[3946,13,3946,41,0,0,4,1],[3950,13,3950,39,0,0,4,0],[3950,13,3950,39,0,0,4,1],[3954,13,3954,42,0,0,4,0],[3954,13,3954,42,0,0,4,1],[3958,13,3958,42,0,0,4,0],[3958,13,3958,42,0,0,4,1],[3964,13,3964,44,0,0,4,0],[3964,13,3964,44,0,0,4,1],[3969,13,3969,42,0,0,4,1],[3973,13,3973,20,0,0,4,1],[3982,13,3982,42,0,0,4,0],[3982,13,3982,42,0,0,4,1],[3987,13,3987,41,0,0,4,0],[3987,13,3987,41,0,0,4,1],[3992,13,3992,39,0,0,4,0],[3992,13,3992,39,0,0,4,1],[3997,13,3997,42,0,0,4,0],[3997,13,3997,42,0,0,4,1],[4002,13,4002,42,0,0,4,1],[4008,13,4008,44,0,0,4,0],[4008,13,4008,44,0,0,4,1],[4014,13,4014,42,0,0,4,1],[4019,13,4019,20,0,0,4,1]],\"OJPEGWriteStreamQTable\":[[2490,9,2490,37,0,0,4,0],[2490,9,2490,37,0,0,4,1]],\"TIFFHashSetNew\":[[143,9,143,20,0,0,4,1],[145,23,145,33,0,0,4,0],[146,24,146,35,0,0,4,0],[150,9,150,29,0,0,4,1]],\"OJPEGReadBlock\":[[2356,13,2356,36,0,0,4,1],[2363,13,2363,35,0,0,4,1],[2370,14,2370,22,0,0,4,1]],\"TIFFReadEncodedTile\":[[935,9,935,31,0,0,4,0],[935,9,935,31,0,0,4,1],[937,9,937,31,0,0,4,1],[946,9,946,47,0,0,4,0],[946,9,946,47,0,0,4,1],[946,51,946,73,0,0,4,0],[947,9,947,25,0,0,4,0],[947,9,947,25,0,0,4,1],[947,29,947,38,0,0,4,0],[948,9,948,49,0,0,4,0],[950,13,950,75,0,0,4,0],[950,13,950,75,0,0,4,1],[953,13,953,25,0,0,4,0],[953,13,953,25,0,0,4,1],[954,13,954,50,0,0,4,0],[961,9,961,31,0,0,4,1],[963,14,963,29,0,0,4,0],[963,14,963,29,0,0,4,1],[965,9,965,32,0,0,4,0],[965,9,965,32,0,0,4,1],[966,9,967,73,0,0,4,0],[966,9,967,73,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Sshort\":[[3874,9,3874,18,0,0,4,0],[3874,9,3874,18,0,0,4,1]],\"_TIFFGetStrileOffsetOrByteCountValue\":[[7760,9,7760,14,0,0,4,0],[7760,9,7760,14,0,0,4,1],[7762,9,7762,48,0,0,4,1],[7789,9,7789,24,0,0,4,0],[7789,9,7789,24,0,0,4,1],[7789,28,7789,52,0,0,4,1],[7791,13,7791,18,0,0,4,0]],\"_TIFFCleanupIFDOffsetAndNumberMaps\":[[122,9,122,42,0,0,4,0],[122,9,122,42,0,0,4,1],[127,9,127,42,0,0,4,0],[127,9,127,42,0,0,4,1]],\"TIFFSetupStrips\":[[567,9,568,70,0,0,4,1],[568,24,568,55,0,0,4,1],[574,9,574,53,0,0,4,1],[580,9,580,37,0,0,4,1],[580,41,580,72,0,0,4,1],[250,22,250,62,1,0,4,0],[551,30,551,64,2,0,4,1],[209,34,209,71,9,0,4,0]],\"OJPEGReadHeaderInfoSecStreamDri\":[[1635,9,1635,35,0,0,4,0],[1635,9,1635,35,0,0,4,1],[1637,9,1637,15,0,0,4,0],[1637,9,1637,15,0,0,4,1],[1642,9,1642,35,0,0,4,1]],\"_tiffWriteProc\":[[97,9,97,38,0,0,4,1],[103,29,103,56,0,0,4,0],[103,29,103,56,0,0,4,1],[107,13,107,34,0,0,4,1],[110,13,110,23,0,0,4,1],[113,9,113,18,0,0,4,1]],\"TIFFCheckRead\":[[1486,9,1486,34,0,0,4,1],[1491,9,1491,24,0,0,4,0],[1491,9,1491,24,0,0,4,1],[1494,23,1494,28,0,0,4,0]],\"OJPEGWriteStreamAcTable\":[[2514,9,2514,38,0,0,4,0],[2514,9,2514,38,0,0,4,1]],\"OJPEGWriteStreamSof\":[[2561,17,2561,52,0,0,4,0],[2561,17,2561,52,0,0,4,1]],\"JPEGInitializeLibJPEG\":[[2726,9,2726,30,0,0,4,1],[2741,9,2741,19,0,0,4,0],[2743,13,2743,44,0,0,4,1]],\"TIFFReadDirEntryCheckedFloat\":[[3532,9,3532,35,0,0,4,0],[3532,9,3532,35,0,0,4,1]],\"TIFFClose\":[[150,9,150,20,0,0,4,0]],\"LZWSetupDecode\":[[189,9,189,19,0,0,4,1],[212,9,212,32,0,0,4,0],[212,9,212,32,0,0,4,1],[215,13,215,36,0,0,4,1],[231,18,231,24,0,0,4,0],[231,18,231,24,0,0,4,1]],\"TIFFFindField\":[[799,9,799,28,0,0,4,0],[799,9,799,28,0,0,4,1],[799,32,799,69,0,0,4,0],[799,32,799,69,0,0,4,1],[800,10,800,24,0,0,4,0],[804,9,804,25,0,0,4,1],[814,35,814,38,0,0,4,0],[814,35,814,38,0,0,4,1]],\"_TIFFCreateAnonField\":[[904,9,904,20,0,0,4,1],[916,9,916,23,0,0,4,0],[916,9,916,23,0,0,4,1],[917,9,917,28,0,0,4,0],[917,9,917,28,0,0,4,1],[921,9,921,24,0,0,4,0],[921,9,921,24,0,0,4,1],[925,9,925,24,0,0,4,0],[925,9,925,24,0,0,4,1],[929,9,929,23,0,0,4,0],[929,9,929,23,0,0,4,1],[933,9,933,27,0,0,4,0],[933,9,933,27,0,0,4,1],[934,9,934,28,0,0,4,0],[934,9,934,28,0,0,4,1],[935,9,935,24,0,0,4,0],[935,9,935,24,0,0,4,1],[939,9,939,24,0,0,4,0],[939,9,939,24,0,0,4,1],[943,9,943,25,0,0,4,0],[943,9,943,25,0,0,4,1],[947,9,947,24,0,0,4,0],[947,9,947,24,0,0,4,1],[951,9,951,25,0,0,4,0],[951,9,951,25,0,0,4,1],[955,9,955,22,0,0,4,0],[955,9,955,22,0,0,4,1],[956,9,956,23,0,0,4,0],[956,9,956,23,0,0,4,1],[960,9,960,24,0,0,4,0],[960,9,960,24,0,0,4,1],[964,9,964,25,0,0,4,0],[964,9,964,25,0,0,4,1],[968,9,968,16,0,0,4,0],[968,9,968,16,0,0,4,1],[977,9,977,32,0,0,4,1]],\"TIFFNumberOfTiles\":[[116,9,116,27,0,0,4,0],[116,9,116,27,0,0,4,1],[118,9,118,27,0,0,4,0],[118,9,118,27,0,0,4,1],[120,9,120,27,0,0,4,1],[123,10,123,17,0,0,4,0],[123,10,123,17,0,0,4,1],[123,21,123,28,0,0,4,0],[123,21,123,28,0,0,4,1],[123,32,123,39,0,0,4,1],[131,9,131,53,0,0,4,0],[131,9,131,53,0,0,4,1],[282,6,282,54,1,0,4,0],[282,6,282,54,1,0,4,1],[282,6,282,54,2,0,4,0],[282,6,282,54,2,0,4,1],[282,6,282,54,3,0,4,0]],\"TIFFFindCODEC\":[[197,33,197,35,0,0,4,1],[200,34,200,41,0,0,4,0],[200,34,200,41,0,0,4,1],[201,13,201,32,0,0,4,0],[201,13,201,32,0,0,4,1]],\"_TIFFCheckDirNumberAndOffset\":[[5430,9,5430,20,0,0,4,1],[5433,9,5433,50,0,0,4,0],[5437,13,5437,54,0,0,4,1],[5445,9,5445,50,0,0,4,0],[5451,13,5451,54,0,0,4,1],[5471,9,5471,19,0,0,4,1],[5492,9,5492,19,0,0,4,1],[5547,9,5548,27,0,0,4,1],[5558,9,5558,25,0,0,4,1],[5568,9,5568,72,0,0,4,1],[5574,9,5574,72,0,0,4,1]],\"TIFFReadDirEntryArrayWithLimit\":[[1281,9,1281,42,0,0,4,0],[1281,9,1281,42,0,0,4,1],[1283,9,1283,30,0,0,4,0],[1283,9,1283,30,0,0,4,1],[1283,34,1283,49,0,0,4,1],[1294,10,1294,37,0,0,4,0],[1294,10,1294,37,0,0,4,1],[1302,9,1302,66,0,0,4,0],[1302,9,1302,66,0,0,4,1],[1304,9,1304,70,0,0,4,0],[1304,9,1304,70,0,0,4,1],[1314,9,1314,18,0,0,4,0],[1314,29,1314,60,0,0,4,1],[1315,29,1315,61,0,0,4,0],[1315,65,1315,77,0,0,4,0],[1315,65,1315,77,0,0,4,1],[1322,13,1322,22,0,0,4,1],[1325,9,1325,41,0,0,4,0],[1329,13,1329,43,0,0,4,0],[1329,13,1329,43,0,0,4,1],[1329,47,1329,60,0,0,4,0],[1335,17,1335,43,0,0,4,0],[1335,17,1335,43,0,0,4,1],[1343,17,1343,45,0,0,4,0],[1343,17,1343,45,0,0,4,1],[251,23,251,62,3,0,4,1],[251,23,251,62,9,0,4,1]],\"setByteArray\":[[46,9,46,13,0,0,4,0],[46,9,46,13,0,0,4,1],[51,9,51,11,0,0,4,0],[51,9,51,11,0,0,4,1],[54,13,54,18,0,0,4,0],[56,13,56,17,0,0,4,0]],\"TIFFListDestroy\":[[264,12,264,21,0,0,4,1]],\"NeXTDecode\":[[71,47,71,55,0,0,4,0],[71,47,71,55,0,0,4,1],[77,9,77,23,0,0,4,1],[82,21,82,27,0,0,4,0],[82,21,82,27,0,0,4,1],[82,31,82,38,0,0,4,0],[82,31,82,38,0,0,4,1],[88,13,88,28,0,0,4,0],[88,13,88,28,0,0,4,1],[92,21,92,34,0,0,4,0],[92,21,92,34,0,0,4,1],[98,13,98,29,0,0,4,0],[98,13,98,29,0,0,4,1],[105,21,105,27,0,0,4,1],[109,21,109,31,0,0,4,0],[116,13,116,20,0,0,4,0],[116,13,116,20,0,0,4,1],[140,28,140,35,0,0,4,0],[140,28,140,35,0,0,4,1],[140,39,140,59,0,0,4,0],[140,39,140,59,0,0,4,1],[141,28,141,48,0,0,4,0],[141,28,141,48,0,0,4,1],[143,25,143,46,0,0,4,0],[143,25,143,46,0,0,4,1],[145,25,145,46,0,0,4,0],[145,25,145,46,0,0,4,1],[152,25,152,32,0,0,4,1],[250,22,250,62,3,0,4,0],[35,17,35,30,4,0,4,1],[37,13,37,19,4,0,4,0],[37,13,37,19,4,0,4,1],[40,13,40,19,4,0,4,0],[40,13,40,19,4,0,4,1],[43,13,43,19,4,0,4,0],[43,13,43,19,4,0,4,1],[46,13,46,19,4,0,4,0],[46,13,46,19,4,0,4,1]],\"OJPEGReadByte\":[[2303,9,2303,32,0,0,4,0],[2303,9,2303,32,0,0,4,1],[2305,13,2305,41,0,0,4,0],[2305,13,2305,41,0,0,4,1]],\"JPEGResetUpsampled\":[[2548,9,2548,51,0,0,4,0],[2548,9,2548,51,0,0,4,1],[2550,13,2550,52,0,0,4,0],[2550,13,2550,52,0,0,4,1],[2551,13,2551,65,0,0,4,1],[2569,9,2569,30,0,0,4,1],[2571,9,2571,34,0,0,4,1]],\"TIFFReadDirEntrySlongArray\":[[2268,9,2268,23,0,0,4,1],[2269,9,2269,24,0,0,4,1],[2270,9,2270,24,0,0,4,1],[2271,9,2271,25,0,0,4,1],[2272,9,2272,23,0,0,4,1],[2273,9,2273,24,0,0,4,0],[2274,9,2274,24,0,0,4,1],[2275,9,2275,25,0,0,4,1],[2277,9,2277,16,0,0,4,1],[2281,9,2281,39,0,0,4,0],[2281,9,2281,39,0,0,4,1],[2281,43,2281,58,0,0,4,0],[2281,43,2281,58,0,0,4,1],[2286,13,2286,32,0,0,4,1],[2288,9,2288,23,0,0,4,1],[2308,9,2308,24,0,0,4,0],[2310,17,2310,43,0,0,4,0],[2310,17,2310,43,0,0,4,1]],\"TIFFWriteDirectorySec\":[[482,9,482,34,0,0,4,1],[492,9,492,18,0,0,4,0],[494,13,494,45,0,0,4,1],[512,13,512,31,0,0,4,1],[521,13,521,45,0,0,4,0],[521,13,521,45,0,0,4,1],[521,49,521,65,0,0,4,0],[534,9,534,61,0,0,4,1],[546,13,546,20,0,0,4,0],[550,21,552,80,0,0,4,1],[554,21,556,53,0,0,4,1],[561,21,563,79,0,0,4,1],[565,21,567,80,0,0,4,1],[608,21,610,77,0,0,4,1],[692,21,692,29,0,0,4,1],[702,25,705,62,0,0,4,1],[711,21,711,29,0,0,4,1],[733,25,736,59,0,0,4,1],[848,29,848,49,0,0,4,0],[848,29,848,49,0,0,4,1],[852,25,852,54,0,0,4,1],[924,21,924,69,0,0,4,1],[1088,13,1088,24,0,0,4,0],[1088,13,1088,24,0,0,4,1],[1091,13,1091,24,0,0,4,1],[1096,13,1096,20,0,0,4,0],[1098,17,1098,39,0,0,4,0],[1098,43,1098,68,0,0,4,1],[1104,13,1104,28,0,0,4,1],[1106,13,1106,45,0,0,4,0],[1111,13,1111,45,0,0,4,0],[1113,13,1113,49,0,0,4,1],[1114,13,1114,51,0,0,4,1],[1119,13,1119,33,0,0,4,1],[1121,13,1121,20,0,0,4,0],[1123,17,1123,64,0,0,4,0],[1129,9,1129,16,0,0,4,0],[1152,9,1152,23,0,0,4,1],[1157,9,1157,41,0,0,4,0],[1164,13,1164,39,0,0,4,1],[1168,21,1168,29,0,0,4,0],[1168,21,1168,29,0,0,4,1],[1171,17,1171,43,0,0,4,1],[1175,17,1175,43,0,0,4,1],[1180,17,1180,43,0,0,4,1],[1190,13,1190,39,0,0,4,1],[1228,9,1228,16,0,0,4,1],[1233,9,1233,17,0,0,4,1],[1239,9,1239,18,0,0,4,0],[209,34,209,71,7,0,4,0],[209,34,209,71,9,0,4,0],[209,34,209,71,12,0,4,0],[209,34,209,71,15,0,4,1],[209,34,209,71,18,0,4,1],[209,34,209,71,21,0,4,1],[209,34,209,71,23,0,4,1],[209,34,209,71,25,0,4,0],[209,34,209,71,27,0,4,1],[209,34,209,71,29,0,4,1],[209,34,209,71,31,0,4,1],[209,34,209,71,33,0,4,1],[209,34,209,71,35,0,4,1],[209,34,209,71,37,0,4,1],[209,34,209,71,39,0,4,1],[209,34,209,71,41,0,4,1],[209,34,209,71,43,0,4,1],[209,34,209,71,45,0,4,1],[209,34,209,71,47,0,4,1],[209,34,209,71,49,0,4,0],[209,34,209,71,49,0,4,1],[209,34,209,71,53,0,4,0],[209,34,209,71,53,0,4,1],[209,34,209,71,57,0,4,1],[209,34,209,71,58,0,4,1],[209,34,209,71,61,0,4,1],[209,34,209,71,63,0,4,1],[209,34,209,71,65,0,4,1],[209,34,209,71,67,0,4,1],[209,34,209,71,69,0,4,1],[209,34,209,71,71,0,4,1],[209,34,209,71,73,0,4,1],[209,34,209,71,75,0,4,1],[209,34,209,71,77,0,4,1],[209,34,209,71,79,0,4,1],[209,34,209,71,80,0,4,1],[209,34,209,71,82,0,4,1],[209,34,209,71,84,0,4,1],[209,34,209,71,91,0,4,1]],\"TIFFHashSetDestroy\":[[287,9,287,12,0,0,4,0]],\"ZIPVGetField\":[[635,9,635,32,0,0,4,1],[639,9,639,38,0,0,4,1],[643,9,643,16,0,0,4,0]],\"unixWarningHandler\":[[355,9,355,23,0,0,4,0]],\"Fax3Extension\":[[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFLinkDirectory\":[[2961,9,2961,39,0,0,4,1],[3013,9,3013,41,0,0,4,0],[3018,13,3018,39,0,0,4,1],[3020,13,3020,53,0,0,4,0],[3028,17,3028,25,0,0,4,1]],\"OJPEGReadHeaderInfoSecStreamDqt\":[[1658,9,1658,35,0,0,4,0],[1658,9,1658,35,0,0,4,1],[1660,9,1660,15,0,0,4,0],[1660,9,1660,15,0,0,4,1],[1662,13,1662,40,0,0,4,0],[1662,13,1662,40,0,0,4,1],[1666,9,1666,36,0,0,4,0],[1666,9,1666,36,0,0,4,1],[1673,17,1673,23,0,0,4,0],[1673,17,1673,23,0,0,4,1],[1680,17,1680,24,0,0,4,1],[1690,17,1690,71,0,0,4,1],[1696,17,1696,22,0,0,4,0],[1696,17,1696,22,0,0,4,1],[1702,17,1702,35,0,0,4,1],[1706,18,1706,23,0,0,4,0]],\"TIFFReadDirEntryCheckRangeByteSlong\":[[3602,9,3602,20,0,0,4,0],[3602,9,3602,20,0,0,4,1],[3602,24,3602,38,0,0,4,0],[3602,24,3602,38,0,0,4,1]],\"LZWPreDecode\":[[252,9,252,32,0,0,4,1],[262,9,262,28,0,0,4,0],[262,9,262,28,0,0,4,1],[262,32,262,56,0,0,4,0],[262,32,262,56,0,0,4,1],[263,9,263,36,0,0,4,0],[263,9,263,36,0,0,4,1],[266,13,266,28,0,0,4,0]],\"TIFFReadDirEntryCheckedSrational\":[[3452,9,3452,41,0,0,4,0],[3456,13,3456,39,0,0,4,0],[3456,13,3456,39,0,0,4,1],[3459,13,3459,41,0,0,4,0],[3459,13,3459,41,0,0,4,1],[3464,9,3464,35,0,0,4,0],[3464,9,3464,35,0,0,4,1],[3469,9,3469,29,0,0,4,0],[3469,9,3469,29,0,0,4,1],[3469,33,3469,44,0,0,4,0],[3469,33,3469,44,0,0,4,1]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFClose\",\"TIFFGetFieldDefaulted\",\"TIFFGetFieldDefaulted\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFTileSize\",\"_TIFFmalloc\",\"TIFFClose\",\"TIFFClose\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\",\"TIFFWriteEncodedTile\",\"TIFFComputeTile\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetFieldDefaulted\",\"TIFFGetFieldDefaulted\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFTileSize\",\"_TIFFmalloc\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"TIFFWriteEncodedTile\",\"TIFFComputeTile\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\"],\"visited\":6}\n/*Here is a complete C++ program that utilizes the libtiff library APIs to achieve the given event:\n\n*/\n\n\n\nextern \"C\" int LLVMFuzzerTestOneInput_0(const uint8_t* data, size_t size) {\n\tif(size\u003c0) return 0;\n\n\tFILE *input_file_ptr = fopen(\"input_file\", \"wb\");\n\tif (input_file_ptr == NULL) {return 0;}\n\tfwrite(data, sizeof(uint8_t), size, input_file_ptr);\n\tfclose(input_file_ptr);\n\n  // Write data into input_file\n  FILE* in_file = fopen(\"input_file\", \"wb\");\n  if (in_file == nullptr) {\n    assert_file_closed(\u0026in_file);\n\treturn 0;\n  }\n  fwrite(data, sizeof(uint8_t), size, in_file);\n  assert_file_closed(\u0026in_file);;\n\n  // Open input TIFF in memory\n  std::istringstream s(std::string(data, data + size));\n  TIFF* in_tif = TIFFStreamOpen(\"MemTIFF\", \u0026s);\n  if (!in_tif) {\n    assert_file_closed(\u0026in_file);\n\treturn 0;\n  }\n\n  // Create output TIFF file\n  TIFF* out_tif = TIFFOpen(\"output_file\", \"w\");\n  if (!out_tif) {\n    TIFFClose(in_tif);\n    assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n  }\n\n  uint32_t image_width;\n  uint32_t image_height;\n\n  // Read input TIFF tags\n  TIFFGetFieldDefaulted(in_tif, TIFFTAG_IMAGEWIDTH, \u0026image_width);\n  TIFFGetFieldDefaulted(in_tif, TIFFTAG_IMAGELENGTH, \u0026image_height);\n\n  // Set output TIFF tags\n  TIFFSetField(out_tif, TIFFTAG_IMAGEWIDTH, image_width);\n  TIFFSetField(out_tif, TIFFTAG_IMAGELENGTH, image_height);\n\n  // Set output TIFF tile size\n  uint32_t tile_width = 256;\n  uint32_t tile_height = 256;\n  TIFFSetField(out_tif, TIFFTAG_TILEWIDTH, tile_width);\n  TIFFSetField(out_tif, TIFFTAG_TILELENGTH, tile_height);\n\n  // Allocate tile buffer\n  tsize_t tile_size = TIFFTileSize(out_tif);\n  unsigned char* tile_buffer = static_cast\u003cunsigned char*\u003e(_TIFFmalloc(tile_size));\n\n  if (tile_buffer == nullptr) {\n    TIFFClose(in_tif);\n    TIFFClose(out_tif);\n    assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n  }\n\n  // Iterate through each tile of the input image\n  for (uint32_t row = 0; row \u003c image_height; row += tile_height) {\n    for (uint32_t col = 0; col \u003c image_width; col += tile_width) {\n      // Read tile from input TIFF\n      if (TIFFReadEncodedTile(in_tif, TIFFComputeTile(in_tif, col, row, 0, 0), tile_buffer, tile_size) \u003c 0) {\n        _TIFFfree(tile_buffer);\n        TIFFClose(in_tif);\n        TIFFClose(out_tif);\n        assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n      }\n\n      // Write tile to output TIFF\n      if (TIFFWriteEncodedTile(out_tif, TIFFComputeTile(out_tif, col, row, 0, 0), tile_buffer, tile_size) \u003c 0) {\n        _TIFFfree(tile_buffer);\n        TIFFClose(in_tif);\n        TIFFClose(out_tif);\n        assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n      }\n    }\n  }\n\n  // Cleanup\n  _TIFFfree(tile_buffer);\n  TIFFClose(in_tif);\n  TIFFClose(out_tif);\n\n  assert_file_name_closed(\"output_file\");\n\tassert_file_closed(\u0026in_file);\n\treturn 0;\n}",
        "name": "id_000000.cc",
        "path": "examples/libtiff/fuzzer_0/fuzzers/id_000000.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_0/fuzzers/id_000000.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              107,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFGetStrileOffset\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFCreateDirectory\",\"TIFFSetFileName\",\"TIFFVGetFieldDefaulted\",\"TIFFClose\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c15ace4a9bb90693e1e9aaa55969b51859ec2633"
        },
        "content": "#include \"FDSan.h\"\n#include \"FuzzedDataProvider.h\"\n#include \u003ctiffio.hxx\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cvector\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003csstream\u003e\n//\u003cID\u003e 4\n//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFGetStrileOffset\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFCreateDirectory\",\"TIFFSetFileName\",\"TIFFVGetFieldDefaulted\",\"TIFFClose\"]\n/*\u003cCombination\u003e: [TIFF *TIFFStreamOpen(const char * , std::ostream * ),\n    uint64_t TIFFGetStrileOffset(TIFF * tif, uint32_t strile),\n    TIFF *TIFFOpen(const char * filename, const char * mode),\n    TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF * ),\n    void TIFFSetWriteOffset(TIFF * tif, toff_t off),\n    void TIFFPrintDirectory(TIFF * , FILE * , long ),\n    void LogLuv32toXYZ(uint32_t , float * ),\n    int TIFFWriteDirectory(TIFF * ),\n    int TIFFCreateDirectory(TIFF * ),\n    const char *TIFFSetFileName(TIFF * , const char * ),\n    int TIFFVGetFieldDefaulted(TIFF * tif, uint32_t tag, __va_list_tag * ap),\n    void TIFFClose(TIFF * tif)\n*/\n//\u003cscore\u003e 1010.7143, nr_unique_branch: 5025\n//\u003cQuality\u003e {\"density\":25,\"unique_branches\":{\"TIFFHashSetInsert\":[[444,9,444,13,0,0,4,1],[453,9,453,50,0,0,4,1],[454,10,454,22,0,0,4,1],[474,9,474,24,0,0,4,1]],\"_TIFFClampDoubleToFloat\":[[437,9,437,22,0,0,4,1],[439,9,439,23,0,0,4,1]],\"ZIPCleanup\":[[538,9,538,39,0,0,4,1],[543,14,543,44,0,0,4,0],[543,14,543,44,0,0,4,1]],\"TIFFFlush\":[[32,9,32,34,0,0,4,1],[35,9,35,28,0,0,4,1],[43,9,43,43,0,0,4,0],[43,9,43,43,0,0,4,1],[44,9,44,45,0,0,4,1],[50,9,50,64,0,0,4,0],[51,9,51,35,0,0,4,1]],\"TIFFHashSetLookup\":[[506,9,506,13,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortLong8\":[[3728,9,3728,23,0,0,4,0],[3728,9,3728,23,0,0,4,1]],\"TIFFInitJPEG\":[[2834,9,2834,71,0,0,4,1],[2846,9,2846,30,0,0,4,1],[2872,9,2872,29,0,0,4,1]],\"TIFFReadDirEntryData\":[[3911,9,3911,18,0,0,4,0],[3913,13,3913,20,0,0,4,0],[3913,13,3913,20,0,0,4,1],[3915,13,3915,20,0,0,4,0],[3915,13,3915,20,0,0,4,1]],\"TIFFHashSetFindPtr\":[[413,12,413,15,0,0,4,1]],\"TIFFStartTile\":[[1445,9,1445,48,0,0,4,0],[1445,9,1445,48,0,0,4,1],[1447,13,1447,42,0,0,4,0],[1447,13,1447,42,0,0,4,1],[1453,9,1453,23,0,0,4,1],[1460,9,1460,23,0,0,4,1],[1467,9,1467,40,0,0,4,0],[1467,9,1467,40,0,0,4,1],[1475,13,1475,39,0,0,4,0],[282,6,282,54,3,0,4,0],[282,6,282,54,4,0,4,0]],\"unixErrorHandler\":[[365,9,365,23,0,0,4,0]],\"OJPEGReadHeaderInfoSecStreamSof\":[[1801,9,1801,25,0,0,4,1],[1806,9,1806,36,0,0,4,0],[1806,9,1806,36,0,0,4,1],[1809,9,1809,35,0,0,4,0],[1809,9,1809,35,0,0,4,1],[1811,9,1811,15,0,0,4,0],[1811,9,1811,15,0,0,4,1],[1813,13,1813,40,0,0,4,0],[1813,13,1813,40,0,0,4,1],[1818,9,1818,19,0,0,4,0],[1818,9,1818,19,0,0,4,1],[1820,13,1820,40,0,0,4,1],[1825,9,1825,36,0,0,4,0],[1825,9,1825,36,0,0,4,1],[1827,13,1827,39,0,0,4,0],[1827,13,1827,39,0,0,4,1],[1836,9,1836,35,0,0,4,0],[1836,9,1836,35,0,0,4,1],[1838,9,1838,15,0,0,4,0],[1838,9,1838,15,0,0,4,1],[1840,13,1840,40,0,0,4,0],[1840,13,1840,40,0,0,4,1],[1847,9,1847,31,0,0,4,0],[1847,9,1847,31,0,0,4,1],[1852,13,1852,39,0,0,4,1],[1854,13,1854,45,0,0,4,0],[1854,13,1854,45,0,0,4,1],[1855,13,1855,52,0,0,4,0],[1863,13,1863,39,0,0,4,0],[1863,13,1863,39,0,0,4,1],[1865,13,1865,44,0,0,4,0],[1865,13,1865,44,0,0,4,1],[1865,48,1865,80,0,0,4,0],[1865,48,1865,80,0,0,4,1],[1871,13,1871,43,0,0,4,0],[1871,13,1871,43,0,0,4,1],[1881,9,1881,35,0,0,4,0],[1881,9,1881,35,0,0,4,1],[1883,9,1883,15,0,0,4,0],[1883,9,1883,15,0,0,4,1],[1885,13,1885,40,0,0,4,0],[1885,13,1885,40,0,0,4,1],[1892,17,1892,22,0,0,4,0],[1892,17,1892,22,0,0,4,1],[1895,13,1895,39,0,0,4,0],[1895,13,1895,39,0,0,4,1],[1897,13,1897,40,0,0,4,0],[1897,13,1897,40,0,0,4,1],[1900,13,1900,39,0,0,4,0],[1900,13,1900,39,0,0,4,1],[1902,13,1902,40,0,0,4,0],[1902,13,1902,40,0,0,4,1],[1904,17,1904,23,0,0,4,0],[1904,17,1904,23,0,0,4,1],[1908,22,1908,48,0,0,4,0],[1908,22,1908,48,0,0,4,1],[1908,52,1908,78,0,0,4,0],[1908,52,1908,78,0,0,4,1],[1909,22,1909,48,0,0,4,0],[1909,22,1909,48,0,0,4,1],[1910,22,1910,48,0,0,4,0],[1910,22,1910,48,0,0,4,1],[1910,52,1910,78,0,0,4,0],[1910,52,1910,78,0,0,4,1],[1911,22,1911,48,0,0,4,0],[1911,22,1911,48,0,0,4,1],[1917,21,1917,28,0,0,4,0],[1917,21,1917,28,0,0,4,1],[1925,17,1925,78,0,0,4,0],[1925,17,1925,78,0,0,4,1],[1927,21,1927,27,0,0,4,0],[1927,21,1927,27,0,0,4,1],[1929,25,1929,80,0,0,4,0],[1929,25,1929,80,0,0,4,1],[1939,25,1939,32,0,0,4,0],[1939,25,1939,32,0,0,4,1],[1950,13,1950,39,0,0,4,0],[1950,13,1950,39,0,0,4,1],[1952,13,1952,40,0,0,4,0],[1952,13,1952,40,0,0,4,1],[1955,9,1955,36,0,0,4,0],[1955,9,1955,36,0,0,4,1]],\"TIFFFetchDirectory\":[[5757,9,5757,19,0,0,4,0],[5759,9,5759,18,0,0,4,0],[5761,13,5761,20,0,0,4,0],[5761,13,5761,20,0,0,4,1],[5768,13,5768,45,0,0,4,0],[5768,13,5768,45,0,0,4,1],[5770,17,5770,24,0,0,4,0],[5770,17,5770,24,0,0,4,1],[5777,17,5777,43,0,0,4,0],[5777,17,5777,43,0,0,4,1],[5779,17,5779,34,0,0,4,0],[5779,17,5779,34,0,0,4,1],[5791,17,5791,24,0,0,4,0],[5791,17,5791,24,0,0,4,1],[5798,17,5798,43,0,0,4,1],[5800,17,5800,34,0,0,4,0],[5800,17,5800,34,0,0,4,1],[5812,13,5812,28,0,0,4,0],[5812,13,5812,28,0,0,4,1],[5814,13,5814,20,0,0,4,0],[5814,13,5814,20,0,0,4,1],[5825,13,5825,23,0,0,4,0],[5827,17,5827,49,0,0,4,0],[5830,21,5830,28,0,0,4,0],[5830,21,5830,28,0,0,4,1],[5832,21,5832,47,0,0,4,0],[5832,21,5832,47,0,0,4,1],[5973,9,5973,17,0,0,4,1],[5980,17,5980,31,0,0,4,0],[5980,17,5980,31,0,0,4,1],[5983,13,5983,39,0,0,4,0],[5983,13,5983,39,0,0,4,1],[5987,13,5987,39,0,0,4,0],[5987,13,5987,39,0,0,4,1],[5991,13,5991,45,0,0,4,0],[5993,17,5993,43,0,0,4,0],[5993,17,5993,43,0,0,4,1]],\"TIFFReadDirEntryDouble\":[[1081,9,1081,34,0,0,4,0],[1081,9,1081,34,0,0,4,1],[1085,9,1085,23,0,0,4,1],[1092,9,1092,24,0,0,4,1],[1099,9,1099,24,0,0,4,0],[1099,9,1099,24,0,0,4,1],[1106,9,1106,25,0,0,4,1],[1113,9,1113,23,0,0,4,1],[1120,9,1120,24,0,0,4,1],[1127,9,1127,24,0,0,4,1],[1145,9,1145,25,0,0,4,1],[1154,9,1154,27,0,0,4,1],[1157,9,1157,28,0,0,4,1],[1160,9,1160,24,0,0,4,0],[1160,9,1160,24,0,0,4,1],[1167,9,1167,25,0,0,4,1],[1170,9,1170,16,0,0,4,0],[1170,9,1170,16,0,0,4,1]],\"TIFFWriteEncodedTile\":[[424,9,424,31,0,0,4,1],[445,9,445,55,0,0,4,1],[458,9,458,23,0,0,4,1],[465,9,465,23,0,0,4,1],[472,9,472,48,0,0,4,0],[472,9,472,48,0,0,4,1],[474,13,474,42,0,0,4,1],[485,9,485,15,0,0,4,1],[485,19,485,41,0,0,4,1],[489,9,489,47,0,0,4,0],[494,13,494,25,0,0,4,1],[498,13,498,19,0,0,4,0],[498,23,498,73,0,0,4,1],[38,6,38,43,1,0,4,0],[38,6,38,43,1,0,4,1],[38,47,38,79,1,0,4,0],[40,7,40,44,2,0,4,0],[40,7,40,44,2,0,4,1],[40,48,40,64,2,0,4,0],[41,6,41,53,2,0,4,0],[282,6,282,54,4,0,4,0],[282,6,282,54,5,0,4,0]],\"LogLuvVGetField\":[[1766,9,1766,35,0,0,4,1],[1769,9,1769,16,0,0,4,0]],\"TIFFReadDirEntryCheckRangeByteSbyte\":[[3566,9,3566,18,0,0,4,0],[3566,9,3566,18,0,0,4,1]],\"OJPEGVGetField\":[[543,9,543,34,0,0,4,1],[546,9,546,37,0,0,4,1],[550,9,550,38,0,0,4,0],[550,9,550,38,0,0,4,1],[551,17,551,49,0,0,4,0],[551,17,551,49,0,0,4,1],[556,9,556,33,0,0,4,1],[560,9,560,34,0,0,4,1],[564,9,564,34,0,0,4,1],[568,9,568,30,0,0,4,1],[571,9,571,41,0,0,4,1],[574,9,574,16,0,0,4,0],[574,9,574,16,0,0,4,1]],\"TIFFWriteDirectoryTagLongLong8Array\":[[1860,9,1860,20,0,0,4,0],[1860,9,1860,20,0,0,4,1],[1866,9,1866,48,0,0,4,1],[1872,9,1872,38,0,0,4,1],[1897,9,1897,18,0,0,4,0],[1897,9,1897,18,0,0,4,1],[1897,22,1897,52,0,0,4,1],[1901,14,1901,23,0,0,4,0],[1901,14,1901,23,0,0,4,1],[1901,27,1901,56,0,0,4,0],[1901,27,1901,56,0,0,4,1],[1905,9,1905,22,0,0,4,0],[1905,9,1905,22,0,0,4,1],[1917,13,1917,22,0,0,4,1],[1923,41,1923,51,0,0,4,0],[1923,41,1923,51,0,0,4,1],[1925,17,1925,33,0,0,4,1],[1947,13,1947,22,0,0,4,1],[1953,41,1953,51,0,0,4,0],[1953,41,1953,51,0,0,4,1],[1955,17,1955,29,0,0,4,1]],\"PredictorVSetField\":[[938,9,938,31,0,0,4,0],[938,9,938,31,0,0,4,1],[942,9,942,16,0,0,4,0],[942,9,942,16,0,0,4,1]],\"PredictorSetupDecode\":[[131,9,131,33,0,0,4,0],[131,9,131,33,0,0,4,1],[131,37,131,57,0,0,4,0],[131,37,131,57,0,0,4,1],[134,9,134,27,0,0,4,0],[134,9,134,27,0,0,4,1],[136,17,136,37,0,0,4,1],[138,13,138,19,0,0,4,0],[138,13,138,19,0,0,4,1],[141,13,141,20,0,0,4,0],[141,13,141,20,0,0,4,1],[144,13,144,20,0,0,4,1],[147,13,147,20,0,0,4,1],[155,13,155,53,0,0,4,0],[172,13,172,39,0,0,4,1],[192,14,192,32,0,0,4,1]],\"TIFFInitLZW\":[[1405,9,1405,30,0,0,4,1]],\"TIFFFetchNormalTag\":[[6027,9,6027,26,0,0,4,1],[6044,9,6044,35,0,0,4,0],[6044,9,6044,35,0,0,4,1],[6051,9,6051,31,0,0,4,0],[6051,9,6051,31,0,0,4,1],[6056,17,6056,45,0,0,4,0],[6056,17,6056,45,0,0,4,1],[6060,21,6060,33,0,0,4,0],[6060,21,6060,33,0,0,4,1],[6062,25,6062,43,0,0,4,0],[6062,47,6062,76,0,0,4,0],[6062,47,6062,76,0,0,4,1],[6074,32,6074,61,0,0,4,0],[6074,32,6074,61,0,0,4,1],[6076,33,6076,41,0,0,4,0],[6076,33,6076,41,0,0,4,1],[6083,21,6083,54,0,0,4,0],[6083,21,6083,54,0,0,4,1],[6090,26,6090,59,0,0,4,0],[6090,26,6090,59,0,0,4,1],[6101,25,6101,34,0,0,4,1],[6107,25,6107,43,0,0,4,0],[6107,25,6107,43,0,0,4,1],[6112,25,6112,34,0,0,4,0],[6112,25,6112,34,0,0,4,1],[6117,21,6117,30,0,0,4,0],[6119,21,6119,23,0,0,4,1],[6124,9,6124,31,0,0,4,0],[6124,9,6124,31,0,0,4,1],[6130,17,6130,45,0,0,4,0],[6130,17,6130,45,0,0,4,1],[6132,21,6132,59,0,0,4,1],[6137,9,6137,31,0,0,4,1],[6150,9,6150,32,0,0,4,0],[6150,9,6150,32,0,0,4,1],[6156,17,6156,45,0,0,4,0],[6156,17,6156,45,0,0,4,1],[6158,21,6158,59,0,0,4,0],[6158,21,6158,59,0,0,4,1],[6163,9,6163,32,0,0,4,1],[6176,9,6176,32,0,0,4,0],[6176,9,6176,32,0,0,4,1],[6182,17,6182,45,0,0,4,0],[6182,17,6182,45,0,0,4,1],[6184,21,6184,59,0,0,4,0],[6184,21,6184,59,0,0,4,1],[6189,9,6189,32,0,0,4,1],[6202,9,6202,32,0,0,4,0],[6202,9,6202,32,0,0,4,1],[6208,17,6208,45,0,0,4,0],[6208,17,6208,45,0,0,4,1],[6210,21,6210,59,0,0,4,1],[6215,9,6215,32,0,0,4,1],[6228,9,6228,31,0,0,4,0],[6228,9,6228,31,0,0,4,1],[6234,17,6234,45,0,0,4,0],[6234,17,6234,45,0,0,4,1],[6236,21,6236,59,0,0,4,0],[6236,21,6236,59,0,0,4,1],[6241,9,6241,32,0,0,4,0],[6241,9,6241,32,0,0,4,1],[6247,17,6247,45,0,0,4,0],[6247,17,6247,45,0,0,4,1],[6249,21,6249,59,0,0,4,1],[6254,9,6254,30,0,0,4,0],[6254,9,6254,30,0,0,4,1],[6260,17,6260,45,0,0,4,0],[6260,17,6260,45,0,0,4,1],[6262,21,6262,59,0,0,4,0],[6262,21,6262,59,0,0,4,1],[6267,9,6267,37,0,0,4,0],[6267,9,6267,37,0,0,4,1],[6272,17,6272,36,0,0,4,0],[6272,17,6272,36,0,0,4,1],[6281,17,6281,45,0,0,4,0],[6281,17,6281,45,0,0,4,1],[6287,21,6287,23,0,0,4,1],[6292,9,6292,34,0,0,4,0],[6292,9,6292,34,0,0,4,1],[6297,17,6297,65,0,0,4,0],[6297,17,6297,65,0,0,4,1],[6309,21,6309,49,0,0,4,0],[6309,21,6309,49,0,0,4,1],[6313,25,6313,34,0,0,4,0],[6315,25,6315,27,0,0,4,1],[6321,9,6321,34,0,0,4,1],[6350,9,6350,35,0,0,4,0],[6350,9,6350,35,0,0,4,1],[6355,17,6355,65,0,0,4,0],[6355,17,6355,65,0,0,4,1],[6367,21,6367,49,0,0,4,0],[6367,21,6367,49,0,0,4,1],[6371,25,6371,34,0,0,4,0],[6373,25,6373,27,0,0,4,1],[6379,9,6379,35,0,0,4,1],[6408,9,6408,35,0,0,4,0],[6408,9,6408,35,0,0,4,1],[6413,17,6413,65,0,0,4,0],[6413,17,6413,65,0,0,4,1],[6425,21,6425,49,0,0,4,0],[6425,21,6425,49,0,0,4,1],[6429,25,6429,34,0,0,4,0],[6431,25,6431,27,0,0,4,1],[6437,9,6437,35,0,0,4,1],[6466,9,6466,35,0,0,4,1],[6495,9,6495,35,0,0,4,1],[6524,9,6524,34,0,0,4,0],[6524,9,6524,34,0,0,4,1],[6529,17,6529,65,0,0,4,0],[6529,17,6529,65,0,0,4,1],[6541,21,6541,49,0,0,4,0],[6541,21,6541,49,0,0,4,1],[6545,25,6545,34,0,0,4,0],[6547,25,6547,27,0,0,4,1],[6555,9,6555,35,0,0,4,1],[6584,9,6584,35,0,0,4,0],[6584,9,6584,35,0,0,4,1],[6589,17,6589,40,0,0,4,0],[6589,17,6589,40,0,0,4,1],[6594,21,6594,49,0,0,4,0],[6594,21,6594,49,0,0,4,1],[6597,25,6597,34,0,0,4,0],[6597,25,6597,34,0,0,4,1],[6597,38,6597,56,0,0,4,0],[6598,25,6598,57,0,0,4,0],[6598,25,6598,57,0,0,4,1],[6609,25,6609,34,0,0,4,0],[6609,25,6609,34,0,0,4,1],[6611,25,6611,27,0,0,4,0],[6611,25,6611,27,0,0,4,1],[6617,9,6617,35,0,0,4,0],[6617,9,6617,35,0,0,4,1],[6622,17,6622,40,0,0,4,0],[6622,17,6622,40,0,0,4,1],[6627,21,6627,49,0,0,4,1],[6640,9,6640,35,0,0,4,1],[6663,9,6663,36,0,0,4,0],[6663,9,6663,36,0,0,4,1],[6668,17,6668,40,0,0,4,0],[6668,17,6668,40,0,0,4,1],[6673,21,6673,49,0,0,4,0],[6673,21,6673,49,0,0,4,1],[6678,25,6678,34,0,0,4,0],[6678,25,6678,34,0,0,4,1],[6680,25,6680,27,0,0,4,0],[6680,25,6680,27,0,0,4,1],[6686,9,6686,36,0,0,4,1],[6709,9,6709,36,0,0,4,0],[6709,9,6709,36,0,0,4,1],[6714,17,6714,40,0,0,4,0],[6714,17,6714,40,0,0,4,1],[6719,21,6719,49,0,0,4,0],[6719,21,6719,49,0,0,4,1],[6724,25,6724,34,0,0,4,0],[6724,25,6724,34,0,0,4,1],[6726,25,6726,27,0,0,4,0],[6726,25,6726,27,0,0,4,1],[6732,9,6732,36,0,0,4,1],[6755,9,6755,36,0,0,4,1],[6778,9,6778,36,0,0,4,1],[6801,9,6801,35,0,0,4,0],[6801,9,6801,35,0,0,4,1],[6806,17,6806,40,0,0,4,0],[6806,17,6806,40,0,0,4,1],[6811,21,6811,49,0,0,4,0],[6811,21,6811,49,0,0,4,1],[6816,25,6816,34,0,0,4,0],[6816,25,6816,34,0,0,4,1],[6818,25,6818,27,0,0,4,0],[6818,25,6818,27,0,0,4,1],[6824,9,6824,36,0,0,4,1],[6847,9,6847,34,0,0,4,0],[6847,9,6847,34,0,0,4,1],[6852,17,6852,40,0,0,4,0],[6852,17,6852,40,0,0,4,1],[6857,21,6857,49,0,0,4,0],[6857,21,6857,49,0,0,4,1],[6862,25,6862,34,0,0,4,0],[6862,25,6862,34,0,0,4,1],[6864,25,6864,27,0,0,4,1],[6870,9,6870,35,0,0,4,0],[6870,9,6870,35,0,0,4,1],[6876,17,6876,45,0,0,4,0],[6876,17,6876,45,0,0,4,1],[6879,21,6879,30,0,0,4,0],[6879,21,6879,30,0,0,4,1],[6879,34,6879,52,0,0,4,0],[6880,21,6880,53,0,0,4,0],[6880,21,6880,53,0,0,4,1],[6890,21,6890,30,0,0,4,0],[6890,21,6890,30,0,0,4,1],[6892,21,6892,23,0,0,4,1],[6897,9,6897,35,0,0,4,0],[6897,9,6897,35,0,0,4,1],[6903,17,6903,55,0,0,4,1],[6928,17,6928,45,0,0,4,0],[6928,17,6928,45,0,0,4,1],[6932,21,6932,30,0,0,4,0],[6932,21,6932,30,0,0,4,1],[6934,21,6934,23,0,0,4,0],[6934,21,6934,23,0,0,4,1],[6939,9,6939,35,0,0,4,0],[6939,9,6939,35,0,0,4,1],[6945,17,6945,45,0,0,4,0],[6945,17,6945,45,0,0,4,1],[6950,21,6950,30,0,0,4,0],[6950,21,6950,30,0,0,4,1],[6952,21,6952,23,0,0,4,0],[6952,21,6952,23,0,0,4,1],[6957,9,6957,36,0,0,4,0],[6957,9,6957,36,0,0,4,1],[6963,17,6963,45,0,0,4,0],[6963,17,6963,45,0,0,4,1],[6968,21,6968,30,0,0,4,0],[6968,21,6968,30,0,0,4,1],[6970,21,6970,23,0,0,4,0],[6970,21,6970,23,0,0,4,1],[6975,9,6975,36,0,0,4,0],[6975,9,6975,36,0,0,4,1],[6981,17,6981,45,0,0,4,0],[6981,17,6981,45,0,0,4,1],[6986,21,6986,30,0,0,4,0],[6986,21,6986,30,0,0,4,1],[6988,21,6988,23,0,0,4,0],[6988,21,6988,23,0,0,4,1],[6993,9,6993,36,0,0,4,0],[6993,9,6993,36,0,0,4,1],[6999,17,6999,45,0,0,4,0],[6999,17,6999,45,0,0,4,1],[7004,21,7004,30,0,0,4,0],[7004,21,7004,30,0,0,4,1],[7006,21,7006,23,0,0,4,0],[7006,21,7006,23,0,0,4,1],[7011,9,7011,36,0,0,4,0],[7011,9,7011,36,0,0,4,1],[7017,17,7017,45,0,0,4,0],[7017,17,7017,45,0,0,4,1],[7022,21,7022,30,0,0,4,0],[7022,21,7022,30,0,0,4,1],[7024,21,7024,23,0,0,4,0],[7024,21,7024,23,0,0,4,1],[7029,9,7029,36,0,0,4,0],[7029,9,7029,36,0,0,4,1],[7035,17,7035,45,0,0,4,0],[7035,17,7035,45,0,0,4,1],[7040,21,7040,30,0,0,4,0],[7040,21,7040,30,0,0,4,1],[7042,21,7042,23,0,0,4,0],[7042,21,7042,23,0,0,4,1],[7047,9,7047,36,0,0,4,0],[7047,9,7047,36,0,0,4,1],[7053,17,7053,45,0,0,4,0],[7053,17,7053,45,0,0,4,1],[7058,21,7058,30,0,0,4,0],[7058,21,7058,30,0,0,4,1],[7060,21,7060,23,0,0,4,0],[7060,21,7060,23,0,0,4,1],[7065,9,7065,35,0,0,4,0],[7065,9,7065,35,0,0,4,1],[7071,17,7071,45,0,0,4,0],[7071,17,7071,45,0,0,4,1],[7076,21,7076,30,0,0,4,0],[7076,21,7076,30,0,0,4,1],[7078,21,7078,23,0,0,4,0],[7078,21,7078,23,0,0,4,1],[7083,9,7083,36,0,0,4,0],[7083,9,7083,36,0,0,4,1],[7089,17,7089,45,0,0,4,0],[7089,17,7089,45,0,0,4,1],[7094,21,7094,30,0,0,4,0],[7094,21,7094,30,0,0,4,1],[7096,21,7096,23,0,0,4,0],[7096,21,7096,23,0,0,4,1],[7101,9,7101,34,0,0,4,0],[7101,9,7101,34,0,0,4,1],[7107,17,7107,45,0,0,4,0],[7107,17,7107,45,0,0,4,1],[7112,21,7112,30,0,0,4,0],[7112,21,7112,30,0,0,4,1],[7114,21,7114,23,0,0,4,0],[7114,21,7114,23,0,0,4,1],[7119,9,7119,16,0,0,4,1],[7123,9,7123,37,0,0,4,0],[7123,9,7123,37,0,0,4,1]],\"horAcc8\":[[347,9,347,27,0,0,4,1],[353,9,353,20,0,0,4,0],[353,9,353,20,0,0,4,1],[358,13,358,24,0,0,4,1],[371,18,371,29,0,0,4,1],[395,22,395,28,0,0,4,1],[316,9,316,16,2,0,4,1],[324,9,324,15,2,0,4,1],[326,9,326,15,2,0,4,1],[328,9,328,15,2,0,4,1],[330,9,330,15,2,0,4,0],[332,9,332,15,2,0,4,1]],\"Fax3PreDecode\":[[175,9,175,20,0,0,4,0],[175,9,175,20,0,0,4,1]],\"TIFFWriteDirectoryTagShortLong\":[[1797,9,1797,20,0,0,4,0],[1797,9,1797,20,0,0,4,1],[1802,9,1802,24,0,0,4,0],[1802,9,1802,24,0,0,4,1]],\"TIFFReadDirectory\":[[4115,9,4115,33,0,0,4,0],[4115,9,4115,33,0,0,4,1],[4128,9,4133,50,0,0,4,1],[4129,39,4130,75,0,0,4,0],[4139,9,4139,18,0,0,4,0],[4139,9,4139,18,0,0,4,1],[4149,9,4149,56,0,0,4,0],[4164,32,4164,45,0,0,4,0],[4164,32,4164,45,0,0,4,1],[4168,44,4168,57,0,0,4,0],[4168,44,4168,57,0,0,4,1],[4170,21,4170,49,0,0,4,0],[4170,21,4170,49,0,0,4,1],[4213,9,4213,11,0,0,4,0],[4213,9,4213,11,0,0,4,1],[4215,13,4215,44,0,0,4,0],[4215,13,4215,44,0,0,4,1],[4220,9,4220,11,0,0,4,0],[4220,9,4220,11,0,0,4,1],[4231,13,4231,44,0,0,4,0],[4231,13,4231,44,0,0,4,1],[4233,13,4233,41,0,0,4,0],[4233,13,4233,41,0,0,4,1],[4238,13,4238,59,0,0,4,1],[4244,13,4244,70,0,0,4,1],[4250,28,4250,41,0,0,4,0],[4250,28,4250,41,0,0,4,1],[4252,13,4252,29,0,0,4,0],[4252,13,4252,29,0,0,4,1],[4255,17,4255,34,0,0,4,0],[4255,17,4255,34,0,0,4,1],[4263,21,4267,27,0,0,4,1],[4283,13,4283,29,0,0,4,0],[4283,13,4283,29,0,0,4,1],[4286,17,4286,47,0,0,4,0],[4286,17,4286,47,0,0,4,1],[4292,21,4292,46,0,0,4,0],[4292,21,4292,46,0,0,4,1],[4293,21,4293,49,0,0,4,0],[4293,21,4293,49,0,0,4,1],[4294,21,4294,45,0,0,4,0],[4294,21,4294,45,0,0,4,1],[4295,21,4295,48,0,0,4,0],[4295,21,4295,48,0,0,4,1],[4298,21,4298,44,0,0,4,0],[4298,21,4298,44,0,0,4,1],[4299,21,4299,45,0,0,4,0],[4299,21,4299,45,0,0,4,1],[4300,21,4300,44,0,0,4,0],[4300,21,4300,44,0,0,4,1],[4301,21,4301,44,0,0,4,0],[4301,21,4301,44,0,0,4,1],[4302,21,4302,43,0,0,4,0],[4302,21,4302,43,0,0,4,1],[4303,21,4303,43,0,0,4,0],[4303,21,4303,43,0,0,4,1],[4304,21,4304,46,0,0,4,0],[4304,21,4304,46,0,0,4,1],[4305,21,4305,46,0,0,4,0],[4305,21,4305,46,0,0,4,1],[4306,21,4306,46,0,0,4,0],[4306,21,4306,46,0,0,4,1],[4307,29,4307,60,0,0,4,0],[4307,29,4307,60,0,0,4,1],[4311,21,4311,28,0,0,4,0],[4311,21,4311,28,0,0,4,1],[4312,29,4312,79,0,0,4,0],[4312,29,4312,79,0,0,4,1],[4327,9,4327,59,0,0,4,0],[4327,9,4327,59,0,0,4,1],[4328,9,4328,64,0,0,4,0],[4328,9,4328,64,0,0,4,1],[4330,13,4330,35,0,0,4,1],[4334,13,4334,22,0,0,4,0],[4334,13,4334,22,0,0,4,1],[4334,26,4334,47,0,0,4,0],[4334,26,4334,47,0,0,4,1],[4338,17,4338,26,0,0,4,0],[4338,17,4338,26,0,0,4,1],[4338,30,4338,51,0,0,4,0],[4338,30,4338,51,0,0,4,1],[4350,9,4350,22,0,0,4,0],[4350,9,4350,22,0,0,4,1],[4359,28,4359,41,0,0,4,0],[4359,28,4359,41,0,0,4,1],[4361,13,4361,29,0,0,4,0],[4361,13,4361,29,0,0,4,1],[4365,17,4365,44,0,0,4,0],[4365,17,4365,44,0,0,4,1],[4366,17,4366,44,0,0,4,0],[4366,17,4366,44,0,0,4,1],[4367,17,4367,43,0,0,4,0],[4367,17,4367,43,0,0,4,1],[4368,17,4368,38,0,0,4,0],[4368,17,4368,38,0,0,4,1],[4369,17,4369,42,0,0,4,0],[4369,17,4369,42,0,0,4,1],[4384,29,4384,60,0,0,4,0],[4384,29,4384,60,0,0,4,1],[4387,29,4387,57,0,0,4,0],[4387,29,4387,57,0,0,4,1],[4392,33,4392,36,0,0,4,0],[4395,29,4395,68,0,0,4,0],[4395,29,4395,68,0,0,4,1],[4397,29,4397,66,0,0,4,0],[4397,29,4397,66,0,0,4,1],[4401,17,4401,45,0,0,4,0],[4401,17,4401,45,0,0,4,1],[4402,17,4402,45,0,0,4,0],[4402,17,4402,45,0,0,4,1],[4409,25,4410,66,0,0,4,0],[4409,25,4410,66,0,0,4,1],[4414,25,4414,53,0,0,4,0],[4414,25,4414,53,0,0,4,1],[4419,29,4419,32,0,0,4,0],[4427,25,4427,27,0,0,4,1],[4431,17,4431,42,0,0,4,0],[4431,17,4431,42,0,0,4,1],[4432,17,4432,41,0,0,4,0],[4432,17,4432,41,0,0,4,1],[4435,25,4435,40,0,0,4,0],[4435,25,4435,40,0,0,4,1],[4436,25,4436,39,0,0,4,0],[4436,25,4436,39,0,0,4,1],[4437,25,4437,40,0,0,4,0],[4437,25,4437,40,0,0,4,1],[4439,25,4439,32,0,0,4,0],[4439,25,4439,32,0,0,4,1],[4442,35,4442,58,0,0,4,1],[4449,37,4449,40,0,0,4,0],[4456,17,4456,45,0,0,4,0],[4456,17,4456,45,0,0,4,1],[4457,17,4457,44,0,0,4,0],[4457,17,4457,44,0,0,4,1],[4460,25,4460,40,0,0,4,0],[4460,25,4460,40,0,0,4,1],[4461,25,4461,39,0,0,4,0],[4461,25,4461,39,0,0,4,1],[4462,25,4462,40,0,0,4,0],[4462,25,4462,40,0,0,4,1],[4464,25,4464,32,0,0,4,0],[4464,25,4464,32,0,0,4,1],[4467,35,4467,58,0,0,4,1],[4474,37,4474,40,0,0,4,0],[4481,17,4481,38,0,0,4,0],[4481,17,4481,38,0,0,4,1],[4482,17,4482,46,0,0,4,0],[4482,17,4482,46,0,0,4,1],[4496,25,4496,44,0,0,4,0],[4496,25,4496,44,0,0,4,1],[4502,29,4502,32,0,0,4,0],[4508,25,4508,59,0,0,4,0],[4508,25,4508,59,0,0,4,1],[4514,29,4514,32,0,0,4,0],[4519,25,4519,67,0,0,4,0],[4519,25,4519,67,0,0,4,1],[4520,25,4520,69,0,0,4,0],[4520,25,4520,69,0,0,4,1],[4530,25,4530,66,0,0,4,0],[4530,25,4530,66,0,0,4,1],[4534,25,4534,53,0,0,4,0],[4534,25,4534,53,0,0,4,1],[4539,29,4539,32,0,0,4,0],[4551,17,4551,42,0,0,4,1],[4621,17,4621,24,0,0,4,0],[4621,17,4621,24,0,0,4,1],[4644,9,4644,57,0,0,4,0],[4644,9,4644,57,0,0,4,1],[4646,13,4646,26,0,0,4,0],[4646,13,4646,26,0,0,4,1],[4651,17,4651,75,0,0,4,1],[4654,18,4654,64,0,0,4,0],[4654,18,4654,64,0,0,4,1],[4661,13,4661,26,0,0,4,0],[4661,13,4661,26,0,0,4,1],[4666,17,4666,61,0,0,4,1],[4669,13,4669,26,0,0,4,0],[4669,13,4669,26,0,0,4,1],[4671,17,4671,63,0,0,4,1],[4679,17,4679,65,0,0,4,0],[4679,17,4679,65,0,0,4,1],[4684,21,4684,67,0,0,4,1],[4687,22,4687,77,0,0,4,0],[4687,22,4687,77,0,0,4,1],[4688,22,4688,77,0,0,4,0],[4688,22,4688,77,0,0,4,1],[4694,21,4694,67,0,0,4,1],[4705,9,4705,22,0,0,4,0],[4705,9,4705,22,0,0,4,1],[4718,9,4718,33,0,0,4,0],[4718,9,4718,33,0,0,4,1],[4725,9,4725,62,0,0,4,0],[4725,9,4725,62,0,0,4,1],[4727,9,4727,22,0,0,4,0],[4727,9,4727,22,0,0,4,1],[4730,13,4730,63,0,0,4,0],[4730,13,4730,63,0,0,4,1],[4731,13,4731,32,0,0,4,0],[4731,13,4731,32,0,0,4,1],[4731,36,4731,66,0,0,4,0],[4731,36,4731,66,0,0,4,1],[4751,9,4751,32,0,0,4,1],[4764,14,4764,54,0,0,4,0],[4766,13,4766,60,0,0,4,0],[4766,13,4766,60,0,0,4,1],[4768,17,4770,69,0,0,4,0],[4768,17,4770,69,0,0,4,1],[4775,13,4775,63,0,0,4,0],[4775,13,4775,63,0,0,4,1],[4777,17,4779,80,0,0,4,0],[4777,17,4779,80,0,0,4,1],[4791,9,4791,23,0,0,4,0],[4791,9,4791,23,0,0,4,1],[4792,9,4793,27,0,0,4,0],[4792,9,4793,27,0,0,4,1],[4812,13,4812,28,0,0,4,1],[4822,13,4822,33,0,0,4,0],[4822,13,4822,33,0,0,4,1],[4833,9,4833,59,0,0,4,0],[4833,9,4833,59,0,0,4,1],[4834,9,4834,22,0,0,4,0],[4834,9,4834,22,0,0,4,1],[4836,13,4836,47,0,0,4,0],[4836,13,4836,47,0,0,4,1],[4837,13,4837,49,0,0,4,0],[4837,13,4837,49,0,0,4,1],[4839,18,4839,52,0,0,4,0],[4839,18,4839,52,0,0,4,1],[4852,9,4852,57,0,0,4,0],[4852,9,4852,57,0,0,4,1],[4857,13,4857,26,0,0,4,0],[4857,13,4857,26,0,0,4,1],[4864,18,4864,69,0,0,4,0],[4864,18,4864,69,0,0,4,1],[4865,18,4865,45,0,0,4,0],[4865,18,4865,45,0,0,4,1],[4866,18,4866,71,0,0,4,0],[4866,18,4866,71,0,0,4,1],[4867,18,4868,63,0,0,4,0],[4867,18,4868,63,0,0,4,1],[4877,17,4877,64,0,0,4,0],[4877,17,4877,64,0,0,4,1],[4880,18,4880,46,0,0,4,0],[4880,18,4880,46,0,0,4,1],[4881,18,4881,50,0,0,4,0],[4881,18,4881,50,0,0,4,1],[4881,54,4881,76,0,0,4,0],[4881,54,4881,76,0,0,4,1],[4892,17,4892,64,0,0,4,0],[4892,17,4892,64,0,0,4,1],[4895,18,4895,58,0,0,4,0],[4896,18,4896,69,0,0,4,0],[4896,18,4896,69,0,0,4,1],[4897,18,4897,45,0,0,4,0],[4897,18,4897,45,0,0,4,1],[4898,18,4898,65,0,0,4,0],[4898,18,4898,65,0,0,4,1],[4899,18,4900,52,0,0,4,0],[4899,18,4900,52,0,0,4,1],[4901,18,4901,53,0,0,4,0],[4901,18,4901,53,0,0,4,1],[4902,18,4902,53,0,0,4,0],[4902,18,4902,53,0,0,4,1],[4917,17,4917,64,0,0,4,1],[4921,9,4921,12,0,0,4,0],[4926,9,4926,22,0,0,4,0],[4926,9,4926,22,0,0,4,1],[4928,13,4928,48,0,0,4,0],[4928,13,4928,48,0,0,4,1],[4972,9,4972,62,0,0,4,0],[4972,9,4972,62,0,0,4,1],[4973,9,4973,39,0,0,4,0],[4973,9,4973,39,0,0,4,1],[4974,9,4974,58,0,0,4,0],[4974,9,4974,58,0,0,4,1],[4975,9,4975,79,0,0,4,0],[4975,9,4975,79,0,0,4,1],[4983,9,4983,60,0,0,4,0],[4983,9,4983,60,0,0,4,1],[4984,9,4984,56,0,0,4,0],[4984,9,4984,56,0,0,4,1],[4985,9,4985,77,0,0,4,0],[4985,9,4985,77,0,0,4,1],[4986,9,4986,44,0,0,4,0],[4986,9,4986,44,0,0,4,1],[5007,9,5007,31,0,0,4,0],[5007,9,5007,31,0,0,4,1],[5016,13,5016,31,0,0,4,0],[5016,13,5016,31,0,0,4,1],[5024,13,5024,32,0,0,4,0],[5024,13,5024,32,0,0,4,1],[5032,9,5032,12,0,0,4,0],[250,22,250,62,87,0,4,0],[250,22,250,62,87,0,4,1],[250,22,250,62,93,0,4,0],[250,22,250,62,93,0,4,1],[250,22,250,62,120,0,4,0],[250,22,250,62,120,0,4,1]],\"TIFFReadDirEntryIfd8\":[[1179,9,1179,34,0,0,4,0],[1179,9,1179,34,0,0,4,1],[1183,9,1183,23,0,0,4,0],[1183,9,1183,23,0,0,4,1],[1184,9,1184,22,0,0,4,0],[1184,9,1184,22,0,0,4,1],[1191,9,1191,24,0,0,4,0],[1191,9,1191,24,0,0,4,1],[1192,9,1192,23,0,0,4,0],[1192,9,1192,23,0,0,4,1],[1195,9,1195,16,0,0,4,0],[1195,9,1195,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteShort\":[[3575,9,3575,21,0,0,4,0],[3575,9,3575,21,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Slong8\":[[3892,9,3892,18,0,0,4,0],[3892,9,3892,18,0,0,4,1]],\"JPEGFixupTagsSubsamplingReadWord\":[[1059,9,1059,53,0,0,4,0],[1059,9,1059,53,0,0,4,1],[1061,9,1061,53,0,0,4,0],[1061,9,1061,53,0,0,4,1]],\"PixarLogPreDecode\":[[826,9,826,56,0,0,4,1]],\"OJPEGDecodeRaw\":[[906,9,906,37,0,0,4,0],[906,9,906,37,0,0,4,1],[916,13,916,47,0,0,4,0],[916,13,916,47,0,0,4,1],[918,17,921,71,0,0,4,0],[918,17,921,71,0,0,4,1],[935,21,935,60,0,0,4,0],[935,21,935,60,0,0,4,1],[938,26,938,50,0,0,4,0],[938,26,938,50,0,0,4,1],[940,30,940,54,0,0,4,0],[940,30,940,54,0,0,4,1],[949,13,949,76,0,0,4,0],[949,13,949,76,0,0,4,1],[953,14,953,19,0,0,4,0],[953,14,953,19,0,0,4,1]],\"EstimateStripByteCounts\":[[5266,9,5266,42,0,0,4,1],[5269,9,5269,32,0,0,4,0],[5269,9,5269,32,0,0,4,1],[5273,9,5273,40,0,0,4,1],[5276,9,5276,47,0,0,4,0],[5276,9,5276,47,0,0,4,1],[5282,13,5282,45,0,0,4,0],[5287,38,5287,43,0,0,4,0],[5287,38,5287,43,0,0,4,1],[5292,17,5292,31,0,0,4,0],[5292,17,5292,31,0,0,4,1],[5300,17,5300,56,0,0,4,1],[5303,17,5303,49,0,0,4,0],[5305,21,5305,34,0,0,4,0],[5305,21,5305,34,0,0,4,1],[5313,17,5313,46,0,0,4,1],[5317,13,5317,29,0,0,4,0],[5317,13,5317,29,0,0,4,1],[5322,13,5322,57,0,0,4,0],[5322,13,5322,57,0,0,4,1],[5324,25,5324,47,0,0,4,0],[5324,25,5324,47,0,0,4,1],[5334,13,5335,56,0,0,4,0],[5334,13,5335,56,0,0,4,1],[5337,13,5338,21,0,0,4,0],[5337,13,5338,21,0,0,4,1],[5340,17,5340,56,0,0,4,0],[5340,17,5340,56,0,0,4,1],[5356,25,5356,47,0,0,4,0],[5356,25,5356,47,0,0,4,1],[5363,25,5363,47,0,0,4,0],[5363,25,5363,47,0,0,4,1],[5365,17,5365,29,0,0,4,0],[5365,17,5365,29,0,0,4,1],[5365,33,5365,69,0,0,4,0],[5365,33,5365,69,0,0,4,1],[5371,9,5371,22,0,0,4,0],[5371,9,5371,22,0,0,4,1],[250,22,250,62,6,0,4,0],[250,22,250,62,6,0,4,1]],\"TIFFVSetField\":[[1207,12,1207,35,0,0,4,0]],\"OJPEGReadSkip\":[[2380,9,2380,31,0,0,4,0],[2380,9,2380,31,0,0,4,1],[2385,9,2385,14,0,0,4,0],[2385,9,2385,14,0,0,4,1],[2389,13,2389,50,0,0,4,0],[2389,13,2389,50,0,0,4,1]],\"TIFFReadDirEntrySshortArray\":[[1930,9,1930,23,0,0,4,1],[1931,9,1931,24,0,0,4,1],[1932,9,1932,24,0,0,4,1],[1933,9,1933,25,0,0,4,0],[1934,9,1934,23,0,0,4,1],[1935,9,1935,24,0,0,4,1],[1936,9,1936,24,0,0,4,1],[1937,9,1937,25,0,0,4,1],[1939,9,1939,16,0,0,4,1],[1943,9,1943,39,0,0,4,0],[1943,9,1943,39,0,0,4,1],[1943,43,1943,58,0,0,4,0],[1943,43,1943,58,0,0,4,1],[1948,13,1948,32,0,0,4,1],[1950,9,1950,24,0,0,4,1],[1970,9,1970,25,0,0,4,0],[1972,17,1972,43,0,0,4,0],[1972,17,1972,43,0,0,4,1]],\"TIFFDefaultDirectory\":[[1785,9,1785,35,0,0,4,1],[1798,9,1798,22,0,0,4,1]],\"PredictorSetup\":[[68,9,68,28,0,0,4,0],[68,9,68,28,0,0,4,1],[70,9,70,34,0,0,4,0],[70,9,70,34,0,0,4,1],[71,17,71,42,0,0,4,0],[71,17,71,42,0,0,4,1],[71,46,71,72,0,0,4,0],[71,46,71,72,0,0,4,1],[72,17,72,43,0,0,4,0],[72,47,72,73,0,0,4,0],[81,9,81,37,0,0,4,1],[102,9,102,16,0,0,4,0],[102,9,102,16,0,0,4,1],[108,10,108,52,0,0,4,0],[108,10,108,52,0,0,4,1],[117,9,117,25,0,0,4,1],[250,22,250,62,7,0,4,0]],\"TryChopUpUncompressedBigTiff\":[[7413,9,7413,44,0,0,4,0],[7413,9,7413,44,0,0,4,1],[7413,48,7413,73,0,0,4,1],[7416,9,7416,50,0,0,4,0],[7416,9,7416,50,0,0,4,1],[7416,54,7416,73,0,0,4,0],[7421,9,7421,27,0,0,4,1],[7421,31,7421,59,0,0,4,0],[7421,31,7421,59,0,0,4,1],[7428,17,7428,35,0,0,4,0],[7428,17,7428,35,0,0,4,1],[7430,13,7430,36,0,0,4,0],[7430,13,7430,36,0,0,4,1],[7432,17,7434,79,0,0,4,1],[7441,17,7441,60,0,0,4,0],[7441,17,7441,60,0,0,4,1],[7445,17,7445,22,0,0,4,0],[7445,17,7445,22,0,0,4,1],[7445,26,7447,68,0,0,4,0],[7456,9,7456,31,0,0,4,0],[7456,9,7456,31,0,0,4,1],[7463,9,7463,21,0,0,4,1],[7468,9,7468,34,0,0,4,0],[7468,38,7468,55,0,0,4,0],[7468,38,7468,55,0,0,4,1],[7474,13,7474,35,0,0,4,0],[7474,13,7474,35,0,0,4,1],[7474,39,7474,78,0,0,4,0],[282,6,282,54,3,0,4,0]],\"Fax3PrematureEOF\":[[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFWriteDirectoryTagData\":[[2874,12,2874,23,0,0,4,0],[2874,12,2874,23,0,0,4,1],[2877,13,2877,34,0,0,4,0],[2877,13,2877,34,0,0,4,1],[2881,9,2881,20,0,0,4,0],[2881,9,2881,20,0,0,4,1],[2884,25,2884,30,0,0,4,0],[2884,25,2884,30,0,0,4,1],[2891,9,2891,70,0,0,4,0],[2891,9,2891,70,0,0,4,1],[2891,24,2891,55,0,0,4,1],[2893,13,2893,17,0,0,4,0],[2893,21,2893,31,0,0,4,0],[2903,13,2903,45,0,0,4,0],[2905,13,2905,22,0,0,4,1],[2905,26,2905,43,0,0,4,1],[2910,13,2910,20,0,0,4,1],[2915,13,2915,39,0,0,4,1],[2922,13,2922,21,0,0,4,1],[2928,13,2928,33,0,0,4,1],[2930,13,2930,45,0,0,4,0],[2934,17,2934,43,0,0,4,1]],\"TIFFFillTile\":[[1190,9,1190,47,0,0,4,0],[1190,9,1190,47,0,0,4,1],[1193,13,1193,27,0,0,4,0],[1193,13,1193,27,0,0,4,1],[1193,31,1193,67,0,0,4,0],[1193,31,1193,67,0,0,4,1],[1204,13,1204,36,0,0,4,0],[1204,13,1204,36,0,0,4,1],[1209,17,1209,31,0,0,4,0],[1209,35,1209,80,0,0,4,0],[1209,35,1209,80,0,0,4,1],[1278,17,1278,50,0,0,4,1],[1283,17,1283,50,0,0,4,0],[1283,17,1283,50,0,0,4,1],[1286,21,1286,58,0,0,4,1],[1294,17,1294,49,0,0,4,1],[1317,21,1318,31,0,0,4,0],[1317,21,1318,31,0,0,4,1],[1327,17,1327,41,0,0,4,0],[1328,17,1328,29,0,0,4,0],[1328,17,1328,29,0,0,4,1],[1329,17,1329,54,0,0,4,0],[1329,17,1329,54,0,0,4,1],[251,23,251,62,3,0,4,1],[251,23,251,62,5,0,4,1],[251,23,251,62,16,0,4,1]],\"ZIPSetupDecode\":[[107,9,107,39,0,0,4,1],[116,9,116,46,0,0,4,0],[117,9,117,41,0,0,4,1]],\"TIFFFieldSetGetSize\":[[685,9,685,20,0,0,4,1],[690,9,690,35,0,0,4,1],[691,9,691,31,0,0,4,0],[691,9,691,31,0,0,4,1],[692,9,692,34,0,0,4,1],[693,9,693,35,0,0,4,1],[694,9,694,35,0,0,4,0],[694,9,694,35,0,0,4,1],[695,9,695,31,0,0,4,1],[697,9,697,31,0,0,4,0],[697,9,697,31,0,0,4,1],[698,9,698,31,0,0,4,1],[699,9,699,34,0,0,4,0],[699,9,699,34,0,0,4,1],[700,9,700,34,0,0,4,1],[701,9,701,35,0,0,4,1],[702,9,702,35,0,0,4,1],[703,9,703,35,0,0,4,0],[703,9,703,35,0,0,4,1],[704,9,704,35,0,0,4,0],[704,9,704,35,0,0,4,1],[706,9,706,32,0,0,4,0],[706,9,706,32,0,0,4,1],[707,9,707,32,0,0,4,1],[708,9,708,35,0,0,4,0],[708,9,708,35,0,0,4,1],[709,9,709,35,0,0,4,1],[710,9,710,36,0,0,4,0],[710,9,710,36,0,0,4,1],[711,9,711,36,0,0,4,1],[712,9,712,36,0,0,4,0],[712,9,712,36,0,0,4,1],[713,9,713,36,0,0,4,0],[713,9,713,36,0,0,4,1],[715,9,715,29,0,0,4,1],[716,9,716,32,0,0,4,0],[716,9,716,32,0,0,4,1],[717,9,717,32,0,0,4,1],[718,9,718,31,0,0,4,0],[718,9,718,31,0,0,4,1],[719,9,719,37,0,0,4,0],[719,9,719,37,0,0,4,1],[720,9,720,35,0,0,4,0],[720,9,720,35,0,0,4,1],[721,9,721,35,0,0,4,1],[722,9,722,34,0,0,4,0],[722,9,722,34,0,0,4,1],[723,9,723,36,0,0,4,0],[723,9,723,36,0,0,4,1],[724,9,724,36,0,0,4,1],[725,9,725,35,0,0,4,0],[725,9,725,35,0,0,4,1],[726,9,726,36,0,0,4,0],[726,9,726,36,0,0,4,1],[727,9,727,36,0,0,4,0],[727,9,727,36,0,0,4,1],[728,9,728,35,0,0,4,0],[728,9,728,35,0,0,4,1],[730,9,730,32,0,0,4,1],[731,9,731,32,0,0,4,1],[732,9,732,32,0,0,4,0],[732,9,732,32,0,0,4,1],[733,9,733,30,0,0,4,0],[733,9,733,30,0,0,4,1],[734,9,734,35,0,0,4,1],[735,9,735,35,0,0,4,1],[736,9,736,35,0,0,4,1],[737,9,737,33,0,0,4,1],[738,9,738,36,0,0,4,1],[739,9,739,36,0,0,4,1],[740,9,740,36,0,0,4,1],[741,9,741,34,0,0,4,1],[742,9,742,36,0,0,4,0],[742,9,742,36,0,0,4,1],[743,9,743,36,0,0,4,0],[743,9,743,36,0,0,4,1],[744,9,744,36,0,0,4,0],[744,9,744,36,0,0,4,1],[745,9,745,34,0,0,4,0],[745,9,745,34,0,0,4,1],[747,9,747,16,0,0,4,1]],\"TIFFReadDirectoryFindEntry\":[[5065,26,5065,38,0,0,4,0],[5065,26,5065,38,0,0,4,1],[5067,13,5067,33,0,0,4,0],[5067,13,5067,33,0,0,4,1]],\"TIFFReadDirEntryDataAndRealloc\":[[1218,9,1218,16,0,0,4,0],[1218,9,1218,16,0,0,4,1],[1227,12,1227,31,0,0,4,0],[1227,12,1227,31,0,0,4,1],[1233,13,1233,33,0,0,4,0],[1233,13,1233,33,0,0,4,1],[1233,37,1233,62,0,0,4,0],[1242,13,1242,29,0,0,4,1],[1256,13,1256,34,0,0,4,0],[1256,13,1256,34,0,0,4,1]],\"OJPEGWriteHeaderInfo\":[[1322,9,1322,40,0,0,4,1],[1332,9,1333,60,0,0,4,1],[1348,9,1349,10,0,0,4,0],[1348,9,1349,10,0,0,4,1],[1351,9,1351,72,0,0,4,0],[1351,9,1351,72,0,0,4,1],[1352,9,1352,46,0,0,4,0],[1359,13,1359,45,0,0,4,0],[1364,17,1364,41,0,0,4,1],[1364,45,1364,69,0,0,4,1],[1393,17,1393,54,0,0,4,1],[1408,17,1408,56,0,0,4,1],[1420,25,1420,59,0,0,4,0],[1420,25,1420,59,0,0,4,1],[1423,25,1423,59,0,0,4,0],[1423,25,1423,59,0,0,4,1],[1426,25,1426,59,0,0,4,0],[1426,25,1426,59,0,0,4,1],[1431,18,1431,63,0,0,4,0],[1439,18,1439,64,0,0,4,1],[1451,9,1452,80,0,0,4,0],[1451,9,1452,80,0,0,4,1],[1454,9,1454,75,0,0,4,1],[1463,9,1464,32,0,0,4,1],[1465,9,1466,32,0,0,4,1]],\"TIFFReadDirEntryCheckedShort\":[[3342,9,3342,35,0,0,4,0],[3342,9,3342,35,0,0,4,1]],\"TIFFReadDirEntryCheckedLong8\":[[3373,9,3373,41,0,0,4,0],[3377,13,3377,39,0,0,4,0],[3377,13,3377,39,0,0,4,1],[3380,13,3380,41,0,0,4,0],[3380,13,3380,41,0,0,4,1],[3385,9,3385,35,0,0,4,0],[3385,9,3385,35,0,0,4,1]],\"OJPEGWriteStreamCompressed\":[[2612,9,2612,32,0,0,4,0],[2614,13,2614,41,0,0,4,0],[2614,13,2614,41,0,0,4,1],[2621,9,2621,37,0,0,4,0],[2625,13,2625,29,0,0,4,0],[2626,21,2626,75,0,0,4,0],[2631,13,2631,26,0,0,4,1],[2634,13,2634,20,0,0,4,1]],\"TIFFReadAndRealloc\":[[85,12,85,31,0,0,4,0],[85,12,85,31,0,0,4,1],[90,13,90,33,0,0,4,0],[90,13,90,33,0,0,4,1],[90,37,90,62,0,0,4,0],[91,13,91,75,0,0,4,0],[97,13,97,75,0,0,4,0],[97,13,97,75,0,0,4,1],[103,17,103,42,0,0,4,1],[110,17,110,33,0,0,4,1],[122,13,122,37,0,0,4,1],[131,13,131,34,0,0,4,0],[131,13,131,34,0,0,4,1],[135,17,135,25,0,0,4,1]],\"PixarLogCleanup\":[[1479,9,1479,20,0,0,4,0],[1481,9,1481,19,0,0,4,0],[1483,9,1483,18,0,0,4,0],[1485,9,1485,22,0,0,4,0],[1487,9,1487,23,0,0,4,0],[1489,9,1489,22,0,0,4,0],[1491,9,1491,33,0,0,4,0],[1491,9,1491,33,0,0,4,1],[1493,13,1493,38,0,0,4,0],[1498,9,1498,17,0,0,4,0],[1498,9,1498,17,0,0,4,1]],\"TIFFFlushData1\":[[928,9,928,27,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSlong\":[[3809,9,3809,18,0,0,4,0],[3809,9,3809,18,0,0,4,1]],\"TIFFFetchStripThing\":[[7142,9,7142,37,0,0,4,0],[7142,9,7142,37,0,0,4,1],[7146,35,7146,38,0,0,4,0],[7149,9,7149,44,0,0,4,0],[7149,9,7149,44,0,0,4,1],[7155,13,7155,19,0,0,4,1],[7158,35,7158,38,0,0,4,0],[7161,13,7161,34,0,0,4,0],[7161,13,7161,34,0,0,4,1],[7169,13,7169,29,0,0,4,1],[7174,13,7174,28,0,0,4,0],[7174,13,7174,28,0,0,4,1]],\"PixarLogSetupDecode\":[[752,9,752,40,0,0,4,1],[756,9,756,42,0,0,4,1],[766,10,766,52,0,0,4,0],[766,10,766,52,0,0,4,1],[773,9,773,23,0,0,4,1],[777,9,777,25,0,0,4,1],[780,9,780,52,0,0,4,0],[782,9,782,52,0,0,4,0],[782,9,782,52,0,0,4,1],[794,9,794,41,0,0,4,1]],\"TIFFReverseBits\":[[312,12,312,17,0,0,4,0],[312,12,312,17,0,0,4,1],[324,12,324,19,0,0,4,0],[324,12,324,19,0,0,4,1]],\"TIFFWriteCheck\":[[602,9,602,34,0,0,4,1],[607,9,607,24,0,0,4,1],[627,9,627,22,0,0,4,1],[633,9,633,46,0,0,4,0],[633,50,633,71,0,0,4,1],[643,13,643,35,0,0,4,1],[649,9,649,35,0,0,4,1],[653,9,653,56,0,0,4,1],[250,22,250,62,4,0,4,0]],\"TIFFReadDirEntryCheckedLong\":[[3358,9,3358,35,0,0,4,0],[3358,9,3358,35,0,0,4,1]],\"PixarLogVSetField\":[[1514,9,1514,37,0,0,4,1],[1527,9,1527,37,0,0,4,1],[1567,9,1567,16,0,0,4,0]],\"_TIFFcalloc\":[[331,9,331,19,0,0,4,1],[331,23,331,31,0,0,4,1]],\"ZIPDecode\":[[251,32,251,71,0,0,4,0],[255,13,255,40,0,0,4,0],[262,13,262,34,0,0,4,1],[264,13,264,34,0,0,4,0],[60,23,60,47,5,0,4,1]],\"OJPEGPreDecodeSkipRaw\":[[797,9,797,43,0,0,4,1],[810,12,810,47,0,0,4,0],[810,12,810,47,0,0,4,1],[812,13,814,67,0,0,4,0],[812,13,814,67,0,0,4,1],[818,9,818,14,0,0,4,1]],\"TIFFErrorExtR\":[[110,9,110,12,0,0,4,0],[110,16,110,37,0,0,4,1],[119,9,119,26,0,0,4,0],[125,9,125,29,0,0,4,1]],\"OJPEGWriteStreamDri\":[[2526,9,2526,34,0,0,4,0],[2526,9,2526,34,0,0,4,1]],\"TIFFInitZIP\":[[670,9,670,69,0,0,4,1],[681,9,681,30,0,0,4,1]],\"TIFFScanlineSize64\":[[250,9,250,51,0,0,4,0],[250,9,250,51,0,0,4,1],[252,13,252,54,0,0,4,0],[252,13,252,54,0,0,4,1],[253,13,253,42,0,0,4,0],[253,13,253,42,0,0,4,1],[253,46,253,65,0,0,4,0],[260,17,260,44,0,0,4,1],[267,18,267,44,0,0,4,0],[267,18,267,44,0,0,4,1],[267,48,267,74,0,0,4,0],[267,48,267,74,0,0,4,1],[268,18,268,44,0,0,4,0],[268,18,268,44,0,0,4,1],[269,18,269,44,0,0,4,0],[269,18,269,44,0,0,4,1],[269,48,269,74,0,0,4,0],[269,48,269,74,0,0,4,1],[270,18,270,44,0,0,4,0],[270,18,270,44,0,0,4,1],[305,9,305,27,0,0,4,0],[305,9,305,27,0,0,4,1],[282,6,282,54,5,0,4,0],[282,6,282,54,5,0,4,1]],\"TIFFWriteDirectoryTagCheckedLong\":[[2286,9,2286,35,0,0,4,1]],\"LogLuvVSetField\":[[1702,9,1702,35,0,0,4,1],[1744,9,1744,34,0,0,4,1],[1755,9,1755,16,0,0,4,0]],\"TIFFReadDirEntryLongArray\":[[2098,9,2098,23,0,0,4,0],[2098,9,2098,23,0,0,4,1],[2099,9,2099,24,0,0,4,0],[2099,9,2099,24,0,0,4,1],[2100,9,2100,24,0,0,4,0],[2100,9,2100,24,0,0,4,1],[2101,9,2101,25,0,0,4,0],[2101,9,2101,25,0,0,4,1],[2102,9,2102,23,0,0,4,0],[2102,9,2102,23,0,0,4,1],[2103,9,2103,24,0,0,4,0],[2103,9,2103,24,0,0,4,1],[2104,9,2104,24,0,0,4,0],[2104,9,2104,24,0,0,4,1],[2105,9,2105,25,0,0,4,0],[2105,9,2105,25,0,0,4,1],[2107,9,2107,16,0,0,4,0],[2107,9,2107,16,0,0,4,1],[2111,9,2111,39,0,0,4,0],[2111,9,2111,39,0,0,4,1],[2111,43,2111,58,0,0,4,0],[2111,43,2111,58,0,0,4,1],[2116,13,2116,32,0,0,4,0],[2116,13,2116,32,0,0,4,1],[2118,9,2118,23,0,0,4,0],[2118,9,2118,23,0,0,4,1],[2120,17,2120,43,0,0,4,0],[2120,17,2120,43,0,0,4,1],[2123,9,2123,24,0,0,4,0],[2123,9,2123,24,0,0,4,1],[2128,25,2128,34,0,0,4,0],[2128,25,2128,34,0,0,4,1],[2130,21,2130,47,0,0,4,0],[2130,21,2130,47,0,0,4,1],[2133,21,2133,49,0,0,4,0],[2133,21,2133,49,0,0,4,1],[2145,9,2145,18,0,0,4,1],[2150,13,2150,32,0,0,4,1],[2152,9,2152,23,0,0,4,0],[2152,9,2152,23,0,0,4,1],[2159,25,2159,34,0,0,4,0],[2159,25,2159,34,0,0,4,1],[2163,9,2163,24,0,0,4,0],[2163,9,2163,24,0,0,4,1],[2170,25,2170,34,0,0,4,0],[2170,25,2170,34,0,0,4,1],[2173,21,2173,49,0,0,4,0],[2173,21,2173,49,0,0,4,1],[2179,9,2179,24,0,0,4,0],[2179,9,2179,24,0,0,4,1],[2186,25,2186,34,0,0,4,0],[2186,25,2186,34,0,0,4,1],[2188,21,2188,47,0,0,4,0],[2188,21,2188,47,0,0,4,1],[2194,9,2194,25,0,0,4,0],[2194,9,2194,25,0,0,4,1],[2201,25,2201,34,0,0,4,0],[2201,25,2201,34,0,0,4,1],[2203,21,2203,47,0,0,4,0],[2203,21,2203,47,0,0,4,1],[2206,21,2206,49,0,0,4,0],[2206,21,2206,49,0,0,4,1],[2212,9,2212,24,0,0,4,0],[2212,9,2212,24,0,0,4,1],[2219,25,2219,34,0,0,4,0],[2219,25,2219,34,0,0,4,1],[2221,21,2221,47,0,0,4,0],[2221,21,2221,47,0,0,4,1],[2224,21,2224,49,0,0,4,0],[2224,21,2224,49,0,0,4,1],[2230,9,2230,25,0,0,4,0],[2230,9,2230,25,0,0,4,1],[2237,25,2237,34,0,0,4,0],[2237,25,2237,34,0,0,4,1],[2239,21,2239,47,0,0,4,0],[2239,21,2239,47,0,0,4,1],[2242,21,2242,49,0,0,4,0],[2242,21,2242,49,0,0,4,1],[2250,9,2250,37,0,0,4,0],[2250,9,2250,37,0,0,4,1]],\"TIFFReadDirEntryCheckedSshort\":[[3350,9,3350,35,0,0,4,0],[3350,9,3350,35,0,0,4,1]],\"_TIFFFillStrilesInternal\":[[7840,9,7840,49,0,0,4,0]],\"PixarLogGuessDataFmt\":[[689,13,689,33,0,0,4,0],[689,13,689,33,0,0,4,1],[691,9,691,16,0,0,4,1],[695,9,695,16,0,0,4,0],[695,9,695,16,0,0,4,1],[696,17,696,44,0,0,4,1],[696,48,696,75,0,0,4,0],[696,48,696,75,0,0,4,1],[699,9,699,16,0,0,4,1],[703,9,703,16,0,0,4,1],[707,9,707,15,0,0,4,0],[707,9,707,15,0,0,4,1],[708,17,708,44,0,0,4,1],[708,48,708,75,0,0,4,0],[708,48,708,75,0,0,4,1]],\"_tiffSeekProc\":[[123,9,123,32,0,0,4,1]],\"OJPEGVSetField\":[[591,9,591,34,0,0,4,0],[591,9,591,34,0,0,4,1],[594,9,594,37,0,0,4,0],[594,9,594,37,0,0,4,1],[597,9,597,38,0,0,4,0],[597,9,597,38,0,0,4,1],[604,9,604,33,0,0,4,0],[604,9,604,33,0,0,4,1],[606,17,606,24,0,0,4,0],[606,17,606,24,0,0,4,1],[608,21,608,27,0,0,4,0],[608,21,608,27,0,0,4,1],[616,29,616,35,0,0,4,0],[616,29,616,35,0,0,4,1],[620,9,620,34,0,0,4,0],[620,9,620,34,0,0,4,1],[622,17,622,24,0,0,4,0],[622,17,622,24,0,0,4,1],[624,21,624,27,0,0,4,0],[624,21,624,27,0,0,4,1],[632,29,632,35,0,0,4,0],[632,29,632,35,0,0,4,1],[636,9,636,34,0,0,4,0],[636,9,636,34,0,0,4,1],[638,17,638,24,0,0,4,0],[638,17,638,24,0,0,4,1],[640,21,640,27,0,0,4,0],[640,21,640,27,0,0,4,1],[648,29,648,35,0,0,4,0],[648,29,648,35,0,0,4,1],[652,9,652,30,0,0,4,0],[652,9,652,30,0,0,4,1],[655,9,655,41,0,0,4,0],[655,9,655,41,0,0,4,1],[658,9,658,16,0,0,4,0],[658,9,658,16,0,0,4,1],[662,9,662,20,0,0,4,1]],\"TIFFFdOpenExt\":[[212,9,212,12,0,0,4,0]],\"OJPEGWriteStreamRst\":[[2648,9,2648,31,0,0,4,0],[2648,9,2648,31,0,0,4,1]],\"OJPEGReadHeaderInfo\":[[1198,9,1198,45,0,0,4,0],[1198,9,1198,45,0,0,4,1],[1208,13,1208,49,0,0,4,0],[1208,13,1208,49,0,0,4,1],[1218,13,1218,64,0,0,4,0],[1218,13,1218,64,0,0,4,1],[1223,9,1223,45,0,0,4,0],[1223,9,1223,45,0,0,4,1],[1225,14,1225,40,0,0,4,0],[1225,14,1225,40,0,0,4,1],[1225,44,1225,70,0,0,4,0],[1225,44,1225,70,0,0,4,1],[1226,14,1226,40,0,0,4,1],[1227,14,1227,40,0,0,4,0],[1227,14,1227,40,0,0,4,1],[1227,44,1227,70,0,0,4,0],[1227,44,1227,70,0,0,4,1],[1228,14,1228,40,0,0,4,1],[1233,13,1233,63,0,0,4,0],[1233,13,1233,63,0,0,4,1],[1245,9,1245,41,0,0,4,0],[1245,9,1245,41,0,0,4,1],[250,22,250,62,1,0,4,0]],\"TIFFHashSetClearInternal\":[[229,21,229,44,0,0,4,0],[229,21,229,44,0,0,4,1],[232,16,232,19,0,0,4,0],[232,16,232,19,0,0,4,1],[234,17,234,35,0,0,4,0],[234,17,234,35,0,0,4,1],[237,17,237,26,0,0,4,0]],\"OJPEGReadHeaderInfoSecTablesDcTable\":[[2079,9,2079,35,0,0,4,0],[2079,9,2079,35,0,0,4,1],[2085,17,2085,42,0,0,4,0],[2085,17,2085,42,0,0,4,1],[2087,13,2087,41,0,0,4,0],[2087,13,2087,41,0,0,4,1],[2088,14,2088,22,0,0,4,0],[2088,14,2088,22,0,0,4,1],[2088,26,2088,78,0,0,4,0],[2090,25,2090,34,0,0,4,0],[2090,25,2090,34,0,0,4,1],[2092,21,2092,67,0,0,4,1],[2101,17,2101,24,0,0,4,1],[2104,25,2104,31,0,0,4,0],[2104,25,2104,31,0,0,4,1],[2108,17,2108,24,0,0,4,1],[2119,25,2119,31,0,0,4,0],[2119,25,2119,31,0,0,4,1],[2122,17,2122,23,0,0,4,0],[2122,17,2122,23,0,0,4,1],[2127,17,2127,36,0,0,4,1]],\"PackBitsDecode\":[[245,12,245,18,0,0,4,0],[245,12,245,18,0,0,4,1],[245,22,245,29,0,0,4,0],[245,22,245,29,0,0,4,1],[249,13,249,18,0,0,4,0],[249,13,249,18,0,0,4,1],[251,17,251,26,0,0,4,0],[251,17,251,26,0,0,4,1],[254,17,254,34,0,0,4,0],[254,17,254,34,0,0,4,1],[262,17,262,24,0,0,4,0],[262,17,262,24,0,0,4,1],[272,20,272,27,0,0,4,0],[272,20,272,27,0,0,4,1],[277,17,277,40,0,0,4,1],[285,17,285,39,0,0,4,0],[285,17,285,39,0,0,4,1],[301,9,301,16,0,0,4,0],[301,9,301,16,0,0,4,1]],\"JPEGFixupTags\":[[814,9,814,59,0,0,4,0],[814,9,814,59,0,0,4,1],[815,9,815,62,0,0,4,0],[815,9,815,62,0,0,4,1],[816,9,816,47,0,0,4,0],[816,9,816,47,0,0,4,1],[817,9,817,49,0,0,4,0],[817,9,817,49,0,0,4,1]],\"JPEGFixupTagsSubsamplingReadByte\":[[1022,9,1022,35,0,0,4,0],[1022,9,1022,35,0,0,4,1],[1025,13,1025,37,0,0,4,0],[1025,13,1025,37,0,0,4,1],[1027,13,1027,34,0,0,4,0],[1027,13,1027,34,0,0,4,1],[1029,17,1030,27,0,0,4,0],[1029,17,1030,27,0,0,4,1],[1037,13,1037,46,0,0,4,0],[1037,13,1037,46,0,0,4,1],[1040,13,1040,78,0,0,4,0],[1040,13,1040,78,0,0,4,1]],\"JPEGSetupDecode\":[[1103,9,1103,44,0,0,4,1],[1121,13,1121,71,0,0,4,0],[1132,9,1132,31,0,0,4,0],[1132,9,1132,31,0,0,4,1],[1136,9,1136,16,0,0,4,0],[1136,9,1136,16,0,0,4,1],[209,34,209,71,4,0,4,0],[209,34,209,71,4,0,4,1]],\"OJPEGReadHeaderInfoSec\":[[1497,9,1497,27,0,0,4,0],[1497,9,1497,27,0,0,4,1],[1499,9,1499,41,0,0,4,0],[1499,9,1499,41,0,0,4,1],[1501,13,1501,57,0,0,4,0],[1501,13,1501,57,0,0,4,1],[1508,17,1508,58,0,0,4,0],[1508,17,1508,58,0,0,4,1],[1509,17,1510,66,0,0,4,0],[1509,17,1510,66,0,0,4,1],[1511,17,1513,32,0,0,4,0],[1511,17,1513,32,0,0,4,1],[1525,13,1525,43,0,0,4,0],[1525,13,1525,43,0,0,4,1],[1527,13,1527,21,0,0,4,0],[1527,13,1527,21,0,0,4,1],[1532,17,1532,43,0,0,4,0],[1532,17,1532,43,0,0,4,1],[1534,18,1534,26,0,0,4,0],[1534,18,1534,26,0,0,4,1],[1537,13,1537,33,0,0,4,1],[1540,13,1540,33,0,0,4,0],[1540,13,1540,33,0,0,4,1],[1541,13,1541,34,0,0,4,0],[1541,13,1541,34,0,0,4,1],[1542,13,1542,38,0,0,4,1],[1543,13,1543,38,0,0,4,0],[1543,13,1543,38,0,0,4,1],[1544,13,1544,38,0,0,4,1],[1545,13,1545,38,0,0,4,0],[1545,13,1545,38,0,0,4,1],[1546,13,1546,38,0,0,4,1],[1547,13,1547,38,0,0,4,1],[1548,13,1548,38,0,0,4,1],[1549,13,1549,38,0,0,4,1],[1550,13,1550,38,0,0,4,0],[1550,13,1550,38,0,0,4,1],[1551,13,1551,39,0,0,4,1],[1552,13,1552,39,0,0,4,0],[1552,13,1552,39,0,0,4,1],[1553,13,1553,39,0,0,4,1],[1554,13,1554,39,0,0,4,1],[1555,13,1555,39,0,0,4,0],[1555,13,1555,39,0,0,4,1],[1556,13,1556,39,0,0,4,0],[1556,13,1556,39,0,0,4,1],[1559,21,1559,47,0,0,4,0],[1559,21,1559,47,0,0,4,1],[1561,21,1561,26,0,0,4,0],[1561,21,1561,26,0,0,4,1],[1563,25,1563,52,0,0,4,1],[1567,21,1567,26,0,0,4,0],[1567,21,1567,26,0,0,4,1],[1570,13,1570,33,0,0,4,0],[1570,13,1570,33,0,0,4,1],[1571,21,1571,62,0,0,4,0],[1571,21,1571,62,0,0,4,1],[1574,13,1574,33,0,0,4,0],[1574,13,1574,33,0,0,4,1],[1575,21,1575,62,0,0,4,0],[1575,21,1575,62,0,0,4,1],[1578,13,1578,33,0,0,4,0],[1578,13,1578,33,0,0,4,1],[1579,21,1579,62,0,0,4,0],[1579,21,1579,62,0,0,4,1],[1582,13,1582,34,0,0,4,0],[1582,13,1582,34,0,0,4,1],[1583,13,1583,34,0,0,4,0],[1583,13,1583,34,0,0,4,1],[1584,13,1584,34,0,0,4,0],[1584,13,1584,34,0,0,4,1],[1585,21,1585,65,0,0,4,0],[1585,21,1585,65,0,0,4,1],[1587,21,1587,48,0,0,4,0],[1587,21,1587,48,0,0,4,1],[1590,13,1590,33,0,0,4,0],[1590,13,1590,33,0,0,4,1],[1591,21,1591,48,0,0,4,0],[1597,13,1597,20,0,0,4,0],[1597,13,1597,20,0,0,4,1],[1602,14,1602,34,0,0,4,0],[1603,9,1603,31,0,0,4,0],[1603,9,1603,31,0,0,4,1],[1605,9,1605,25,0,0,4,0],[1605,9,1605,25,0,0,4,1],[1607,13,1607,57,0,0,4,0],[1607,13,1607,57,0,0,4,1],[1610,21,1610,46,0,0,4,0],[1610,21,1610,46,0,0,4,1],[1613,21,1613,46,0,0,4,0],[1613,21,1613,46,0,0,4,1],[1618,13,1618,58,0,0,4,0],[1618,13,1618,58,0,0,4,1],[1620,13,1620,58,0,0,4,0],[1620,13,1620,58,0,0,4,1],[1622,21,1622,46,0,0,4,0],[1622,21,1622,46,0,0,4,1]],\"TIFFWriteDirectoryTagShort\":[[1456,9,1456,20,0,0,4,0],[1456,9,1456,20,0,0,4,1]],\"JPEGFixupTagsSubsamplingSkip\":[[1071,9,1071,54,0,0,4,0],[1071,9,1071,54,0,0,4,1],[1080,13,1080,37,0,0,4,0],[1080,13,1080,37,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSbyte\":[[3791,9,3791,18,0,0,4,0],[3791,9,3791,18,0,0,4,1]],\"OJPEGWriteStreamDcTable\":[[2502,9,2502,38,0,0,4,0],[2502,9,2502,38,0,0,4,1]],\"TIFFVGetFieldDefaulted\":[[218,9,218,36,0,0,4,0],[218,9,218,36,0,0,4,1],[220,13,220,16,0,0,4,1],[222,9,222,33,0,0,4,1],[225,9,225,35,0,0,4,1],[228,9,228,35,0,0,4,1],[231,9,231,31,0,0,4,1],[234,9,234,33,0,0,4,1],[237,9,237,37,0,0,4,1],[240,9,240,34,0,0,4,1],[243,9,243,36,0,0,4,1],[246,9,246,36,0,0,4,1],[273,9,273,34,0,0,4,1],[276,9,276,36,0,0,4,1],[279,9,279,31,0,0,4,1],[293,9,293,30,0,0,4,1],[297,9,297,28,0,0,4,1],[300,9,300,34,0,0,4,1],[303,9,303,34,0,0,4,1],[307,9,307,30,0,0,4,1],[312,9,312,31,0,0,4,1],[315,9,315,30,0,0,4,1],[318,9,318,34,0,0,4,1],[321,9,321,32,0,0,4,1],[324,9,324,39,0,0,4,1],[331,9,331,38,0,0,4,0],[335,9,335,38,0,0,4,1],[338,9,338,32,0,0,4,1],[349,9,349,38,0,0,4,1],[364,9,364,41,0,0,4,1]],\"_TIFFMultiply64\":[[50,9,50,15,0,0,4,0],[50,9,50,15,0,0,4,1],[50,19,50,46,0,0,4,0],[50,19,50,46,0,0,4,1]],\"TIFFWarningExtR\":[[83,9,83,12,0,0,4,0],[83,16,83,36,0,0,4,1],[92,9,92,28,0,0,4,0],[98,9,98,31,0,0,4,1]],\"tagCompare\":[[551,9,551,39,0,0,4,0],[551,9,551,39,0,0,4,1],[554,16,554,44,0,0,4,0]],\"Fax3Unexpected\":[[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFReadDirEntryCheckRangeShortSbyte\":[[3692,9,3692,18,0,0,4,0],[3692,9,3692,18,0,0,4,1]],\"TIFFOpenExt\":[[232,9,232,16,0,0,4,1],[241,9,241,15,0,0,4,1],[256,9,256,13,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortSshort\":[[3701,9,3701,18,0,0,4,0],[3701,9,3701,18,0,0,4,1]],\"TIFFDataWidth\":[[641,9,641,15,0,0,4,0],[641,9,641,15,0,0,4,1],[642,9,642,23,0,0,4,0],[642,9,642,23,0,0,4,1],[643,9,643,24,0,0,4,0],[643,9,643,24,0,0,4,1],[644,9,644,24,0,0,4,0],[644,9,644,24,0,0,4,1],[645,9,645,28,0,0,4,0],[645,9,645,28,0,0,4,1],[647,9,647,24,0,0,4,0],[647,9,647,24,0,0,4,1],[648,9,648,25,0,0,4,0],[648,9,648,25,0,0,4,1],[650,9,650,23,0,0,4,0],[650,9,650,23,0,0,4,1],[651,9,651,24,0,0,4,0],[651,9,651,24,0,0,4,1],[652,9,652,24,0,0,4,0],[652,9,652,24,0,0,4,1],[653,9,653,22,0,0,4,0],[653,9,653,22,0,0,4,1],[655,9,655,27,0,0,4,0],[655,9,655,27,0,0,4,1],[656,9,656,28,0,0,4,0],[656,9,656,28,0,0,4,1],[657,9,657,25,0,0,4,0],[657,9,657,25,0,0,4,1],[658,9,658,24,0,0,4,0],[658,9,658,24,0,0,4,1],[659,9,659,25,0,0,4,0],[659,9,659,25,0,0,4,1],[660,9,660,23,0,0,4,0],[660,9,660,23,0,0,4,1],[662,9,662,16,0,0,4,0],[662,9,662,16,0,0,4,1]],\"Fax3Decode1D\":[[250,9,250,29,0,0,4,0],[250,9,250,29,0,0,4,1],[257,12,257,19,0,0,4,0],[257,12,257,19,0,0,4,1],[295,13,295,24,3,0,4,0],[295,13,295,24,3,0,4,1],[300,21,300,37,3,0,4,0],[300,21,300,37,3,0,4,1],[312,16,312,31,3,0,4,0],[312,16,312,31,3,0,4,1],[371,21,371,31,4,0,4,0],[371,21,371,31,4,0,4,1],[374,21,374,33,4,0,4,0],[374,21,374,33,4,0,4,1],[377,21,377,35,4,0,4,0],[377,21,377,35,4,0,4,1],[378,21,378,34,4,0,4,0],[378,21,378,34,4,0,4,1],[382,21,382,28,4,0,4,0],[382,21,382,28,4,0,4,1],[388,17,388,28,4,0,4,0],[388,17,388,28,4,0,4,1],[395,21,395,31,4,0,4,1],[398,21,398,33,4,0,4,0],[398,21,398,33,4,0,4,1],[401,21,401,35,4,0,4,1],[402,21,402,34,4,0,4,1],[406,21,406,28,4,0,4,0],[406,21,406,28,4,0,4,1],[412,17,412,28,4,0,4,1],[414,17,414,31,4,0,4,1],[326,13,326,22,5,0,4,1],[328,13,328,24,5,0,4,0],[331,20,331,30,5,0,4,1],[333,17,333,27,5,0,4,0],[335,21,335,27,5,0,4,1],[337,21,337,39,5,0,4,1],[166,13,166,28,9,0,4,0],[166,13,166,28,9,0,4,1],[170,21,170,35,9,0,4,1],[177,21,177,43,9,0,4,0],[177,21,177,43,9,0,4,1],[146,13,146,28,12,0,4,0],[146,13,146,28,12,0,4,1],[150,21,150,35,12,0,4,0],[150,21,150,35,12,0,4,1],[194,20,194,47,13,0,4,0],[194,20,194,47,13,0,4,1],[268,13,268,38,21,0,4,1],[268,13,268,38,28,0,4,1],[326,13,326,22,34,0,4,1],[328,13,328,24,34,0,4,0],[328,13,328,24,34,0,4,1],[331,20,331,30,34,0,4,0],[331,20,331,30,34,0,4,1],[331,34,331,46,34,0,4,0],[333,17,333,27,34,0,4,0],[335,21,335,27,34,0,4,1],[337,21,337,39,34,0,4,0],[337,21,337,39,34,0,4,1],[268,13,268,38,38,0,4,1],[117,21,117,31,42,0,4,0],[117,21,117,31,42,0,4,1],[117,21,117,31,43,0,4,1],[117,21,117,31,44,0,4,0],[117,21,117,31,44,0,4,1],[166,13,166,28,45,0,4,0],[166,13,166,28,45,0,4,1],[170,21,170,35,45,0,4,1],[177,21,177,43,45,0,4,0],[177,21,177,43,45,0,4,1],[166,13,166,28,50,0,4,0],[166,13,166,28,50,0,4,1],[177,21,177,43,50,0,4,1],[268,13,268,38,63,0,4,1],[268,13,268,38,64,0,4,1],[117,21,117,31,77,0,4,0],[117,21,117,31,77,0,4,1],[117,21,117,31,78,0,4,1],[117,21,117,31,81,0,4,1]],\"TIFFReadDirEntryPersampleShort\":[[3301,9,3301,73,0,0,4,0],[3301,9,3301,73,0,0,4,1],[3304,9,3304,37,0,0,4,0],[3304,9,3304,37,0,0,4,1],[3304,41,3304,50,0,0,4,1],[3310,12,3310,18,0,0,4,0],[3310,12,3310,18,0,0,4,1],[3312,13,3312,28,0,0,4,0],[3312,13,3312,28,0,0,4,1]],\"TIFFWriteBufferSetup\":[[676,9,676,25,0,0,4,1],[685,9,685,31,0,0,4,0],[690,13,690,49,0,0,4,0],[695,13,695,28,0,0,4,1],[699,9,699,19,0,0,4,0],[702,13,702,23,0,0,4,1],[250,22,250,62,3,0,4,0]],\"_TIFFVGetField\":[[1218,9,1218,20,0,0,4,1],[1227,9,1227,39,0,0,4,1],[1234,9,1234,33,0,0,4,1],[1237,9,1237,32,0,0,4,0],[1237,9,1237,32,0,0,4,1],[1240,9,1240,33,0,0,4,0],[1240,9,1240,33,0,0,4,1],[1243,9,1243,35,0,0,4,1],[1246,9,1246,33,0,0,4,1],[1249,9,1249,33,0,0,4,1],[1252,9,1252,35,0,0,4,1],[1255,9,1255,31,0,0,4,1],[1258,9,1258,33,0,0,4,1],[1261,9,1261,37,0,0,4,1],[1264,9,1264,34,0,0,4,1],[1267,9,1267,36,0,0,4,1],[1270,9,1270,36,0,0,4,1],[1273,9,1273,37,0,0,4,1],[1287,9,1287,37,0,0,4,1],[1301,9,1301,33,0,0,4,1],[1304,9,1304,33,0,0,4,1],[1307,9,1307,34,0,0,4,1],[1310,9,1310,31,0,0,4,1],[1313,9,1313,31,0,0,4,1],[1316,9,1316,36,0,0,4,1],[1319,9,1319,32,0,0,4,1],[1323,9,1323,35,0,0,4,1],[1327,9,1327,30,0,0,4,1],[1332,9,1332,34,0,0,4,1],[1333,9,1333,33,0,0,4,1],[1339,9,1339,37,0,0,4,1],[1340,9,1340,36,0,0,4,1],[1346,9,1346,30,0,0,4,1],[1351,9,1351,34,0,0,4,1],[1355,9,1355,31,0,0,4,1],[1358,9,1358,32,0,0,4,1],[1361,9,1361,31,0,0,4,1],[1364,9,1364,30,0,0,4,1],[1381,9,1381,34,0,0,4,1],[1384,9,1384,32,0,0,4,1],[1387,9,1387,28,0,0,4,1],[1391,9,1391,38,0,0,4,1],[1394,9,1394,38,0,0,4,0],[1394,9,1394,38,0,0,4,1],[1398,9,1398,38,0,0,4,1],[1411,9,1411,41,0,0,4,1],[1414,9,1414,30,0,0,4,1],[1417,9,1417,34,0,0,4,1],[1420,9,1420,16,0,0,4,1]],\"TIFFReadDirEntryLong\":[[656,9,656,34,0,0,4,0],[656,9,656,34,0,0,4,1],[660,9,660,23,0,0,4,0],[660,9,660,23,0,0,4,1],[667,9,667,24,0,0,4,0],[667,9,667,24,0,0,4,1],[672,17,672,45,0,0,4,0],[672,17,672,45,0,0,4,1],[677,9,677,24,0,0,4,0],[677,9,677,24,0,0,4,1],[684,9,684,25,0,0,4,0],[684,9,684,25,0,0,4,1],[689,17,689,45,0,0,4,0],[689,17,689,45,0,0,4,1],[694,9,694,23,0,0,4,0],[694,9,694,23,0,0,4,1],[697,9,697,24,0,0,4,0],[697,9,697,24,0,0,4,1],[702,17,702,45,0,0,4,0],[702,17,702,45,0,0,4,1],[707,9,707,24,0,0,4,0],[707,9,707,24,0,0,4,1],[711,17,711,45,0,0,4,0],[711,17,711,45,0,0,4,1],[714,17,714,45,0,0,4,0],[714,17,714,45,0,0,4,1],[719,9,719,25,0,0,4,0],[719,9,719,25,0,0,4,1],[723,17,723,45,0,0,4,0],[723,17,723,45,0,0,4,1],[726,17,726,45,0,0,4,0],[726,17,726,45,0,0,4,1],[731,9,731,16,0,0,4,0],[731,9,731,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortSlong8\":[[3737,9,3737,20,0,0,4,0],[3737,9,3737,20,0,0,4,1],[3737,24,3737,40,0,0,4,0],[3737,24,3737,40,0,0,4,1]],\"OJPEGCleanup\":[[1047,9,1047,16,0,0,4,0],[1052,13,1052,31,0,0,4,0],[1052,13,1052,31,0,0,4,1],[1054,13,1054,31,0,0,4,1],[1056,13,1056,31,0,0,4,0],[1056,13,1056,31,0,0,4,1],[1058,13,1058,31,0,0,4,1],[1060,13,1060,32,0,0,4,0],[1060,13,1060,32,0,0,4,1],[1062,13,1062,32,0,0,4,1],[1064,13,1064,32,0,0,4,0],[1064,13,1064,32,0,0,4,1],[1066,13,1066,32,0,0,4,1],[1068,13,1068,32,0,0,4,0],[1068,13,1068,32,0,0,4,1],[1070,13,1070,32,0,0,4,1],[1072,13,1072,32,0,0,4,0],[1072,13,1072,32,0,0,4,1],[1074,13,1074,32,0,0,4,1],[1076,13,1076,44,0,0,4,0],[1076,13,1076,44,0,0,4,1],[1078,13,1078,50,0,0,4,0],[1078,13,1078,50,0,0,4,1],[1080,13,1080,52,0,0,4,0],[1080,13,1080,52,0,0,4,1],[1082,13,1082,33,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortSlong\":[[3719,9,3719,20,0,0,4,0],[3719,9,3719,20,0,0,4,1],[3719,24,3719,40,0,0,4,0],[3719,24,3719,40,0,0,4,1]],\"TIFFReadDirEntryByte\":[[299,9,299,34,0,0,4,0],[299,9,299,34,0,0,4,1],[303,9,303,23,0,0,4,0],[303,9,303,23,0,0,4,1],[304,9,304,28,0,0,4,0],[304,9,304,28,0,0,4,1],[308,9,308,24,0,0,4,0],[308,9,308,24,0,0,4,1],[313,17,313,45,0,0,4,0],[313,17,313,45,0,0,4,1],[318,9,318,24,0,0,4,0],[318,9,318,24,0,0,4,1],[323,17,323,45,0,0,4,0],[323,17,323,45,0,0,4,1],[328,9,328,25,0,0,4,0],[328,9,328,25,0,0,4,1],[333,17,333,45,0,0,4,0],[333,17,333,45,0,0,4,1],[338,9,338,23,0,0,4,0],[338,9,338,23,0,0,4,1],[343,17,343,45,0,0,4,0],[343,17,343,45,0,0,4,1],[348,9,348,24,0,0,4,0],[348,9,348,24,0,0,4,1],[353,17,353,45,0,0,4,0],[353,17,353,45,0,0,4,1],[358,9,358,24,0,0,4,0],[358,9,358,24,0,0,4,1],[362,17,362,45,0,0,4,0],[362,17,362,45,0,0,4,1],[365,17,365,45,0,0,4,0],[365,17,365,45,0,0,4,1],[370,9,370,25,0,0,4,0],[370,9,370,25,0,0,4,1],[374,17,374,45,0,0,4,0],[374,17,374,45,0,0,4,1],[377,17,377,45,0,0,4,0],[377,17,377,45,0,0,4,1],[382,9,382,16,0,0,4,0],[382,9,382,16,0,0,4,1]],\"TIFFSwabArrayOfLong\":[[123,12,123,19,0,0,4,0],[123,12,123,19,0,0,4,1]],\"OJPEGWriteStream\":[[2410,17,2410,30,0,0,4,1],[2412,13,2412,25,0,0,4,0],[2412,13,2412,25,0,0,4,1],[2415,13,2415,29,0,0,4,0],[2415,13,2415,29,0,0,4,1],[2418,13,2418,29,0,0,4,0],[2418,13,2418,29,0,0,4,1],[2421,13,2421,29,0,0,4,0],[2421,13,2421,29,0,0,4,1],[2424,13,2424,29,0,0,4,0],[2424,13,2424,29,0,0,4,1],[2427,13,2427,30,0,0,4,0],[2427,13,2427,30,0,0,4,1],[2430,13,2430,30,0,0,4,0],[2430,13,2430,30,0,0,4,1],[2433,13,2433,30,0,0,4,0],[2433,13,2433,30,0,0,4,1],[2436,13,2436,30,0,0,4,0],[2436,13,2436,30,0,0,4,1],[2439,13,2439,30,0,0,4,0],[2439,13,2439,30,0,0,4,1],[2442,13,2442,30,0,0,4,0],[2442,13,2442,30,0,0,4,1],[2445,13,2445,30,0,0,4,0],[2445,13,2445,30,0,0,4,1],[2448,13,2448,30,0,0,4,0],[2448,13,2448,30,0,0,4,1],[2451,13,2451,25,0,0,4,0],[2451,13,2451,25,0,0,4,1],[2454,13,2454,25,0,0,4,0],[2454,13,2454,25,0,0,4,1],[2457,13,2457,25,0,0,4,0],[2457,13,2457,25,0,0,4,1],[2460,13,2460,32,0,0,4,0],[2460,13,2460,32,0,0,4,1],[2461,21,2461,67,0,0,4,0],[2461,21,2461,67,0,0,4,1],[2464,13,2464,25,0,0,4,0],[2464,13,2464,25,0,0,4,1],[2467,13,2467,25,0,0,4,1],[2471,14,2471,23,0,0,4,0],[2471,14,2471,23,0,0,4,1]],\"TIFFGetBitRevTable\":[[307,13,307,21,0,0,4,0],[307,13,307,21,0,0,4,1]],\"_TIFFCheckFieldIsValidForCodec\":[[1240,9,1240,31,0,0,4,0],[1240,9,1240,31,0,0,4,1],[1242,9,1242,32,0,0,4,0],[1242,9,1242,32,0,0,4,1],[1244,9,1244,34,0,0,4,0],[1244,9,1244,34,0,0,4,1],[1245,9,1245,37,0,0,4,0],[1245,9,1245,37,0,0,4,1],[1246,9,1246,33,0,0,4,0],[1246,9,1246,33,0,0,4,1],[1247,9,1247,34,0,0,4,0],[1247,9,1247,34,0,0,4,1],[1248,9,1248,34,0,0,4,0],[1248,9,1248,34,0,0,4,1],[1249,9,1249,30,0,0,4,0],[1249,9,1249,30,0,0,4,1],[1250,9,1250,41,0,0,4,0],[1250,9,1250,41,0,0,4,1],[1252,9,1252,33,0,0,4,0],[1252,9,1252,33,0,0,4,1],[1253,9,1253,34,0,0,4,0],[1253,9,1253,34,0,0,4,1],[1254,9,1254,44,0,0,4,0],[1254,9,1254,44,0,0,4,1],[1255,9,1255,35,0,0,4,0],[1255,9,1255,35,0,0,4,1],[1256,9,1256,35,0,0,4,0],[1256,9,1256,35,0,0,4,1],[1258,9,1258,37,0,0,4,0],[1258,9,1258,37,0,0,4,1],[1260,9,1260,16,0,0,4,0],[1260,9,1260,16,0,0,4,1],[1263,9,1263,60,0,0,4,0],[1263,9,1263,60,0,0,4,1],[1269,13,1269,40,0,0,4,0],[1269,13,1269,40,0,0,4,1],[1271,9,1271,29,0,0,4,0],[1271,9,1271,29,0,0,4,1],[1272,17,1272,41,0,0,4,0],[1272,17,1272,41,0,0,4,1],[1275,9,1275,34,0,0,4,0],[1275,9,1275,34,0,0,4,1],[1278,9,1278,37,0,0,4,1],[1281,9,1281,30,0,0,4,0],[1281,9,1281,30,0,0,4,1],[1284,9,1284,30,0,0,4,0],[1284,9,1284,30,0,0,4,1],[1285,17,1285,42,0,0,4,0],[1285,17,1285,42,0,0,4,1],[1288,9,1288,31,0,0,4,0],[1288,9,1288,31,0,0,4,1],[1289,21,1289,24,0,0,4,0],[1289,21,1289,24,0,0,4,1],[1291,17,1291,42,0,0,4,0],[1291,17,1291,42,0,0,4,1],[1292,17,1292,45,0,0,4,0],[1292,17,1292,45,0,0,4,1],[1293,17,1293,41,0,0,4,0],[1293,17,1293,41,0,0,4,1],[1294,17,1294,42,0,0,4,0],[1294,17,1294,42,0,0,4,1],[1295,17,1295,42,0,0,4,0],[1295,17,1295,42,0,0,4,1],[1296,17,1296,38,0,0,4,0],[1296,17,1296,38,0,0,4,1],[1297,17,1297,49,0,0,4,0],[1297,17,1297,49,0,0,4,1],[1301,9,1301,34,0,0,4,0],[1301,9,1301,34,0,0,4,1],[1302,9,1302,35,0,0,4,0],[1302,9,1302,35,0,0,4,1],[1303,9,1303,35,0,0,4,0],[1303,9,1303,35,0,0,4,1],[1304,9,1304,35,0,0,4,0],[1304,9,1304,35,0,0,4,1],[1305,21,1305,24,0,0,4,0],[1305,21,1305,24,0,0,4,1],[1307,17,1307,41,0,0,4,0],[1307,17,1307,41,0,0,4,1],[1308,17,1308,42,0,0,4,0],[1308,17,1308,42,0,0,4,1],[1309,17,1309,52,0,0,4,0],[1309,17,1309,52,0,0,4,1],[1311,17,1311,43,0,0,4,0],[1311,17,1311,43,0,0,4,1],[1312,25,1312,77,0,0,4,0],[1312,25,1312,77,0,0,4,1],[1315,17,1315,43,0,0,4,0],[1315,17,1315,43,0,0,4,1],[1316,25,1316,77,0,0,4,0],[1316,25,1316,77,0,0,4,1],[1321,9,1321,30,0,0,4,1],[1324,9,1324,33,0,0,4,0],[1324,9,1324,33,0,0,4,1],[1325,9,1325,39,0,0,4,0],[1325,9,1325,39,0,0,4,1],[1326,17,1326,41,0,0,4,0],[1326,17,1326,41,0,0,4,1],[1329,9,1329,34,0,0,4,0],[1329,9,1329,34,0,0,4,1],[1330,17,1330,41,0,0,4,0],[1330,17,1330,41,0,0,4,1],[1333,9,1333,32,0,0,4,0],[1333,9,1333,32,0,0,4,1],[1334,9,1334,34,0,0,4,1],[1337,9,1337,30,0,0,4,0],[1337,9,1337,30,0,0,4,1],[1338,17,1338,41,0,0,4,1],[1341,9,1341,30,0,0,4,1],[1345,9,1345,30,0,0,4,1]],\"JPEGPreDecode\":[[1199,9,1199,44,0,0,4,1],[1209,9,1209,28,0,0,4,1],[1215,9,1215,57,0,0,4,0]],\"PixarLogMakeTables\":[[587,9,587,24,0,0,4,1],[587,28,587,42,0,0,4,1],[587,46,587,59,0,0,4,1],[588,9,588,26,0,0,4,1],[588,30,588,48,0,0,4,1],[588,52,588,69,0,0,4,1],[613,17,613,25,0,0,4,0],[613,17,613,25,0,0,4,1],[619,20,619,29,0,0,4,0],[619,20,619,29,0,0,4,1],[624,17,624,28,0,0,4,0],[624,17,624,28,0,0,4,1],[627,25,627,38,0,0,4,0],[627,25,627,38,0,0,4,1],[629,24,629,35,0,0,4,0],[629,24,629,35,0,0,4,1],[633,17,633,28,0,0,4,0],[633,17,633,28,0,0,4,1],[635,13,635,76,0,0,4,0],[635,13,635,76,0,0,4,1],[646,17,646,26,0,0,4,0],[646,17,646,26,0,0,4,1],[648,16,648,77,0,0,4,0],[648,16,648,77,0,0,4,1],[654,17,654,24,0,0,4,0],[654,17,654,24,0,0,4,1],[656,16,656,73,0,0,4,0],[656,16,656,73,0,0,4,1]],\"TIFFWriteDirectoryTagCheckedShortArray\":[[2260,9,2260,35,0,0,4,1]],\"TIFFPredictorInit\":[[1002,9,1002,77,0,0,4,1]],\"LZMAVGetField\":[[421,9,421,32,0,0,4,1],[424,9,424,16,0,0,4,0]],\"_TIFFMergeFields\":[[582,9,582,24,0,0,4,0],[582,9,582,24,0,0,4,1],[582,28,582,48,0,0,4,0],[593,9,593,25,0,0,4,1],[600,17,600,22,0,0,4,0],[600,17,600,22,0,0,4,1],[605,13,605,17,0,0,4,0]],\"TIFFReadRawStripOrTile2\":[[664,9,664,16,0,0,4,0],[664,9,664,16,0,0,4,1],[666,13,666,21,0,0,4,1],[682,9,682,75,0,0,4,0],[682,9,682,75,0,0,4,1]],\"OJPEGPreDecode\":[[731,9,731,41,0,0,4,0],[731,9,731,41,0,0,4,1],[733,9,733,33,0,0,4,0],[733,9,733,33,0,0,4,1],[735,13,735,42,0,0,4,0],[735,13,735,42,0,0,4,1],[738,9,738,32,0,0,4,1],[747,9,747,36,0,0,4,0],[747,9,747,36,0,0,4,1],[748,10,748,36,0,0,4,1],[748,40,748,65,0,0,4,1],[754,9,754,34,0,0,4,0],[754,9,754,34,0,0,4,1],[759,13,759,46,0,0,4,0],[759,13,759,46,0,0,4,1],[760,13,761,48,0,0,4,1],[771,13,771,43,0,0,4,0],[771,13,771,43,0,0,4,1],[774,12,774,35,0,0,4,0],[774,12,774,35,0,0,4,1],[776,13,776,46,0,0,4,0],[778,17,778,48,0,0,4,0],[778,17,778,48,0,0,4,1],[250,22,250,62,1,0,4,0]],\"JPEGCleanup\":[[2527,9,2527,30,0,0,4,0],[2527,9,2527,30,0,0,4,1],[2529,9,2529,37,0,0,4,0],[2529,9,2529,37,0,0,4,1]],\"TIFFTileRowSize64\":[[147,9,147,31,0,0,4,1],[152,9,152,30,0,0,4,1],[159,9,159,51,0,0,4,0],[159,9,159,51,0,0,4,1],[161,13,161,40,0,0,4,1],[170,9,170,25,0,0,4,0],[170,9,170,25,0,0,4,1],[296,6,296,16,2,0,4,0],[296,6,296,16,2,0,4,1]],\"_TIFFgetMode\":[[56,9,56,17,0,0,4,0],[56,9,56,17,0,0,4,1],[58,17,58,31,0,0,4,1],[61,9,61,17,0,0,4,0],[61,9,61,17,0,0,4,1],[62,9,62,17,0,0,4,1],[64,17,64,31,0,0,4,0],[67,9,67,16,0,0,4,1]],\"OJPEGWriteStreamSos\":[[2590,17,2590,52,0,0,4,0],[2590,17,2590,52,0,0,4,1]],\"_TIFFSetupFields\":[[515,9,515,24,0,0,4,0],[515,9,515,24,0,0,4,1],[515,28,515,48,0,0,4,0],[519,21,519,41,0,0,4,0],[519,21,519,41,0,0,4,1],[522,17,522,40,0,0,4,0],[524,21,524,51,0,0,4,0],[524,21,524,51,0,0,4,1],[524,55,524,80,0,0,4,1],[540,9,540,70,0,0,4,1]],\"JPEGFixupTagsSubsamplingSec\":[[892,17,892,60,0,0,4,0],[892,17,892,60,0,0,4,1],[894,17,894,25,0,0,4,0],[894,17,894,25,0,0,4,1],[899,17,899,60,0,0,4,0],[899,17,899,60,0,0,4,1],[901,17,901,25,0,0,4,0],[901,17,901,25,0,0,4,1],[906,13,906,33,0,0,4,0],[906,13,906,33,0,0,4,1],[909,13,909,33,0,0,4,0],[909,13,909,33,0,0,4,1],[910,13,910,34,0,0,4,0],[910,13,910,34,0,0,4,1],[911,13,911,38,0,0,4,0],[911,13,911,38,0,0,4,1],[912,13,912,38,0,0,4,0],[912,13,912,38,0,0,4,1],[913,13,913,38,0,0,4,0],[913,13,913,38,0,0,4,1],[914,13,914,38,0,0,4,0],[914,13,914,38,0,0,4,1],[915,13,915,38,0,0,4,0],[915,13,915,38,0,0,4,1],[916,13,916,38,0,0,4,0],[916,13,916,38,0,0,4,1],[917,13,917,38,0,0,4,0],[917,13,917,38,0,0,4,1],[918,13,918,38,0,0,4,0],[918,13,918,38,0,0,4,1],[919,13,919,38,0,0,4,0],[919,13,919,38,0,0,4,1],[920,13,920,39,0,0,4,0],[920,13,920,39,0,0,4,1],[921,13,921,39,0,0,4,0],[921,13,921,39,0,0,4,1],[922,13,922,39,0,0,4,0],[922,13,922,39,0,0,4,1],[923,13,923,39,0,0,4,0],[923,13,923,39,0,0,4,1],[924,13,924,39,0,0,4,0],[924,13,924,39,0,0,4,1],[925,13,925,39,0,0,4,0],[925,13,925,39,0,0,4,1],[926,13,926,33,0,0,4,0],[926,13,926,33,0,0,4,1],[927,13,927,33,0,0,4,0],[927,13,927,33,0,0,4,1],[928,13,928,33,0,0,4,0],[928,13,928,33,0,0,4,1],[929,13,929,33,0,0,4,0],[929,13,929,33,0,0,4,1],[934,25,934,68,0,0,4,0],[934,25,934,68,0,0,4,1],[936,25,936,30,0,0,4,0],[936,25,936,30,0,0,4,1],[939,25,939,30,0,0,4,0],[939,25,939,30,0,0,4,1],[943,13,943,34,0,0,4,0],[943,13,943,34,0,0,4,1],[944,13,944,34,0,0,4,0],[944,13,944,34,0,0,4,1],[945,13,945,34,0,0,4,0],[945,13,945,34,0,0,4,1],[948,13,948,34,0,0,4,0],[948,13,948,34,0,0,4,1],[949,13,949,35,0,0,4,0],[949,13,949,35,0,0,4,1],[959,25,959,68,0,0,4,0],[959,25,959,68,0,0,4,1],[961,25,961,75,0,0,4,0],[961,25,961,75,0,0,4,1],[964,25,964,68,0,0,4,0],[964,25,964,68,0,0,4,1],[969,33,969,74,0,0,4,0],[969,33,969,74,0,0,4,1],[972,29,972,72,0,0,4,0],[972,29,972,72,0,0,4,1],[974,29,974,38,0,0,4,0],[974,29,974,38,0,0,4,1],[986,26,986,35,0,0,4,0],[986,26,986,35,0,0,4,1],[986,39,986,48,0,0,4,0],[986,39,986,48,0,0,4,1],[986,52,986,61,0,0,4,0],[986,52,986,61,0,0,4,1],[987,26,987,35,0,0,4,0],[987,26,987,35,0,0,4,1],[987,39,987,48,0,0,4,0],[987,39,987,48,0,0,4,1],[987,52,987,61,0,0,4,0],[987,52,987,61,0,0,4,1],[996,25,996,74,0,0,4,0],[996,25,996,74,0,0,4,1],[997,25,997,74,0,0,4,0],[997,25,997,74,0,0,4,1],[1012,13,1012,20,0,0,4,0],[1012,13,1012,20,0,0,4,1]],\"ChopUpSingleUncompressedStrip\":[[7335,9,7335,23,0,0,4,0],[7335,9,7335,23,0,0,4,1],[7335,27,7335,52,0,0,4,1],[7339,9,7339,50,0,0,4,0],[7339,9,7339,50,0,0,4,1],[7339,54,7339,73,0,0,4,0],[7348,9,7348,43,0,0,4,0],[7348,9,7348,43,0,0,4,1],[7353,14,7353,31,0,0,4,0],[7353,14,7353,31,0,0,4,1],[7366,9,7366,44,0,0,4,0],[7366,9,7366,44,0,0,4,1],[7369,9,7369,21,0,0,4,0],[7369,9,7369,21,0,0,4,1],[7374,9,7374,34,0,0,4,0],[7374,38,7374,55,0,0,4,0],[7374,38,7374,55,0,0,4,1],[7375,10,7375,35,0,0,4,0],[7375,10,7375,35,0,0,4,1],[7376,10,7376,70,0,0,4,0],[7376,10,7376,70,0,0,4,1],[282,6,282,54,5,0,4,0]],\"TIFFNoDecode\":[[79,9,79,10,0,0,4,0],[79,9,79,10,0,0,4,1]],\"DumpModeDecode\":[[77,9,77,28,0,0,4,0]],\"TIFFCleanup\":[[49,9,49,34,0,0,4,0],[49,9,49,34,0,0,4,1],[59,12,59,31,0,0,4,1],[68,9,68,25,0,0,4,0],[68,9,68,25,0,0,4,1],[68,29,68,61,0,0,4,0],[76,9,76,24,0,0,4,0],[76,9,76,24,0,0,4,1],[76,28,76,48,0,0,4,0],[80,21,80,41,0,0,4,0],[80,21,80,41,0,0,4,1],[83,17,83,40,0,0,4,0],[85,21,85,51,0,0,4,0],[85,21,85,51,0,0,4,1],[90,21,90,46,0,0,4,0],[90,21,90,46,0,0,4,1],[101,9,101,35,0,0,4,1],[251,23,251,62,2,0,4,1]],\"TIFFFieldWithTag\":[[847,9,847,13,0,0,4,1]],\"TIFFSetCompressionScheme\":[[177,13,177,14,0,0,4,0],[177,13,177,14,0,0,4,1]],\"OJPEGSubsamplingCorrect\":[[1098,9,1098,47,0,0,4,0],[1098,9,1098,47,0,0,4,1],[1099,10,1099,60,0,0,4,0],[1099,10,1099,60,0,0,4,1],[1100,10,1100,61,0,0,4,0],[1102,13,1102,37,0,0,4,1],[1117,13,1117,74,0,0,4,0],[1117,13,1117,74,0,0,4,1],[1123,14,1123,41,0,0,4,0],[1123,14,1123,41,0,0,4,1],[1123,45,1123,72,0,0,4,0],[1123,45,1123,72,0,0,4,1],[1124,13,1124,76,0,0,4,0],[1124,13,1124,76,0,0,4,1],[1126,17,1126,41,0,0,4,0],[1126,17,1126,41,0,0,4,1],[1143,13,1143,74,0,0,4,0],[1143,13,1143,74,0,0,4,1],[1145,17,1145,41,0,0,4,0],[1145,17,1145,41,0,0,4,1],[1163,13,1163,74,0,0,4,0],[1163,13,1163,74,0,0,4,1],[1165,17,1165,58,0,0,4,0],[1165,17,1165,58,0,0,4,1]],\"TIFFInitCCITTRLE\":[[1703,9,1703,27,0,0,4,0]],\"LZMACleanup\":[[377,9,377,18,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteSlong8\":[[3620,9,3620,20,0,0,4,0],[3620,9,3620,20,0,0,4,1],[3620,24,3620,38,0,0,4,0],[3620,24,3620,38,0,0,4,1]],\"_TIFFCheckRealloc\":[[105,9,105,19,0,0,4,0],[105,9,105,19,0,0,4,1],[110,9,110,19,0,0,4,0],[110,9,110,19,0,0,4,1]],\"OJPEGDecode\":[[857,9,857,24,0,0,4,1],[863,9,863,40,0,0,4,1],[876,9,876,39,0,0,4,1],[880,9,880,42,0,0,4,0],[882,13,882,46,0,0,4,0],[882,13,882,46,0,0,4,1]],\"JPEGVGetField\":[[2643,9,2643,32,0,0,4,1],[2647,9,2647,33,0,0,4,1],[2650,9,2650,35,0,0,4,1],[2653,9,2653,36,0,0,4,1],[2656,9,2656,16,0,0,4,0]],\"TIFFFreeDirectory\":[[1644,17,1644,44,0,0,4,0],[1644,17,1644,44,0,0,4,1],[1646,13,1646,41,0,0,4,0],[1646,13,1646,41,0,0,4,1],[1609,13,1609,23,1,0,4,0],[1609,13,1609,23,1,0,4,1],[1609,13,1609,23,2,0,4,0],[1609,13,1609,23,2,0,4,1],[1609,13,1609,23,3,0,4,0],[1609,13,1609,23,3,0,4,1],[1609,13,1609,23,4,0,4,0],[1609,13,1609,23,4,0,4,1],[1609,13,1609,23,5,0,4,0],[1609,13,1609,23,5,0,4,1],[1609,13,1609,23,6,0,4,0],[1609,13,1609,23,6,0,4,1],[1609,13,1609,23,7,0,4,0],[1609,13,1609,23,7,0,4,1],[1609,13,1609,23,8,0,4,0],[1609,13,1609,23,8,0,4,1],[1609,13,1609,23,9,0,4,0],[1609,13,1609,23,9,0,4,1],[1609,13,1609,23,10,0,4,0],[1609,13,1609,23,10,0,4,1],[1609,13,1609,23,11,0,4,0],[1609,13,1609,23,11,0,4,1],[1609,13,1609,23,12,0,4,0],[1609,13,1609,23,12,0,4,1],[1609,13,1609,23,13,0,4,0],[1609,13,1609,23,13,0,4,1],[1609,13,1609,23,14,0,4,0],[1609,13,1609,23,14,0,4,1],[1609,13,1609,23,17,0,4,0],[1609,13,1609,23,17,0,4,1]],\"TIFFReadDirectoryCheckOrder\":[[5045,26,5045,38,0,0,4,0],[5045,26,5045,38,0,0,4,1],[5047,13,5047,28,0,0,4,0],[5047,13,5047,28,0,0,4,1]],\"LZWDecodeCompat\":[[820,9,820,24,0,0,4,1],[874,12,874,19,0,0,4,0],[874,12,874,19,0,0,4,1],[877,13,877,29,0,0,4,0],[877,13,877,29,0,0,4,1],[879,13,879,31,0,0,4,0],[879,13,879,31,0,0,4,1],[890,22,890,40,0,0,4,1],[891,17,891,33,0,0,4,1],[893,17,893,34,0,0,4,0],[893,17,893,34,0,0,4,1],[911,13,911,44,0,0,4,0],[911,13,911,44,0,0,4,1],[912,13,912,49,0,0,4,1],[921,13,921,50,0,0,4,1],[922,13,922,55,0,0,4,1],[932,13,932,32,0,0,4,0],[932,13,932,32,0,0,4,1],[933,13,933,35,0,0,4,1],[941,13,941,24,0,0,4,0],[941,13,941,24,0,0,4,1],[947,17,947,35,0,0,4,0],[1010,9,1010,16,0,0,4,0],[1010,9,1010,16,0,0,4,1],[768,13,768,43,5,0,4,0],[768,13,768,43,5,0,4,1],[768,13,768,43,13,0,4,1],[790,13,790,29,33,0,4,0],[790,13,790,29,33,0,4,1],[790,13,790,29,34,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Sbyte\":[[3865,9,3865,18,0,0,4,0],[3865,9,3865,18,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteLong8\":[[3611,9,3611,21,0,0,4,0],[3611,9,3611,21,0,0,4,1]],\"TIFFReadDirEntryByteArray\":[[1395,9,1395,24,0,0,4,0],[1395,9,1395,24,0,0,4,1],[1396,9,1396,28,0,0,4,0],[1396,9,1396,28,0,0,4,1],[1397,9,1397,23,0,0,4,0],[1397,9,1397,23,0,0,4,1],[1398,9,1398,24,0,0,4,0],[1398,9,1398,24,0,0,4,1],[1399,9,1399,24,0,0,4,0],[1399,9,1399,24,0,0,4,1],[1400,9,1400,25,0,0,4,0],[1400,9,1400,25,0,0,4,1],[1401,9,1401,23,0,0,4,0],[1401,9,1401,23,0,0,4,1],[1402,9,1402,24,0,0,4,0],[1402,9,1402,24,0,0,4,1],[1403,9,1403,24,0,0,4,0],[1403,9,1403,24,0,0,4,1],[1404,9,1404,25,0,0,4,0],[1404,9,1404,25,0,0,4,1],[1406,9,1406,16,0,0,4,0],[1406,9,1406,16,0,0,4,1],[1410,9,1410,39,0,0,4,0],[1410,9,1410,39,0,0,4,1],[1410,43,1410,58,0,0,4,0],[1410,43,1410,58,0,0,4,1],[1415,13,1415,32,0,0,4,0],[1415,13,1415,32,0,0,4,1],[1417,9,1417,24,0,0,4,0],[1417,9,1417,24,0,0,4,1],[1418,9,1418,28,0,0,4,0],[1418,9,1418,28,0,0,4,1],[1419,9,1419,23,0,0,4,0],[1419,9,1419,23,0,0,4,1],[1422,9,1422,24,0,0,4,0],[1422,9,1422,24,0,0,4,1],[1427,25,1427,34,0,0,4,0],[1427,25,1427,34,0,0,4,1],[1430,21,1430,49,0,0,4,0],[1430,21,1430,49,0,0,4,1],[1442,9,1442,18,0,0,4,1],[1447,13,1447,32,0,0,4,1],[1449,9,1449,24,0,0,4,0],[1449,9,1449,24,0,0,4,1],[1456,25,1456,34,0,0,4,0],[1456,25,1456,34,0,0,4,1],[1458,21,1458,47,0,0,4,0],[1458,21,1458,47,0,0,4,1],[1461,21,1461,49,0,0,4,0],[1461,21,1461,49,0,0,4,1],[1467,9,1467,25,0,0,4,0],[1467,9,1467,25,0,0,4,1],[1474,25,1474,34,0,0,4,0],[1474,25,1474,34,0,0,4,1],[1476,21,1476,47,0,0,4,0],[1476,21,1476,47,0,0,4,1],[1479,21,1479,49,0,0,4,0],[1479,21,1479,49,0,0,4,1],[1485,9,1485,23,0,0,4,0],[1485,9,1485,23,0,0,4,1],[1492,25,1492,34,0,0,4,0],[1492,25,1492,34,0,0,4,1],[1494,21,1494,47,0,0,4,0],[1494,21,1494,47,0,0,4,1],[1497,21,1497,49,0,0,4,0],[1497,21,1497,49,0,0,4,1],[1503,9,1503,24,0,0,4,0],[1503,9,1503,24,0,0,4,1],[1510,25,1510,34,0,0,4,0],[1510,25,1510,34,0,0,4,1],[1512,21,1512,47,0,0,4,0],[1512,21,1512,47,0,0,4,1],[1515,21,1515,49,0,0,4,0],[1515,21,1515,49,0,0,4,1],[1521,9,1521,24,0,0,4,0],[1521,9,1521,24,0,0,4,1],[1528,25,1528,34,0,0,4,0],[1528,25,1528,34,0,0,4,1],[1530,21,1530,47,0,0,4,0],[1530,21,1530,47,0,0,4,1],[1533,21,1533,49,0,0,4,0],[1533,21,1533,49,0,0,4,1],[1539,9,1539,25,0,0,4,0],[1539,9,1539,25,0,0,4,1],[1546,25,1546,34,0,0,4,0],[1546,25,1546,34,0,0,4,1],[1548,21,1548,47,0,0,4,0],[1548,21,1548,47,0,0,4,1],[1551,21,1551,49,0,0,4,0],[1551,21,1551,49,0,0,4,1],[1559,9,1559,37,0,0,4,0],[1559,9,1559,37,0,0,4,1]],\"TIFFClientOpenExt\":[[220,9,220,16,0,0,4,1],[223,9,223,13,0,0,4,1],[235,9,235,20,0,0,4,1],[255,24,255,31,0,0,4,0],[256,26,256,35,0,0,4,0],[257,9,257,13,0,0,4,1],[266,9,266,18,0,0,4,1],[266,22,266,32,0,0,4,1],[266,36,266,45,0,0,4,1],[266,49,266,59,0,0,4,1],[266,63,266,72,0,0,4,1],[281,9,281,22,0,0,4,0],[281,9,281,22,0,0,4,1],[285,9,285,22,0,0,4,0],[285,9,285,22,0,0,4,1],[285,26,285,37,0,0,4,1],[344,21,344,24,0,0,4,0],[344,21,344,24,0,0,4,1],[345,17,345,20,0,0,4,0],[345,17,345,20,0,0,4,1],[347,13,347,21,0,0,4,1],[353,13,353,21,0,0,4,1],[359,13,359,21,0,0,4,1],[363,13,363,21,0,0,4,1],[367,13,367,21,0,0,4,1],[375,13,375,21,0,0,4,1],[379,13,379,21,0,0,4,0],[379,13,379,21,0,0,4,1],[380,21,380,34,0,0,4,0],[383,13,383,21,0,0,4,1],[387,13,387,21,0,0,4,1],[391,13,391,21,0,0,4,1],[394,13,394,21,0,0,4,1],[398,13,398,21,0,0,4,1],[401,13,401,21,0,0,4,1],[418,9,418,22,0,0,4,0],[418,9,418,22,0,0,4,1],[419,9,419,16,0,0,4,0],[419,9,419,16,0,0,4,1],[421,13,421,38,0,0,4,0],[421,13,421,38,0,0,4,1],[434,13,434,41,0,0,4,1],[436,13,436,45,0,0,4,0],[440,17,440,43,0,0,4,1],[465,13,465,21,0,0,4,1],[473,13,473,64,0,0,4,1],[488,13,488,39,0,0,4,1],[498,9,498,60,0,0,4,0],[498,9,498,60,0,0,4,1],[499,9,499,63,0,0,4,0],[499,9,499,63,0,0,4,1],[505,9,505,62,0,0,4,0],[505,9,505,62,0,0,4,1],[523,9,523,60,0,0,4,0],[523,9,523,60,0,0,4,1],[535,9,535,35,0,0,4,0],[535,9,535,35,0,0,4,1],[537,9,537,70,0,0,4,0],[537,9,537,70,0,0,4,1],[538,9,538,66,0,0,4,0],[538,9,538,66,0,0,4,1],[547,9,547,68,0,0,4,0],[547,9,547,68,0,0,4,1],[549,13,549,39,0,0,4,0],[549,13,549,39,0,0,4,1],[555,13,555,20,0,0,4,0],[555,13,555,20,0,0,4,1],[562,13,562,39,0,0,4,0],[562,13,562,39,0,0,4,1],[567,13,567,53,0,0,4,0],[567,13,567,53,0,0,4,1],[576,13,576,49,0,0,4,0],[576,13,576,49,0,0,4,1],[594,13,594,20,0,0,4,1],[596,9,596,17,0,0,4,0],[597,17,597,49,0,0,4,0],[597,17,597,49,0,0,4,1],[606,17,606,45,0,0,4,1],[623,17,623,49,0,0,4,1],[629,17,629,39,0,0,4,0],[629,17,629,39,0,0,4,1],[634,9,634,17,0,0,4,1]],\"OJPEGReadBufferFill\":[[2217,13,2217,41,0,0,4,0],[2217,13,2217,41,0,0,4,1],[2219,17,2219,48,0,0,4,0],[2225,17,2225,54,0,0,4,0],[2225,17,2225,54,0,0,4,1],[2228,17,2228,23,0,0,4,0],[2228,17,2228,23,0,0,4,1],[2244,13,2244,32,0,0,4,0],[2244,13,2244,32,0,0,4,1],[2245,21,2245,53,0,0,4,0],[2245,21,2245,53,0,0,4,1],[2253,13,2253,44,0,0,4,0],[2253,13,2253,44,0,0,4,1],[2256,13,2256,29,0,0,4,0],[2256,13,2256,29,0,0,4,1],[2257,21,2257,76,0,0,4,0],[2257,21,2257,76,0,0,4,1],[2264,25,2264,28,0,0,4,0],[2264,25,2264,28,0,0,4,1],[2266,25,2266,52,0,0,4,0],[2266,25,2266,52,0,0,4,1],[2270,29,2270,32,0,0,4,0],[2270,29,2270,32,0,0,4,1],[2272,29,2272,68,0,0,4,0],[2272,29,2272,68,0,0,4,1],[2274,34,2274,48,0,0,4,0],[2274,34,2274,48,0,0,4,1],[2280,33,2280,61,0,0,4,1],[2282,38,2283,78,0,0,4,1],[2284,38,2286,55,0,0,4,0],[2284,38,2286,55,0,0,4,1],[2294,13,2294,20,0,0,4,0],[2294,13,2294,20,0,0,4,1]],\"TIFFRewriteDirectory\":[[316,9,316,29,0,0,4,0]],\"TIFFReadDirEntryFloatArray\":[[2757,9,2757,23,0,0,4,0],[2757,9,2757,23,0,0,4,1],[2758,9,2758,24,0,0,4,0],[2758,9,2758,24,0,0,4,1],[2759,9,2759,24,0,0,4,0],[2759,9,2759,24,0,0,4,1],[2760,9,2760,25,0,0,4,0],[2760,9,2760,25,0,0,4,1],[2761,9,2761,23,0,0,4,0],[2761,9,2761,23,0,0,4,1],[2762,9,2762,24,0,0,4,0],[2762,9,2762,24,0,0,4,1],[2763,9,2763,24,0,0,4,0],[2763,9,2763,24,0,0,4,1],[2764,9,2764,25,0,0,4,0],[2764,9,2764,25,0,0,4,1],[2765,9,2765,27,0,0,4,0],[2765,9,2765,27,0,0,4,1],[2766,9,2766,28,0,0,4,0],[2766,9,2766,28,0,0,4,1],[2767,9,2767,24,0,0,4,0],[2767,9,2767,24,0,0,4,1],[2768,9,2768,25,0,0,4,0],[2768,9,2768,25,0,0,4,1],[2770,9,2770,16,0,0,4,0],[2770,9,2770,16,0,0,4,1],[2774,9,2774,39,0,0,4,0],[2774,9,2774,39,0,0,4,1],[2774,43,2774,58,0,0,4,0],[2774,43,2774,58,0,0,4,1],[2779,13,2779,32,0,0,4,0],[2779,13,2779,32,0,0,4,1],[2781,9,2781,24,0,0,4,0],[2781,9,2781,24,0,0,4,1],[2782,17,2782,43,0,0,4,0],[2782,17,2782,43,0,0,4,1],[2789,9,2789,18,0,0,4,1],[2794,13,2794,32,0,0,4,1],[2796,9,2796,23,0,0,4,0],[2796,9,2796,23,0,0,4,1],[2803,25,2803,34,0,0,4,0],[2803,25,2803,34,0,0,4,1],[2807,9,2807,24,0,0,4,0],[2807,9,2807,24,0,0,4,1],[2814,25,2814,34,0,0,4,0],[2814,25,2814,34,0,0,4,1],[2818,9,2818,24,0,0,4,0],[2818,9,2818,24,0,0,4,1],[2825,25,2825,34,0,0,4,0],[2825,25,2825,34,0,0,4,1],[2827,21,2827,47,0,0,4,0],[2827,21,2827,47,0,0,4,1],[2833,9,2833,25,0,0,4,0],[2833,9,2833,25,0,0,4,1],[2840,25,2840,34,0,0,4,0],[2840,25,2840,34,0,0,4,1],[2842,21,2842,47,0,0,4,0],[2842,21,2842,47,0,0,4,1],[2848,9,2848,23,0,0,4,0],[2848,9,2848,23,0,0,4,1],[2855,25,2855,34,0,0,4,0],[2855,25,2855,34,0,0,4,1],[2857,21,2857,47,0,0,4,0],[2857,21,2857,47,0,0,4,1],[2863,9,2863,24,0,0,4,0],[2863,9,2863,24,0,0,4,1],[2870,25,2870,34,0,0,4,0],[2870,25,2870,34,0,0,4,1],[2872,21,2872,47,0,0,4,0],[2872,21,2872,47,0,0,4,1],[2878,9,2878,24,0,0,4,0],[2878,9,2878,24,0,0,4,1],[2885,25,2885,34,0,0,4,0],[2885,25,2885,34,0,0,4,1],[2887,21,2887,47,0,0,4,1],[2902,9,2902,25,0,0,4,0],[2902,9,2902,25,0,0,4,1],[2909,25,2909,34,0,0,4,0],[2909,25,2909,34,0,0,4,1],[2911,21,2911,47,0,0,4,1],[2917,9,2917,27,0,0,4,0],[2917,9,2917,27,0,0,4,1],[2926,25,2926,34,0,0,4,0],[2926,25,2926,34,0,0,4,1],[2928,21,2928,47,0,0,4,0],[2928,21,2928,47,0,0,4,1],[2931,21,2931,47,0,0,4,0],[2931,21,2931,47,0,0,4,1],[2934,21,2934,29,0,0,4,0],[2934,21,2934,29,0,0,4,1],[2941,9,2941,28,0,0,4,0],[2941,9,2941,28,0,0,4,1],[2950,25,2950,34,0,0,4,0],[2950,25,2950,34,0,0,4,1],[2952,21,2952,47,0,0,4,0],[2952,21,2952,47,0,0,4,1],[2956,21,2956,47,0,0,4,0],[2956,21,2956,47,0,0,4,1],[2959,21,2959,29,0,0,4,0],[2959,21,2959,29,0,0,4,1],[2966,9,2966,25,0,0,4,0],[2966,9,2966,25,0,0,4,1],[2971,17,2971,43,0,0,4,1],[2976,25,2976,34,0,0,4,0],[2976,25,2976,34,0,0,4,1],[2979,21,2979,34,0,0,4,0],[2979,21,2979,34,0,0,4,1],[2981,26,2981,40,0,0,4,0],[2981,26,2981,40,0,0,4,1]],\"TIFFVGetField\":[[1602,13,1602,16,0,0,4,0],[248,24,248,36,2,0,4,1],[209,34,209,71,3,0,4,0],[209,34,209,71,3,0,4,1]],\"LZWDecode\":[[424,9,424,23,0,0,4,1],[436,9,436,24,0,0,4,1],[493,9,493,17,0,0,4,1],[503,9,503,27,0,0,4,0],[503,9,503,27,0,0,4,1],[505,9,505,19,0,0,4,0],[505,9,505,19,0,0,4,1],[507,9,507,25,0,0,4,0],[507,9,507,25,0,0,4,1],[513,9,513,26,0,0,4,0],[513,9,513,26,0,0,4,1],[521,9,521,31,0,0,4,1],[539,9,539,17,0,0,4,0],[539,9,539,17,0,0,4,1],[550,9,550,27,0,0,4,0],[550,9,550,27,0,0,4,1],[552,13,552,31,0,0,4,0],[552,13,552,31,0,0,4,1],[566,9,566,31,0,0,4,1],[590,9,590,16,0,0,4,0],[590,9,590,16,0,0,4,1],[592,13,592,21,0,0,4,0],[592,13,592,21,0,0,4,1],[594,17,594,25,0,0,4,0],[594,17,594,25,0,0,4,1],[610,9,610,17,0,0,4,0],[610,9,610,17,0,0,4,1],[612,13,612,21,0,0,4,0],[612,13,612,21,0,0,4,1],[614,17,614,25,0,0,4,0],[614,17,614,25,0,0,4,1],[634,9,634,18,0,0,4,0],[634,9,634,18,0,0,4,1],[639,9,639,24,0,0,4,0],[639,9,639,24,0,0,4,1],[644,13,644,21,0,0,4,1],[660,9,660,16,0,0,4,0],[660,9,660,16,0,0,4,1],[666,18,666,25,0,0,4,0],[666,18,666,25,0,0,4,1],[672,9,672,17,0,0,4,1],[686,14,686,32,0,0,4,1],[687,9,687,25,0,0,4,1],[689,9,689,24,0,0,4,1],[696,9,696,17,0,0,4,0],[696,9,696,17,0,0,4,1],[714,14,714,33,0,0,4,0],[714,14,714,33,0,0,4,1],[722,14,722,19,0,0,4,0],[722,14,722,19,0,0,4,1],[738,9,738,16,0,0,4,0],[738,9,738,16,0,0,4,1],[372,13,372,25,5,0,4,0],[372,13,372,25,5,0,4,1],[374,17,374,52,5,0,4,0],[374,17,374,52,5,0,4,1],[387,21,387,37,5,0,4,0],[387,21,387,37,5,0,4,1],[394,21,394,33,5,0,4,1],[372,13,372,25,19,0,4,0],[372,13,372,25,19,0,4,1],[374,17,374,52,19,0,4,0]],\"TIFFSwabArrayOfLong8\":[[144,12,144,19,0,0,4,0],[144,12,144,19,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongLong8\":[[3818,9,3818,27,0,0,4,0],[3818,9,3818,27,0,0,4,1]],\"JPEGVSetField\":[[2585,9,2585,32,0,0,4,0],[2585,9,2585,32,0,0,4,1],[2587,17,2587,25,0,0,4,0],[2587,17,2587,25,0,0,4,1],[2597,9,2597,33,0,0,4,1],[2600,9,2600,35,0,0,4,1],[2604,9,2604,33,0,0,4,0],[2604,9,2604,33,0,0,4,1],[2610,9,2610,36,0,0,4,1],[2613,9,2613,38,0,0,4,0],[2613,9,2613,38,0,0,4,1],[2618,9,2618,16,0,0,4,0],[2618,9,2618,16,0,0,4,1],[2622,9,2622,51,0,0,4,0]],\"NeXTPreDecode\":[[176,9,176,34,0,0,4,1]],\"ThunderSetupDecode\":[[73,9,73,43,0,0,4,0],[73,9,73,43,0,0,4,1]],\"TIFFAppendToStrip\":[[767,9,767,29,0,0,4,0],[770,9,770,41,0,0,4,0],[774,13,774,48,0,0,4,1],[815,9,815,41,0,0,4,0],[817,9,817,30,0,0,4,1],[817,34,817,52,0,0,4,1],[823,9,823,35,0,0,4,1],[906,9,906,17,0,0,4,1],[915,9,915,66,0,0,4,0]],\"Fax4Decode\":[[1512,9,1512,29,0,0,4,0],[1512,9,1512,29,0,0,4,1],[1518,12,1518,19,0,0,4,0],[1518,12,1518,19,0,0,4,1],[1531,13,1531,19,0,0,4,0],[1531,13,1531,19,0,0,4,1],[1533,13,1533,42,0,0,4,1],[1556,13,1556,42,0,0,4,1],[1566,17,1566,25,0,0,4,0],[1566,17,1566,25,0,0,4,1],[454,16,454,26,3,0,4,0],[454,16,454,26,3,0,4,1],[456,17,456,42,3,0,4,1],[467,17,467,28,3,0,4,0],[467,17,467,28,3,0,4,1],[469,25,469,58,3,0,4,1],[484,17,484,29,3,0,4,0],[484,17,484,29,3,0,4,1],[485,25,485,43,3,0,4,0],[485,25,485,43,3,0,4,1],[492,33,492,45,3,0,4,0],[492,33,492,45,3,0,4,1],[495,33,495,47,3,0,4,1],[496,33,496,46,3,0,4,0],[496,33,496,46,3,0,4,1],[500,33,500,40,3,0,4,0],[500,33,500,40,3,0,4,1],[510,33,510,45,3,0,4,0],[510,33,510,45,3,0,4,1],[513,33,513,47,3,0,4,0],[513,33,513,47,3,0,4,1],[514,33,514,46,3,0,4,1],[518,33,518,40,3,0,4,1],[531,33,531,45,3,0,4,0],[531,33,531,45,3,0,4,1],[534,33,534,47,3,0,4,0],[534,33,534,47,3,0,4,1],[535,33,535,46,3,0,4,0],[535,33,535,46,3,0,4,1],[539,33,539,40,3,0,4,1],[549,33,549,45,3,0,4,0],[549,33,549,45,3,0,4,1],[552,33,552,47,3,0,4,1],[553,33,553,46,3,0,4,1],[557,33,557,40,3,0,4,0],[557,33,557,40,3,0,4,1],[565,17,565,26,3,0,4,0],[565,17,565,26,3,0,4,1],[568,25,568,54,3,0,4,1],[580,17,580,26,3,0,4,0],[580,17,580,26,3,0,4,1],[583,25,583,54,3,0,4,1],[595,17,595,26,3,0,4,0],[595,17,595,26,3,0,4,1],[597,25,597,55,3,0,4,0],[597,25,597,55,3,0,4,1],[605,17,605,27,3,0,4,0],[605,17,605,27,3,0,4,1],[609,17,609,27,3,0,4,0],[609,17,609,27,3,0,4,1],[617,17,617,24,3,0,4,1],[633,13,633,22,3,0,4,0],[633,13,633,22,3,0,4,1],[635,17,635,39,3,0,4,1],[268,13,268,38,4,0,4,1],[166,13,166,28,6,0,4,0],[170,21,170,35,6,0,4,0],[177,21,177,43,6,0,4,0],[177,21,177,43,6,0,4,1],[432,13,432,26,15,0,4,0],[432,13,432,26,15,0,4,1],[433,20,433,28,15,0,4,0],[433,20,433,28,15,0,4,1],[433,32,433,42,15,0,4,0],[435,21,435,54,15,0,4,1],[268,13,268,38,21,0,4,1],[268,13,268,38,26,0,4,1],[268,13,268,38,31,0,4,1],[268,13,268,38,36,0,4,1],[432,13,432,26,39,0,4,0],[433,20,433,28,39,0,4,0],[433,20,433,28,39,0,4,1],[433,32,433,42,39,0,4,0],[433,32,433,42,39,0,4,1],[435,21,435,54,39,0,4,1],[432,13,432,26,41,0,4,0],[432,13,432,26,41,0,4,1],[433,20,433,28,41,0,4,0],[433,20,433,28,41,0,4,1],[433,32,433,42,41,0,4,0],[435,21,435,54,41,0,4,1],[268,13,268,38,42,0,4,1],[432,13,432,26,46,0,4,0],[432,13,432,26,46,0,4,1],[433,20,433,28,46,0,4,0],[433,20,433,28,46,0,4,1],[433,32,433,42,46,0,4,0],[435,21,435,54,46,0,4,1],[268,13,268,38,47,0,4,1],[432,13,432,26,51,0,4,0],[432,13,432,26,51,0,4,1],[433,20,433,28,51,0,4,0],[433,20,433,28,51,0,4,1],[433,32,433,42,51,0,4,0],[435,21,435,54,51,0,4,1],[268,13,268,38,53,0,4,1],[146,13,146,28,57,0,4,0],[146,13,146,28,57,0,4,1],[150,21,150,35,57,0,4,0],[194,20,194,47,58,0,4,0],[194,20,194,47,58,0,4,1],[326,13,326,22,65,0,4,1],[328,13,328,24,65,0,4,0],[331,20,331,30,65,0,4,1],[333,17,333,27,65,0,4,0],[335,21,335,27,65,0,4,1],[337,21,337,39,65,0,4,0],[337,21,337,39,65,0,4,1],[268,13,268,38,69,0,4,1],[326,13,326,22,70,0,4,0],[326,13,326,22,70,0,4,1],[328,13,328,24,70,0,4,0],[328,13,328,24,70,0,4,1],[331,20,331,30,70,0,4,0],[331,20,331,30,70,0,4,1],[331,34,331,46,70,0,4,0],[333,17,333,27,70,0,4,0],[335,21,335,27,70,0,4,1],[337,21,337,39,70,0,4,0],[337,21,337,39,70,0,4,1],[117,21,117,31,73,0,4,0],[117,21,117,31,73,0,4,1],[117,21,117,31,74,0,4,1],[146,13,146,28,78,0,4,0],[146,13,146,28,78,0,4,1],[150,21,150,35,78,0,4,1],[166,13,166,28,85,0,4,0],[177,21,177,43,85,0,4,0],[177,21,177,43,85,0,4,1],[166,13,166,28,90,0,4,0],[166,13,166,28,90,0,4,1],[177,21,177,43,90,0,4,1],[166,13,166,28,95,0,4,0],[170,21,170,35,95,0,4,1],[177,21,177,43,95,0,4,0],[177,21,177,43,95,0,4,1],[166,13,166,28,100,0,4,0],[170,21,170,35,100,0,4,1],[177,21,177,43,100,0,4,1],[117,21,117,31,123,0,4,0],[117,21,117,31,123,0,4,1],[268,13,268,38,126,0,4,1],[268,13,268,38,127,0,4,1],[268,13,268,38,133,0,4,1],[268,13,268,38,135,0,4,1],[268,13,268,38,136,0,4,1],[117,21,117,31,142,0,4,0],[117,21,117,31,142,0,4,1],[117,21,117,31,145,0,4,1],[117,21,117,31,146,0,4,1],[117,21,117,31,149,0,4,1],[117,21,117,31,153,0,4,0],[117,21,117,31,153,0,4,1],[117,21,117,31,154,0,4,1],[117,21,117,31,157,0,4,0],[117,21,117,31,157,0,4,1]],\"OJPEGLibjpegJpegSourceMgrFillInputBuffer\":[[2772,9,2772,47,0,0,4,0],[2772,9,2772,47,0,0,4,1]],\"TIFFReadDirEntryCheckedSlong\":[[3366,9,3366,35,0,0,4,0],[3366,9,3366,35,0,0,4,1]],\"TIFFFlushData\":[[148,9,148,49,0,0,4,0],[148,9,148,49,0,0,4,1],[150,9,150,41,0,0,4,1]],\"_TIFFcallocExt\":[[135,9,135,20,0,0,4,0],[135,24,135,57,0,0,4,1]],\"countInkNamesString\":[[196,9,196,17,0,0,4,0],[196,9,196,17,0,0,4,1],[202,20,202,27,0,0,4,0],[202,31,202,42,0,0,4,0],[202,31,202,42,0,0,4,1],[205,17,205,25,0,0,4,1],[209,18,209,25,0,0,4,0],[209,18,209,25,0,0,4,1]],\"allocChoppedUpStripArrays\":[[7259,9,7259,50,0,0,4,1],[7260,9,7260,46,0,0,4,1],[7271,9,7271,26,0,0,4,1],[7271,30,7271,48,0,0,4,1],[7288,17,7288,28,0,0,4,0],[7288,17,7288,28,0,0,4,1],[7290,13,7290,35,0,0,4,0],[7290,13,7290,35,0,0,4,1],[7293,25,7293,35,0,0,4,0],[7293,25,7293,35,0,0,4,1]],\"OJPEGReadWord\":[[2337,9,2337,35,0,0,4,0],[2337,9,2337,35,0,0,4,1],[2340,9,2340,35,0,0,4,0],[2340,9,2340,35,0,0,4,1]],\"TIFFInitPixarLog\":[[1609,9,1609,79,0,0,4,1],[1620,9,1620,30,0,0,4,1]],\"Fax3BadLength\":[[219,21,219,31,0,0,4,0],[219,21,219,31,0,0,4,1],[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFNumberOfStrips\":[[64,16,64,51,0,0,4,0],[64,16,64,51,0,0,4,1],[67,9,67,53,0,0,4,0],[67,9,67,53,0,0,4,1],[282,6,282,54,1,0,4,0],[282,6,282,54,1,0,4,1]],\"TIFFReadDirEntrySlong8Array\":[[2606,9,2606,23,0,0,4,1],[2607,9,2607,24,0,0,4,1],[2608,9,2608,24,0,0,4,1],[2609,9,2609,25,0,0,4,1],[2610,9,2610,23,0,0,4,1],[2611,9,2611,24,0,0,4,1],[2612,9,2612,24,0,0,4,1],[2613,9,2613,25,0,0,4,0],[2615,9,2615,16,0,0,4,1],[2619,9,2619,39,0,0,4,0],[2619,9,2619,39,0,0,4,1],[2619,43,2619,58,0,0,4,0],[2619,43,2619,58,0,0,4,1],[2624,13,2624,32,0,0,4,1],[2626,9,2626,24,0,0,4,1],[2646,9,2646,25,0,0,4,0],[2648,17,2648,43,0,0,4,0],[2648,17,2648,43,0,0,4,1]],\"_TIFFreallocExt\":[[152,9,152,20,0,0,4,0],[152,24,152,57,0,0,4,1]],\"_TIFFSeekOK\":[[457,12,457,37,0,0,4,0],[457,12,457,37,0,0,4,1],[457,41,457,80,0,0,4,0],[457,41,457,80,0,0,4,1]],\"TIFFInitSGILog\":[[1790,9,1790,75,0,0,4,1],[1800,9,1800,30,0,0,4,1],[1805,23,1805,55,0,0,4,0],[1805,23,1805,55,0,0,4,1]],\"TIFFInitLZMA\":[[448,9,448,71,0,0,4,1],[458,9,458,30,0,0,4,1],[482,26,482,61,0,0,4,0]],\"_TIFFReserveLargeEnoughWriteBuffer\":[[192,9,192,51,0,0,4,1]],\"PixarLogVGetField\":[[1579,9,1579,37,0,0,4,1],[1582,9,1582,37,0,0,4,1],[1585,9,1585,16,0,0,4,0]],\"Fax3SetupState\":[[499,9,499,34,0,0,4,0],[499,9,499,34,0,0,4,1],[518,9,518,57,0,0,4,1],[531,21,531,62,0,0,4,0],[531,21,531,62,0,0,4,1],[532,21,532,64,0,0,4,0],[532,21,532,64,0,0,4,1],[541,9,541,21,0,0,4,0],[541,9,541,21,0,0,4,1],[545,9,545,26,0,0,4,0],[545,9,545,26,0,0,4,1],[545,30,545,78,0,0,4,0],[545,30,545,78,0,0,4,1],[555,9,555,26,0,0,4,1],[560,9,560,21,0,0,4,0],[560,9,560,21,0,0,4,1],[564,9,564,52,0,0,4,0],[564,9,564,52,0,0,4,1],[571,9,571,21,0,0,4,0],[571,9,571,21,0,0,4,1],[582,13,582,33,0,0,4,1],[250,22,250,62,3,0,4,0],[302,27,302,63,7,0,4,0],[302,27,302,63,7,0,4,1],[302,27,302,63,8,0,4,0],[302,27,302,63,8,0,4,1],[302,27,302,63,9,0,4,0],[302,27,302,63,10,0,4,0],[97,26,97,69,12,0,4,0],[97,26,97,69,12,0,4,1],[282,6,282,54,16,0,4,0]],\"LZWCleanup\":[[1384,9,1384,39,0,0,4,0],[1384,9,1384,39,0,0,4,1],[1387,9,1387,39,0,0,4,1]],\"TIFFVTileSize64\":[[192,9,192,31,0,0,4,1],[192,35,192,56,0,0,4,0],[192,35,192,56,0,0,4,1],[193,9,193,30,0,0,4,0],[193,9,193,30,0,0,4,1],[195,9,195,53,0,0,4,0],[195,9,195,53,0,0,4,1],[196,9,196,50,0,0,4,0],[196,9,196,50,0,0,4,1],[197,9,197,38,0,0,4,0],[197,9,197,38,0,0,4,1],[197,42,197,61,0,0,4,0],[215,14,215,38,0,0,4,0],[215,14,215,38,0,0,4,1],[215,42,215,66,0,0,4,0],[215,42,215,66,0,0,4,1],[216,14,216,38,0,0,4,0],[216,14,216,38,0,0,4,1],[217,14,217,38,0,0,4,0],[217,14,217,38,0,0,4,1],[217,42,217,66,0,0,4,0],[217,42,217,66,0,0,4,1],[218,14,218,38,0,0,4,0],[218,14,218,38,0,0,4,1],[282,6,282,54,5,0,4,0],[282,6,282,54,5,0,4,1],[282,6,282,54,6,0,4,0],[282,6,282,54,6,0,4,1],[296,6,296,16,7,0,4,0],[296,6,296,16,7,0,4,1]],\"TIFFInitJBIG\":[[213,9,213,41,0,0,4,1]],\"LZMAVSetField\":[[395,9,395,32,0,0,4,1],[409,9,409,16,0,0,4,0]],\"Fax3VSetField\":[[1267,9,1267,29,0,0,4,0],[1267,9,1267,29,0,0,4,1],[1270,9,1270,33,0,0,4,0],[1270,9,1270,33,0,0,4,1],[1273,9,1273,35,0,0,4,0],[1273,9,1273,35,0,0,4,1],[1275,17,1275,69,0,0,4,0],[1278,9,1278,35,0,0,4,0],[1278,9,1278,35,0,0,4,1],[1280,17,1280,69,0,0,4,0],[1283,9,1283,33,0,0,4,0],[1283,9,1283,33,0,0,4,1],[1286,9,1286,34,0,0,4,0],[1286,9,1286,34,0,0,4,1],[1289,9,1289,44,0,0,4,0],[1289,9,1289,44,0,0,4,1],[1292,9,1292,16,0,0,4,0],[1292,9,1292,16,0,0,4,1],[1296,9,1296,51,0,0,4,0]],\"TIFFReadDirEntryCheckRangeByteLong\":[[3593,9,3593,21,0,0,4,0],[3593,9,3593,21,0,0,4,1]],\"ZIPPreDecode\":[[139,9,139,46,0,0,4,1],[150,27,150,65,0,0,4,0]],\"TIFFReadDirEntryLong8ArrayWithLimit\":[[2431,9,2431,23,0,0,4,0],[2431,9,2431,23,0,0,4,1],[2432,9,2432,24,0,0,4,0],[2432,9,2432,24,0,0,4,1],[2433,9,2433,24,0,0,4,0],[2433,9,2433,24,0,0,4,1],[2434,9,2434,25,0,0,4,0],[2434,9,2434,25,0,0,4,1],[2435,9,2435,23,0,0,4,0],[2435,9,2435,23,0,0,4,1],[2436,9,2436,24,0,0,4,0],[2436,9,2436,24,0,0,4,1],[2437,9,2437,24,0,0,4,0],[2437,9,2437,24,0,0,4,1],[2438,9,2438,25,0,0,4,0],[2438,9,2438,25,0,0,4,1],[2440,9,2440,16,0,0,4,0],[2440,9,2440,16,0,0,4,1],[2445,9,2445,39,0,0,4,0],[2445,9,2445,39,0,0,4,1],[2445,43,2445,58,0,0,4,0],[2445,43,2445,58,0,0,4,1],[2450,13,2450,32,0,0,4,0],[2450,13,2450,32,0,0,4,1],[2452,9,2452,24,0,0,4,0],[2452,9,2452,24,0,0,4,1],[2454,17,2454,43,0,0,4,0],[2454,17,2454,43,0,0,4,1],[2457,9,2457,25,0,0,4,0],[2457,9,2457,25,0,0,4,1],[2462,25,2462,34,0,0,4,0],[2462,25,2462,34,0,0,4,1],[2464,21,2464,47,0,0,4,0],[2464,21,2464,47,0,0,4,1],[2467,21,2467,49,0,0,4,0],[2467,21,2467,49,0,0,4,1],[2479,9,2479,18,0,0,4,1],[2484,13,2484,32,0,0,4,1],[2486,9,2486,23,0,0,4,0],[2486,9,2486,23,0,0,4,1],[2493,25,2493,34,0,0,4,0],[2493,25,2493,34,0,0,4,1],[2497,9,2497,24,0,0,4,0],[2497,9,2497,24,0,0,4,1],[2504,25,2504,34,0,0,4,0],[2504,25,2504,34,0,0,4,1],[2507,21,2507,49,0,0,4,0],[2507,21,2507,49,0,0,4,1],[2513,9,2513,24,0,0,4,0],[2513,9,2513,24,0,0,4,1],[2520,25,2520,34,0,0,4,0],[2520,25,2520,34,0,0,4,1],[2522,21,2522,47,0,0,4,0],[2522,21,2522,47,0,0,4,1],[2528,9,2528,25,0,0,4,0],[2528,9,2528,25,0,0,4,1],[2535,25,2535,34,0,0,4,0],[2535,25,2535,34,0,0,4,1],[2537,21,2537,47,0,0,4,0],[2537,21,2537,47,0,0,4,1],[2540,21,2540,49,0,0,4,0],[2540,21,2540,49,0,0,4,1],[2546,9,2546,23,0,0,4,0],[2546,9,2546,23,0,0,4,1],[2553,25,2553,34,0,0,4,0],[2553,25,2553,34,0,0,4,1],[2555,21,2555,47,0,0,4,0],[2555,21,2555,47,0,0,4,1],[2561,9,2561,24,0,0,4,0],[2561,9,2561,24,0,0,4,1],[2568,25,2568,34,0,0,4,0],[2568,25,2568,34,0,0,4,1],[2570,21,2570,47,0,0,4,0],[2570,21,2570,47,0,0,4,1],[2573,21,2573,49,0,0,4,0],[2573,21,2573,49,0,0,4,1],[2581,9,2581,37,0,0,4,0],[2581,9,2581,37,0,0,4,1]],\"TIFFWriteDirectoryTagCheckedShort\":[[2247,9,2247,35,0,0,4,1]],\"OJPEGPostDecode\":[[996,9,996,66,0,0,4,1]],\"setExtraSamples\":[[146,9,146,46,0,0,4,0],[146,9,146,46,0,0,4,1],[149,9,149,15,0,0,4,0],[149,9,149,15,0,0,4,1],[149,19,149,29,0,0,4,1],[151,17,151,23,0,0,4,0],[151,17,151,23,0,0,4,1],[153,13,153,43,0,0,4,0],[153,13,153,43,0,0,4,1],[161,17,161,54,0,0,4,1],[168,9,168,43,0,0,4,1]],\"OkToChangeTag\":[[1116,9,1116,13,0,0,4,1],[1122,9,1122,35,0,0,4,0],[1122,9,1122,35,0,0,4,1],[1122,39,1122,74,0,0,4,1]],\"TIFFReadDirEntryDoubleArray\":[[3002,9,3002,23,0,0,4,0],[3002,9,3002,23,0,0,4,1],[3003,9,3003,24,0,0,4,0],[3003,9,3003,24,0,0,4,1],[3004,9,3004,24,0,0,4,0],[3004,9,3004,24,0,0,4,1],[3005,9,3005,25,0,0,4,0],[3005,9,3005,25,0,0,4,1],[3006,9,3006,23,0,0,4,0],[3006,9,3006,23,0,0,4,1],[3007,9,3007,24,0,0,4,0],[3007,9,3007,24,0,0,4,1],[3008,9,3008,24,0,0,4,0],[3008,9,3008,24,0,0,4,1],[3009,9,3009,25,0,0,4,0],[3009,9,3009,25,0,0,4,1],[3010,9,3010,27,0,0,4,0],[3010,9,3010,27,0,0,4,1],[3011,9,3011,28,0,0,4,0],[3011,9,3011,28,0,0,4,1],[3012,9,3012,24,0,0,4,0],[3012,9,3012,24,0,0,4,1],[3013,9,3013,25,0,0,4,0],[3013,9,3013,25,0,0,4,1],[3015,9,3015,16,0,0,4,0],[3015,9,3015,16,0,0,4,1],[3019,9,3019,39,0,0,4,0],[3019,9,3019,39,0,0,4,1],[3019,43,3019,58,0,0,4,0],[3019,43,3019,58,0,0,4,1],[3024,13,3024,32,0,0,4,0],[3024,13,3024,32,0,0,4,1],[3026,9,3026,25,0,0,4,0],[3026,9,3026,25,0,0,4,1],[3027,17,3027,43,0,0,4,0],[3027,17,3027,43,0,0,4,1],[3034,9,3034,18,0,0,4,1],[3039,13,3039,32,0,0,4,1],[3041,9,3041,23,0,0,4,0],[3041,9,3041,23,0,0,4,1],[3048,25,3048,34,0,0,4,0],[3048,25,3048,34,0,0,4,1],[3052,9,3052,24,0,0,4,0],[3052,9,3052,24,0,0,4,1],[3059,25,3059,34,0,0,4,0],[3059,25,3059,34,0,0,4,1],[3063,9,3063,24,0,0,4,0],[3063,9,3063,24,0,0,4,1],[3070,25,3070,34,0,0,4,0],[3070,25,3070,34,0,0,4,1],[3072,21,3072,47,0,0,4,0],[3072,21,3072,47,0,0,4,1],[3078,9,3078,25,0,0,4,0],[3078,9,3078,25,0,0,4,1],[3085,25,3085,34,0,0,4,0],[3085,25,3085,34,0,0,4,1],[3087,21,3087,47,0,0,4,0],[3087,21,3087,47,0,0,4,1],[3093,9,3093,23,0,0,4,0],[3093,9,3093,23,0,0,4,1],[3100,25,3100,34,0,0,4,0],[3100,25,3100,34,0,0,4,1],[3102,21,3102,47,0,0,4,0],[3102,21,3102,47,0,0,4,1],[3108,9,3108,24,0,0,4,0],[3108,9,3108,24,0,0,4,1],[3115,25,3115,34,0,0,4,0],[3115,25,3115,34,0,0,4,1],[3117,21,3117,47,0,0,4,0],[3117,21,3117,47,0,0,4,1],[3123,9,3123,24,0,0,4,0],[3123,9,3123,24,0,0,4,1],[3130,25,3130,34,0,0,4,0],[3130,25,3130,34,0,0,4,1],[3132,21,3132,47,0,0,4,1],[3147,9,3147,25,0,0,4,0],[3147,9,3147,25,0,0,4,1],[3154,25,3154,34,0,0,4,0],[3154,25,3154,34,0,0,4,1],[3156,21,3156,47,0,0,4,1],[3162,9,3162,27,0,0,4,0],[3162,9,3162,27,0,0,4,1],[3171,25,3171,34,0,0,4,0],[3171,25,3171,34,0,0,4,1],[3173,21,3173,47,0,0,4,1],[3176,21,3176,47,0,0,4,1],[3179,21,3179,29,0,0,4,0],[3179,21,3179,29,0,0,4,1],[3186,9,3186,28,0,0,4,0],[3186,9,3186,28,0,0,4,1],[3195,25,3195,34,0,0,4,0],[3195,25,3195,34,0,0,4,1],[3197,21,3197,47,0,0,4,1],[3201,21,3201,47,0,0,4,1],[3204,21,3204,29,0,0,4,0],[3204,21,3204,29,0,0,4,1],[3211,9,3211,24,0,0,4,0],[3211,9,3211,24,0,0,4,1],[3216,17,3216,43,0,0,4,0],[3216,17,3216,43,0,0,4,1],[3221,25,3221,34,0,0,4,0],[3221,25,3221,34,0,0,4,1]],\"TIFFReadRawTile1\":[[1093,9,1093,18,0,0,4,0],[1097,13,1097,20,0,0,4,0],[1097,13,1097,20,0,0,4,1],[1106,13,1106,23,0,0,4,0],[1106,13,1106,23,0,0,4,1]],\"TIFFSwabArrayOfShort\":[[87,12,87,19,0,0,4,0],[87,12,87,19,0,0,4,1]],\"_WriteAsType\":[[1813,9,1813,40,0,0,4,0]],\"TIFFHashSetGetNewListElt\":[[192,9,192,29,0,0,4,1]],\"OJPEGReadHeaderInfoSecStreamDht\":[[1723,9,1723,35,0,0,4,0],[1723,9,1723,35,0,0,4,1],[1725,9,1725,15,0,0,4,0],[1725,9,1725,15,0,0,4,1],[1727,13,1727,40,0,0,4,1],[1731,9,1731,36,0,0,4,0],[1731,9,1731,36,0,0,4,1],[1739,13,1739,20,0,0,4,1],[1749,13,1749,70,0,0,4,1],[1755,13,1755,27,0,0,4,0],[1757,17,1757,22,0,0,4,1],[1763,17,1763,36,0,0,4,1]],\"LogLuvCleanup\":[[1686,9,1686,17,0,0,4,1]],\"_TIFFFax3fillruns\":[[380,9,380,26,0,0,4,0],[380,9,380,26,0,0,4,1],[383,12,383,23,0,0,4,0],[383,12,383,23,0,0,4,1],[386,13,386,28,0,0,4,0],[386,13,386,28,0,0,4,1],[386,32,386,43,0,0,4,1],[388,13,388,16,0,0,4,0],[388,13,388,16,0,0,4,1],[392,17,392,29,0,0,4,0],[392,17,392,29,0,0,4,1],[394,21,394,23,0,0,4,0],[394,21,394,23,0,0,4,1],[399,21,399,40,0,0,4,0],[399,21,399,40,0,0,4,1],[401,25,401,50,0,0,4,0],[401,25,401,50,0,0,4,1],[406,32,406,33,0,0,4,0],[406,37,406,47,0,0,4,0],[406,37,406,47,0,0,4,1],[414,34,414,38,0,0,4,0],[414,34,414,38,0,0,4,1],[420,21,420,24,0,0,4,0],[420,21,420,24,0,0,4,1],[428,13,428,28,0,0,4,1],[428,32,428,43,0,0,4,1],[430,13,430,16,0,0,4,0],[430,13,430,16,0,0,4,1],[434,17,434,29,0,0,4,0],[434,17,434,29,0,0,4,1],[436,21,436,23,0,0,4,0],[436,21,436,23,0,0,4,1],[441,21,441,40,0,0,4,0],[441,21,441,40,0,0,4,1],[443,25,443,50,0,0,4,0],[443,25,443,50,0,0,4,1],[448,32,448,33,0,0,4,0],[448,37,448,47,0,0,4,0],[448,37,448,47,0,0,4,1],[456,34,456,38,0,0,4,0],[456,34,456,38,0,0,4,1],[463,21,463,24,0,0,4,0],[463,21,463,24,0,0,4,1],[360,29,360,40,2,0,4,0],[360,29,360,40,2,0,4,1],[353,29,353,40,4,0,4,0],[353,29,353,40,4,0,4,1]],\"_TIFFMultiply32\":[[38,9,38,15,0,0,4,0],[38,9,38,15,0,0,4,1],[38,19,38,46,0,0,4,0],[38,19,38,46,0,0,4,1]],\"Fax3Cleanup\":[[1219,9,1219,17,0,0,4,0],[1219,9,1219,17,0,0,4,1],[1221,9,1221,20,0,0,4,0],[1221,9,1221,20,0,0,4,1]],\"InitCCITTFax3\":[[1409,9,1409,69,0,0,4,1],[1421,9,1421,30,0,0,4,1],[1442,9,1442,32,0,0,4,0]],\"Fax3DecodeRLE\":[[1653,9,1653,29,0,0,4,0],[1653,9,1653,29,0,0,4,1],[1660,12,1660,19,0,0,4,0],[1660,12,1660,19,0,0,4,1],[1675,13,1675,37,0,0,4,0],[371,21,371,31,3,0,4,0],[371,21,371,31,3,0,4,1],[374,21,374,33,3,0,4,0],[374,21,374,33,3,0,4,1],[377,21,377,35,3,0,4,0],[377,21,377,35,3,0,4,1],[378,21,378,34,3,0,4,0],[378,21,378,34,3,0,4,1],[382,21,382,28,3,0,4,0],[382,21,382,28,3,0,4,1],[388,17,388,28,3,0,4,0],[388,17,388,28,3,0,4,1],[395,21,395,31,3,0,4,0],[395,21,395,31,3,0,4,1],[398,21,398,33,3,0,4,0],[398,21,398,33,3,0,4,1],[401,21,401,35,3,0,4,0],[401,21,401,35,3,0,4,1],[402,21,402,34,3,0,4,0],[402,21,402,34,3,0,4,1],[406,21,406,28,3,0,4,0],[406,21,406,28,3,0,4,1],[412,17,412,28,3,0,4,0],[412,17,412,28,3,0,4,1],[414,17,414,31,3,0,4,1],[268,13,268,38,15,0,4,1],[268,13,268,38,22,0,4,1],[326,13,326,22,27,0,4,1],[328,13,328,24,27,0,4,0],[331,20,331,30,27,0,4,1],[333,17,333,27,27,0,4,0],[335,21,335,27,27,0,4,1],[337,21,337,39,27,0,4,1],[326,13,326,22,28,0,4,0],[326,13,326,22,28,0,4,1],[328,13,328,24,28,0,4,0],[328,13,328,24,28,0,4,1],[331,20,331,30,28,0,4,0],[331,20,331,30,28,0,4,1],[331,34,331,46,28,0,4,0],[333,17,333,27,28,0,4,0],[335,21,335,27,28,0,4,1],[337,21,337,39,28,0,4,0],[337,21,337,39,28,0,4,1],[166,13,166,28,30,0,4,0],[166,13,166,28,30,0,4,1],[170,21,170,35,30,0,4,0],[170,21,170,35,30,0,4,1],[177,21,177,43,30,0,4,0],[177,21,177,43,30,0,4,1],[166,13,166,28,35,0,4,0],[166,13,166,28,35,0,4,1],[177,21,177,43,35,0,4,0],[177,21,177,43,35,0,4,1],[268,13,268,38,43,0,4,1],[268,13,268,38,46,0,4,1],[268,13,268,38,48,0,4,1],[268,13,268,38,49,0,4,1],[117,21,117,31,52,0,4,0],[117,21,117,31,52,0,4,1],[117,21,117,31,53,0,4,0],[117,21,117,31,53,0,4,1],[117,21,117,31,56,0,4,1],[117,21,117,31,57,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSlong8\":[[3827,9,3827,20,0,0,4,0],[3827,9,3827,20,0,0,4,1],[3827,24,3827,53,0,0,4,0],[3827,24,3827,53,0,0,4,1]],\"TIFFStripSize64\":[[188,9,188,33,0,0,4,0],[188,9,188,33,0,0,4,1]],\"_TIFFVSetField\":[[231,9,231,20,0,0,4,1],[239,9,239,39,0,0,4,0],[239,9,239,39,0,0,4,1],[246,9,246,33,0,0,4,0],[246,9,246,33,0,0,4,1],[249,9,249,32,0,0,4,0],[249,9,249,32,0,0,4,1],[252,9,252,33,0,0,4,0],[252,9,252,33,0,0,4,1],[255,9,255,35,0,0,4,0],[255,9,255,35,0,0,4,1],[264,17,264,43,0,0,4,0],[264,17,264,43,0,0,4,1],[266,21,266,46,0,0,4,0],[266,21,266,46,0,0,4,1],[268,26,268,52,0,0,4,0],[268,26,268,52,0,0,4,1],[270,26,270,52,0,0,4,0],[270,26,270,52,0,0,4,1],[272,26,272,52,0,0,4,0],[272,26,272,52,0,0,4,1],[274,26,274,52,0,0,4,0],[274,26,274,52,0,0,4,1],[276,26,276,53,0,0,4,0],[276,26,276,53,0,0,4,1],[280,9,280,33,0,0,4,0],[280,9,280,33,0,0,4,1],[289,21,289,54,0,0,4,0],[289,21,289,54,0,0,4,1],[297,17,297,65,0,0,4,0],[302,9,302,33,0,0,4,0],[302,9,302,33,0,0,4,1],[305,9,305,35,0,0,4,0],[305,9,305,35,0,0,4,1],[308,9,308,31,0,0,4,0],[308,9,308,31,0,0,4,1],[310,17,310,39,0,0,4,0],[310,17,310,39,0,0,4,1],[310,43,310,65,0,0,4,0],[310,43,310,65,0,0,4,1],[314,9,314,33,0,0,4,0],[314,9,314,33,0,0,4,1],[316,17,316,40,0,0,4,0],[316,17,316,40,0,0,4,1],[316,44,316,67,0,0,4,0],[316,44,316,67,0,0,4,1],[321,9,321,37,0,0,4,0],[321,9,321,37,0,0,4,1],[323,17,323,23,0,0,4,0],[323,17,323,23,0,0,4,1],[325,17,325,44,0,0,4,0],[325,17,325,44,0,0,4,1],[328,21,328,51,0,0,4,0],[328,21,328,51,0,0,4,1],[338,21,338,51,0,0,4,0],[338,21,338,51,0,0,4,1],[351,21,351,55,0,0,4,1],[366,9,366,34,0,0,4,0],[366,9,366,34,0,0,4,1],[368,17,368,25,0,0,4,0],[368,17,368,25,0,0,4,1],[371,17,371,30,0,0,4,0],[371,17,371,30,0,0,4,1],[377,9,377,36,0,0,4,0],[377,9,377,36,0,0,4,1],[380,9,380,36,0,0,4,0],[380,9,380,36,0,0,4,1],[383,9,383,37,0,0,4,0],[383,9,383,37,0,0,4,1],[384,17,384,48,0,0,4,0],[393,9,393,37,0,0,4,0],[393,9,393,37,0,0,4,1],[394,17,394,48,0,0,4,0],[403,9,403,33,0,0,4,0],[403,9,403,33,0,0,4,1],[405,17,405,33,0,0,4,0],[405,17,405,33,0,0,4,1],[405,37,405,47,0,0,4,0],[405,37,405,47,0,0,4,1],[409,9,409,33,0,0,4,0],[409,9,409,33,0,0,4,1],[411,17,411,33,0,0,4,0],[411,17,411,33,0,0,4,1],[411,37,411,47,0,0,4,0],[411,37,411,47,0,0,4,1],[415,9,415,34,0,0,4,0],[415,9,415,34,0,0,4,1],[417,17,417,41,0,0,4,0],[417,17,417,41,0,0,4,1],[417,45,417,71,0,0,4,0],[417,45,417,71,0,0,4,1],[421,9,421,31,0,0,4,0],[421,9,421,31,0,0,4,1],[424,9,424,31,0,0,4,0],[424,9,424,31,0,0,4,1],[427,9,427,36,0,0,4,0],[427,9,427,36,0,0,4,1],[429,17,429,33,0,0,4,0],[429,17,429,33,0,0,4,1],[429,37,429,59,0,0,4,0],[429,37,429,59,0,0,4,1],[433,9,433,32,0,0,4,0],[433,9,433,32,0,0,4,1],[437,9,437,35,0,0,4,0],[437,9,437,35,0,0,4,1],[441,9,441,30,0,0,4,0],[441,9,441,30,0,0,4,1],[450,9,450,34,0,0,4,0],[450,9,450,34,0,0,4,1],[451,17,451,46,0,0,4,0],[451,17,451,46,0,0,4,1],[454,9,454,30,0,0,4,0],[454,9,454,30,0,0,4,1],[456,17,456,36,0,0,4,0],[456,17,456,36,0,0,4,1],[462,9,462,31,0,0,4,0],[462,9,462,31,0,0,4,1],[464,17,464,25,0,0,4,0],[464,17,464,25,0,0,4,1],[466,21,466,46,0,0,4,1],[475,9,475,32,0,0,4,0],[475,9,475,32,0,0,4,1],[477,17,477,25,0,0,4,0],[477,17,477,25,0,0,4,1],[479,21,479,46,0,0,4,1],[488,9,488,31,0,0,4,0],[488,9,488,31,0,0,4,1],[490,17,490,25,0,0,4,0],[490,17,490,25,0,0,4,1],[494,9,494,30,0,0,4,0],[494,9,494,30,0,0,4,1],[498,17,498,35,0,0,4,0],[498,17,498,35,0,0,4,1],[501,17,501,34,0,0,4,0],[501,17,501,34,0,0,4,1],[504,17,504,35,0,0,4,0],[504,17,504,35,0,0,4,1],[507,17,507,37,0,0,4,0],[507,17,507,37,0,0,4,1],[510,17,510,24,0,0,4,0],[510,17,510,24,0,0,4,1],[515,9,515,34,0,0,4,0],[515,9,515,34,0,0,4,1],[517,17,517,38,0,0,4,0],[517,17,517,38,0,0,4,1],[517,42,517,72,0,0,4,0],[517,42,517,72,0,0,4,1],[522,17,522,63,0,0,4,0],[522,17,522,63,0,0,4,1],[523,17,523,43,0,0,4,0],[523,17,523,43,0,0,4,1],[524,17,524,58,0,0,4,1],[526,23,526,69,0,0,4,0],[526,23,526,69,0,0,4,1],[527,23,527,72,0,0,4,1],[528,22,528,48,0,0,4,0],[528,22,528,48,0,0,4,1],[529,22,529,63,0,0,4,1],[532,9,532,32,0,0,4,0],[532,9,532,32,0,0,4,1],[535,9,535,28,0,0,4,0],[535,9,535,28,0,0,4,1],[536,17,536,54,0,0,4,0],[550,9,550,38,0,0,4,0],[550,9,550,38,0,0,4,1],[553,9,553,38,0,0,4,0],[553,9,553,38,0,0,4,1],[557,9,557,38,0,0,4,0],[557,9,557,38,0,0,4,1],[560,17,560,67,0,0,4,0],[560,17,560,67,0,0,4,1],[561,25,561,30,0,0,4,0],[561,25,561,30,0,0,4,1],[567,9,567,41,0,0,4,0],[567,9,567,41,0,0,4,1],[572,9,572,30,0,0,4,0],[572,9,572,30,0,0,4,1],[579,17,579,34,0,0,4,0],[579,17,579,34,0,0,4,1],[606,25,606,70,0,0,4,0],[606,25,606,70,0,0,4,1],[620,9,620,34,0,0,4,0],[620,9,620,34,0,0,4,1],[645,25,645,70,0,0,4,0],[645,25,645,70,0,0,4,1],[657,9,657,31,0,0,4,1],[664,9,664,16,0,0,4,0],[664,9,664,16,0,0,4,1],[680,17,680,47,0,0,4,1],[690,17,690,47,0,0,4,1],[705,31,705,64,0,0,4,0],[705,31,705,64,0,0,4,1],[707,21,707,72,0,0,4,1],[722,17,722,27,0,0,4,0],[730,21,730,38,0,0,4,1],[754,17,754,29,0,0,4,1],[762,17,762,46,0,0,4,0],[762,17,762,46,0,0,4,1],[766,21,766,41,0,0,4,0],[766,21,766,41,0,0,4,1],[776,25,776,43,0,0,4,1],[792,21,792,41,0,0,4,0],[792,21,792,41,0,0,4,1],[794,25,794,64,0,0,4,0],[794,25,794,64,0,0,4,1],[799,26,799,64,0,0,4,1],[800,26,800,65,0,0,4,1],[802,26,802,59,0,0,4,1],[807,21,807,35,0,0,4,0],[807,21,807,35,0,0,4,1],[821,21,821,31,0,0,4,1],[827,21,827,55,0,0,4,0],[827,21,827,55,0,0,4,1],[828,21,828,61,0,0,4,0],[840,26,840,46,0,0,4,0],[840,26,840,46,0,0,4,1],[841,26,841,64,0,0,4,1],[842,26,842,65,0,0,4,1],[843,26,843,59,0,0,4,1],[843,63,843,76,0,0,4,0],[843,63,843,76,0,0,4,1],[851,25,851,57,0,0,4,0],[853,29,853,63,0,0,4,0],[853,29,853,63,0,0,4,1],[856,45,856,58,0,0,4,0],[856,45,856,58,0,0,4,1],[858,37,858,59,0,0,4,0],[858,37,858,59,0,0,4,1],[872,34,872,69,0,0,4,0],[872,34,872,69,0,0,4,1],[875,45,875,58,0,0,4,0],[875,45,875,58,0,0,4,1],[877,37,877,57,0,0,4,0],[877,37,877,57,0,0,4,1],[878,37,878,64,0,0,4,0],[878,37,878,64,0,0,4,1],[901,25,901,39,0,0,4,0],[901,25,901,39,0,0,4,1],[902,25,902,44,0,0,4,1],[908,25,908,40,0,0,4,1],[914,25,914,40,0,0,4,0],[914,25,914,40,0,0,4,1],[920,25,920,41,0,0,4,1],[926,25,926,39,0,0,4,0],[926,25,926,39,0,0,4,1],[927,25,927,38,0,0,4,1],[933,25,933,40,0,0,4,1],[939,25,939,40,0,0,4,1],[940,25,940,39,0,0,4,0],[940,25,940,39,0,0,4,1],[946,33,946,65,0,0,4,0],[947,33,947,51,0,0,4,0],[947,33,947,51,0,0,4,1],[959,25,959,41,0,0,4,1],[978,25,978,43,0,0,4,1],[979,25,979,44,0,0,4,1],[1008,25,1008,40,0,0,4,0],[1008,25,1008,40,0,0,4,1],[1015,25,1015,41,0,0,4,0],[1015,25,1015,41,0,0,4,1],[1021,25,1021,32,0,0,4,1],[1030,9,1030,15,0,0,4,0],[1030,9,1030,15,0,0,4,1],[1033,13,1033,17,0,0,4,0],[1045,37,1045,41,0,0,4,0],[1053,39,1053,43,0,0,4,0],[1061,27,1061,31,0,0,4,0],[1071,24,1071,58,0,0,4,0],[1073,13,1073,65,0,0,4,0],[1073,13,1073,65,0,0,4,1],[1079,9,1079,20,0,0,4,0],[1082,13,1082,31,0,0,4,0],[1090,30,1090,59,0,0,4,1],[209,34,209,71,9,0,4,0],[209,34,209,71,9,0,4,1],[209,34,209,71,75,0,4,1],[209,34,209,71,77,0,4,0],[209,34,209,71,77,0,4,1],[209,34,209,71,79,0,4,1],[209,34,209,71,80,0,4,0],[209,34,209,71,80,0,4,1]],\"TIFFReadDirEntrySbyteArray\":[[1577,9,1577,28,0,0,4,1],[1578,9,1578,23,0,0,4,1],[1579,9,1579,24,0,0,4,0],[1580,9,1580,24,0,0,4,1],[1581,9,1581,25,0,0,4,1],[1582,9,1582,23,0,0,4,1],[1583,9,1583,24,0,0,4,1],[1584,9,1584,24,0,0,4,1],[1585,9,1585,25,0,0,4,1],[1587,9,1587,16,0,0,4,1],[1591,9,1591,39,0,0,4,0],[1591,9,1591,39,0,0,4,1],[1591,43,1591,58,0,0,4,0],[1591,43,1591,58,0,0,4,1],[1596,13,1596,32,0,0,4,1],[1598,9,1598,28,0,0,4,1],[1599,9,1599,23,0,0,4,1],[1617,9,1617,24,0,0,4,0]],\"_TIFFCastUInt64ToSSize\":[[86,9,86,42,0,0,4,0],[86,9,86,42,0,0,4,1],[88,13,88,24,0,0,4,0],[88,28,88,42,0,0,4,0]],\"TIFFComputeTile\":[[44,9,44,31,0,0,4,0],[44,9,44,31,0,0,4,1],[46,9,46,27,0,0,4,0],[46,9,46,27,0,0,4,1],[48,9,48,27,0,0,4,0],[48,9,48,27,0,0,4,1],[50,9,50,27,0,0,4,1],[52,9,52,16,0,0,4,0],[52,20,52,27,0,0,4,0],[52,31,52,38,0,0,4,0],[52,31,52,38,0,0,4,1],[58,13,58,57,0,0,4,0],[58,13,58,57,0,0,4,1],[282,6,282,54,1,0,4,0],[282,6,282,54,1,0,4,1],[282,6,282,54,2,0,4,0],[282,6,282,54,2,0,4,1],[282,6,282,54,3,0,4,0]],\"Fax3Decode2D\":[[300,9,300,29,0,0,4,0],[300,9,300,29,0,0,4,1],[306,12,306,19,0,0,4,0],[306,12,306,19,0,0,4,1],[326,13,326,17,0,0,4,0],[326,13,326,17,0,0,4,1],[331,13,331,37,0,0,4,0],[295,13,295,24,3,0,4,0],[295,13,295,24,3,0,4,1],[300,21,300,37,3,0,4,0],[300,21,300,37,3,0,4,1],[312,16,312,31,3,0,4,0],[312,16,312,31,3,0,4,1],[146,13,146,28,4,0,4,0],[146,13,146,28,4,0,4,1],[371,21,371,31,7,0,4,0],[371,21,371,31,7,0,4,1],[374,21,374,33,7,0,4,0],[374,21,374,33,7,0,4,1],[377,21,377,35,7,0,4,0],[377,21,377,35,7,0,4,1],[378,21,378,34,7,0,4,0],[378,21,378,34,7,0,4,1],[382,21,382,28,7,0,4,0],[382,21,382,28,7,0,4,1],[388,17,388,28,7,0,4,0],[388,17,388,28,7,0,4,1],[395,21,395,31,7,0,4,1],[398,21,398,33,7,0,4,0],[401,21,401,35,7,0,4,1],[402,21,402,34,7,0,4,1],[406,21,406,28,7,0,4,1],[412,17,412,28,7,0,4,1],[414,17,414,31,7,0,4,1],[454,16,454,26,8,0,4,0],[454,16,454,26,8,0,4,1],[456,17,456,42,8,0,4,1],[467,17,467,28,8,0,4,0],[467,17,467,28,8,0,4,1],[469,25,469,58,8,0,4,1],[484,17,484,29,8,0,4,0],[484,17,484,29,8,0,4,1],[485,25,485,43,8,0,4,0],[485,25,485,43,8,0,4,1],[492,33,492,45,8,0,4,0],[492,33,492,45,8,0,4,1],[495,33,495,47,8,0,4,1],[496,33,496,46,8,0,4,0],[496,33,496,46,8,0,4,1],[500,33,500,40,8,0,4,0],[500,33,500,40,8,0,4,1],[510,33,510,45,8,0,4,0],[513,33,513,47,8,0,4,1],[514,33,514,46,8,0,4,1],[518,33,518,40,8,0,4,1],[531,33,531,45,8,0,4,0],[531,33,531,45,8,0,4,1],[534,33,534,47,8,0,4,1],[535,33,535,46,8,0,4,0],[535,33,535,46,8,0,4,1],[539,33,539,40,8,0,4,0],[539,33,539,40,8,0,4,1],[549,33,549,45,8,0,4,0],[549,33,549,45,8,0,4,1],[552,33,552,47,8,0,4,1],[553,33,553,46,8,0,4,1],[557,33,557,40,8,0,4,0],[557,33,557,40,8,0,4,1],[565,17,565,26,8,0,4,0],[565,17,565,26,8,0,4,1],[568,25,568,54,8,0,4,1],[580,17,580,26,8,0,4,0],[580,17,580,26,8,0,4,1],[583,25,583,54,8,0,4,1],[595,17,595,26,8,0,4,0],[595,17,595,26,8,0,4,1],[597,25,597,55,8,0,4,0],[597,25,597,55,8,0,4,1],[605,17,605,27,8,0,4,0],[605,17,605,27,8,0,4,1],[609,17,609,27,8,0,4,0],[609,17,609,27,8,0,4,1],[617,17,617,24,8,0,4,1],[633,13,633,22,8,0,4,0],[633,13,633,22,8,0,4,1],[635,17,635,39,8,0,4,1],[268,13,268,38,9,0,4,1],[326,13,326,22,11,0,4,1],[328,13,328,24,11,0,4,0],[331,20,331,30,11,0,4,1],[333,17,333,27,11,0,4,0],[335,21,335,27,11,0,4,1],[337,21,337,39,11,0,4,1],[166,13,166,28,15,0,4,0],[166,13,166,28,15,0,4,1],[170,21,170,35,15,0,4,1],[177,21,177,43,15,0,4,0],[177,21,177,43,15,0,4,1],[146,13,146,28,18,0,4,0],[146,13,146,28,18,0,4,1],[150,21,150,35,18,0,4,0],[150,21,150,35,18,0,4,1],[194,20,194,47,19,0,4,0],[194,20,194,47,19,0,4,1],[117,21,117,31,24,0,4,1],[268,13,268,38,28,0,4,1],[268,13,268,38,35,0,4,1],[326,13,326,22,40,0,4,1],[328,13,328,24,40,0,4,0],[331,20,331,30,40,0,4,1],[333,17,333,27,40,0,4,0],[335,21,335,27,40,0,4,1],[337,21,337,39,40,0,4,1],[326,13,326,22,41,0,4,0],[326,13,326,22,41,0,4,1],[328,13,328,24,41,0,4,0],[331,20,331,30,41,0,4,0],[331,20,331,30,41,0,4,1],[331,34,331,46,41,0,4,0],[333,17,333,27,41,0,4,0],[335,21,335,27,41,0,4,1],[337,21,337,39,41,0,4,1],[432,13,432,26,46,0,4,1],[268,13,268,38,52,0,4,1],[268,13,268,38,57,0,4,1],[268,13,268,38,62,0,4,1],[268,13,268,38,67,0,4,1],[432,13,432,26,70,0,4,0],[433,20,433,28,70,0,4,0],[433,32,433,42,70,0,4,0],[433,32,433,42,70,0,4,1],[435,21,435,54,70,0,4,1],[432,13,432,26,72,0,4,0],[432,13,432,26,72,0,4,1],[433,20,433,28,72,0,4,0],[433,20,433,28,72,0,4,1],[433,32,433,42,72,0,4,0],[435,21,435,54,72,0,4,1],[268,13,268,38,73,0,4,1],[432,13,432,26,77,0,4,1],[268,13,268,38,78,0,4,1],[432,13,432,26,82,0,4,0],[432,13,432,26,82,0,4,1],[433,20,433,28,82,0,4,0],[433,20,433,28,82,0,4,1],[433,32,433,42,82,0,4,0],[435,21,435,54,82,0,4,1],[268,13,268,38,84,0,4,1],[146,13,146,28,88,0,4,0],[146,13,146,28,88,0,4,1],[150,21,150,35,88,0,4,0],[150,21,150,35,88,0,4,1],[194,20,194,47,89,0,4,0],[194,20,194,47,89,0,4,1],[326,13,326,22,96,0,4,1],[328,13,328,24,96,0,4,0],[331,20,331,30,96,0,4,1],[333,17,333,27,96,0,4,0],[335,21,335,27,96,0,4,1],[337,21,337,39,96,0,4,1],[268,13,268,38,100,0,4,1],[326,13,326,22,101,0,4,0],[326,13,326,22,101,0,4,1],[328,13,328,24,101,0,4,0],[328,13,328,24,101,0,4,1],[331,20,331,30,101,0,4,0],[331,20,331,30,101,0,4,1],[331,34,331,46,101,0,4,0],[333,17,333,27,101,0,4,0],[335,21,335,27,101,0,4,1],[337,21,337,39,101,0,4,0],[337,21,337,39,101,0,4,1],[268,13,268,38,107,0,4,1],[117,21,117,31,111,0,4,0],[117,21,117,31,111,0,4,1],[117,21,117,31,112,0,4,0],[117,21,117,31,112,0,4,1],[117,21,117,31,113,0,4,0],[117,21,117,31,113,0,4,1],[166,13,166,28,114,0,4,0],[166,13,166,28,114,0,4,1],[170,21,170,35,114,0,4,0],[170,21,170,35,114,0,4,1],[177,21,177,43,114,0,4,0],[177,21,177,43,114,0,4,1],[166,13,166,28,119,0,4,0],[177,21,177,43,119,0,4,1],[268,13,268,38,127,0,4,1],[268,13,268,38,130,0,4,1],[268,13,268,38,133,0,4,1],[146,13,146,28,138,0,4,0],[146,13,146,28,138,0,4,1],[150,21,150,35,138,0,4,1],[166,13,166,28,145,0,4,0],[177,21,177,43,145,0,4,0],[177,21,177,43,145,0,4,1],[166,13,166,28,150,0,4,1],[166,13,166,28,155,0,4,0],[177,21,177,43,155,0,4,1],[166,13,166,28,160,0,4,0],[166,13,166,28,160,0,4,1],[177,21,177,43,160,0,4,1],[117,21,117,31,183,0,4,0],[117,21,117,31,183,0,4,1],[268,13,268,38,187,0,4,1],[268,13,268,38,193,0,4,1],[268,13,268,38,195,0,4,1],[268,13,268,38,196,0,4,1],[117,21,117,31,212,0,4,0],[117,21,117,31,212,0,4,1],[117,21,117,31,213,0,4,1],[117,21,117,31,216,0,4,1],[117,21,117,31,240,0,4,0],[117,21,117,31,240,0,4,1],[117,21,117,31,243,0,4,1],[117,21,117,31,244,0,4,1],[117,21,117,31,251,0,4,1],[117,21,117,31,255,0,4,1]],\"PredictorDecodeTile\":[[589,9,589,45,0,0,4,0],[589,9,589,45,0,0,4,1],[593,13,593,34,0,0,4,1],[600,16,600,24,0,0,4,0],[600,16,600,24,0,0,4,1],[602,17,602,55,0,0,4,1]],\"ByteCountLooksBad\":[[4075,9,4075,20,0,0,4,0],[4075,9,4075,20,0,0,4,1],[4077,9,4077,23,0,0,4,0],[4077,9,4077,23,0,0,4,1],[4079,9,4079,56,0,0,4,0],[4079,9,4079,56,0,0,4,1],[4082,9,4082,27,0,0,4,0],[4082,9,4082,27,0,0,4,1],[4082,31,4082,60,0,0,4,0],[4082,31,4082,60,0,0,4,1],[4084,9,4084,34,0,0,4,0],[4087,13,4087,44,0,0,4,0],[4087,13,4087,44,0,0,4,1],[4088,13,4088,68,0,0,4,1],[4092,13,4092,67,0,0,4,0],[4092,13,4092,67,0,0,4,1]],\"TIFFReadDirEntryCheckedDouble\":[[3542,9,3542,41,0,0,4,0],[3546,13,3546,39,0,0,4,0],[3546,13,3546,39,0,0,4,1],[3549,13,3549,41,0,0,4,0],[3549,13,3549,41,0,0,4,1],[3558,9,3558,35,0,0,4,0],[3558,9,3558,35,0,0,4,1]],\"_TIFFMultiplySSize\":[[62,9,62,19,0,0,4,0],[62,9,62,19,0,0,4,1],[62,23,62,34,0,0,4,1],[64,13,64,24,0,0,4,0],[64,28,64,41,0,0,4,1],[73,9,73,43,0,0,4,1]],\"TIFFReadDirEntryCheckedRational\":[[3419,9,3419,41,0,0,4,0],[3423,13,3423,39,0,0,4,0],[3423,13,3423,39,0,0,4,1],[3426,13,3426,41,0,0,4,0],[3426,13,3426,41,0,0,4,1],[3431,9,3431,35,0,0,4,0],[3431,9,3431,35,0,0,4,1],[3436,9,3436,20,0,0,4,0],[3436,9,3436,20,0,0,4,1],[3436,24,3436,35,0,0,4,0],[3436,24,3436,35,0,0,4,1]],\"OJPEGReadHeaderInfoSecTablesQTable\":[[2018,9,2018,34,0,0,4,0],[2018,9,2018,34,0,0,4,1],[2024,17,2024,42,0,0,4,0],[2024,17,2024,42,0,0,4,1],[2026,13,2026,40,0,0,4,0],[2026,13,2026,40,0,0,4,1],[2027,14,2027,22,0,0,4,0],[2027,14,2027,22,0,0,4,1],[2027,26,2027,76,0,0,4,0],[2029,25,2029,34,0,0,4,0],[2029,25,2029,34,0,0,4,1],[2031,21,2031,65,0,0,4,0],[2039,17,2039,24,0,0,4,1],[2052,17,2052,24,0,0,4,1],[2057,17,2057,35,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Slong\":[[3883,9,3883,18,0,0,4,0],[3883,9,3883,18,0,0,4,1]],\"TIFFReadDirectoryFindFieldInfo\":[[5081,13,5081,25,0,0,4,0],[5081,13,5081,25,0,0,4,1],[5087,13,5087,62,0,0,4,0],[5087,13,5087,62,0,0,4,1],[5089,13,5089,61,0,0,4,0],[5089,13,5089,61,0,0,4,1],[5096,13,5096,20,0,0,4,0],[5096,13,5096,20,0,0,4,1],[5098,13,5098,66,0,0,4,0]],\"TIFFReadDirEntryShort\":[[485,9,485,34,0,0,4,0],[485,9,485,34,0,0,4,1],[489,9,489,23,0,0,4,0],[489,9,489,23,0,0,4,1],[496,9,496,24,0,0,4,0],[496,9,496,24,0,0,4,1],[501,17,501,45,0,0,4,0],[501,17,501,45,0,0,4,1],[506,9,506,24,0,0,4,0],[506,9,506,24,0,0,4,1],[509,9,509,25,0,0,4,0],[509,9,509,25,0,0,4,1],[514,17,514,45,0,0,4,0],[514,17,514,45,0,0,4,1],[519,9,519,23,0,0,4,0],[519,9,519,23,0,0,4,1],[524,17,524,45,0,0,4,0],[524,17,524,45,0,0,4,1],[529,9,529,24,0,0,4,0],[529,9,529,24,0,0,4,1],[534,17,534,45,0,0,4,0],[534,17,534,45,0,0,4,1],[539,9,539,24,0,0,4,0],[539,9,539,24,0,0,4,1],[543,17,543,45,0,0,4,0],[543,17,543,45,0,0,4,1],[546,17,546,45,0,0,4,0],[546,17,546,45,0,0,4,1],[551,9,551,25,0,0,4,0],[551,9,551,25,0,0,4,1],[555,17,555,45,0,0,4,0],[555,17,555,45,0,0,4,1],[558,17,558,45,0,0,4,0],[563,9,563,16,0,0,4,0],[563,9,563,16,0,0,4,1]],\"TIFFReadDirEntryCheckedSlong8\":[[3393,9,3393,41,0,0,4,0],[3397,13,3397,39,0,0,4,0],[3397,13,3397,39,0,0,4,1],[3400,13,3400,41,0,0,4,0],[3400,13,3400,41,0,0,4,1],[3405,9,3405,35,0,0,4,0],[3405,9,3405,35,0,0,4,1]],\"add_ms\":[[725,9,725,16,0,0,4,1],[725,20,725,27,0,0,4,1],[727,14,727,41,0,0,4,1]],\"PredictorVGetField\":[[958,9,958,31,0,0,4,1],[961,9,961,16,0,0,4,0]],\"JPEGFixupTagsSubsampling\":[[852,9,852,24,0,0,4,0],[852,9,852,24,0,0,4,1],[863,9,863,25,0,0,4,1],[875,9,875,41,0,0,4,0],[875,9,875,41,0,0,4,1]],\"TIFFIsCODECConfigured\":[[150,9,150,22,0,0,4,0],[150,9,150,22,0,0,4,1],[154,9,154,28,0,0,4,1],[158,9,158,37,0,0,4,0]],\"_TIFFGetMaxColorChannels\":[[4035,9,4035,33,0,0,4,0],[4035,9,4035,33,0,0,4,1],[4036,9,4036,36,0,0,4,0],[4036,9,4036,36,0,0,4,1],[4037,9,4037,36,0,0,4,0],[4037,9,4037,36,0,0,4,1],[4039,9,4039,31,0,0,4,0],[4039,9,4039,31,0,0,4,1],[4040,9,4040,29,0,0,4,0],[4040,9,4040,29,0,0,4,1],[4041,9,4041,32,0,0,4,0],[4041,9,4041,32,0,0,4,1],[4042,9,4042,32,0,0,4,0],[4042,9,4042,32,0,0,4,1],[4043,9,4043,32,0,0,4,0],[4043,9,4043,32,0,0,4,1],[4044,9,4044,32,0,0,4,0],[4044,9,4044,32,0,0,4,1],[4046,9,4046,35,0,0,4,0],[4046,9,4046,35,0,0,4,1],[4047,9,4047,30,0,0,4,0],[4047,9,4047,30,0,0,4,1],[4049,9,4049,30,0,0,4,0],[4049,9,4049,30,0,0,4,1],[4050,9,4050,29,0,0,4,1],[4051,9,4051,16,0,0,4,0],[4051,9,4051,16,0,0,4,1]],\"TIFFVStripSize64\":[[81,9,81,32,0,0,4,0],[81,9,81,32,0,0,4,1],[83,9,83,53,0,0,4,0],[83,9,83,53,0,0,4,1],[84,9,84,50,0,0,4,0],[84,9,84,50,0,0,4,1],[84,54,84,73,0,0,4,0],[100,13,100,40,0,0,4,0],[100,13,100,40,0,0,4,1],[107,14,107,38,0,0,4,0],[107,14,107,38,0,0,4,1],[107,42,107,66,0,0,4,0],[107,42,107,66,0,0,4,1],[108,14,108,38,0,0,4,0],[108,14,108,38,0,0,4,1],[109,14,109,38,0,0,4,0],[109,14,109,38,0,0,4,1],[109,42,109,66,0,0,4,0],[109,42,109,66,0,0,4,1],[110,14,110,38,0,0,4,0],[110,14,110,38,0,0,4,1],[282,6,282,54,5,0,4,0],[282,6,282,54,5,0,4,1],[282,6,282,54,6,0,4,0],[282,6,282,54,6,0,4,1],[296,6,296,16,7,0,4,0],[296,6,296,16,7,0,4,1]],\"Fax3VGetField\":[[1313,9,1313,29,0,0,4,1],[1316,9,1316,33,0,0,4,1],[1319,9,1319,35,0,0,4,1],[1320,9,1320,35,0,0,4,1],[1323,9,1323,33,0,0,4,1],[1326,9,1326,34,0,0,4,1],[1329,9,1329,44,0,0,4,1],[1332,9,1332,16,0,0,4,0]],\"TIFFInitCCITTFax3\":[[1472,9,1472,27,0,0,4,0],[1477,13,1477,75,0,0,4,1]],\"TIFFReadDirEntryLong8\":[[818,9,818,34,0,0,4,0],[818,9,818,34,0,0,4,1],[822,9,822,23,0,0,4,0],[822,9,822,23,0,0,4,1],[829,9,829,24,0,0,4,0],[829,9,829,24,0,0,4,1],[834,17,834,45,0,0,4,0],[834,17,834,45,0,0,4,1],[839,9,839,24,0,0,4,0],[839,9,839,24,0,0,4,1],[846,9,846,25,0,0,4,0],[846,9,846,25,0,0,4,1],[851,17,851,45,0,0,4,0],[851,17,851,45,0,0,4,1],[856,9,856,23,0,0,4,0],[856,9,856,23,0,0,4,1],[863,9,863,24,0,0,4,0],[863,9,863,24,0,0,4,1],[868,17,868,45,0,0,4,0],[868,17,868,45,0,0,4,1],[873,9,873,24,0,0,4,0],[873,9,873,24,0,0,4,1],[876,9,876,25,0,0,4,0],[876,9,876,25,0,0,4,1],[880,17,880,45,0,0,4,0],[880,17,880,45,0,0,4,1],[883,17,883,45,0,0,4,0],[883,17,883,45,0,0,4,1],[888,9,888,16,0,0,4,0],[888,9,888,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLongSshort\":[[3800,9,3800,18,0,0,4,0],[3800,9,3800,18,0,0,4,1]],\"TIFFReadDirEntryIfd8Array\":[[3240,9,3240,23,0,0,4,0],[3240,9,3240,23,0,0,4,1],[3241,9,3241,24,0,0,4,0],[3241,9,3241,24,0,0,4,1],[3242,9,3242,22,0,0,4,0],[3242,9,3242,22,0,0,4,1],[3243,9,3243,23,0,0,4,0],[3243,9,3243,23,0,0,4,1],[3245,9,3245,16,0,0,4,0],[3245,9,3245,16,0,0,4,1],[3249,9,3249,39,0,0,4,0],[3249,9,3249,39,0,0,4,1],[3249,43,3249,58,0,0,4,0],[3249,43,3249,58,0,0,4,1],[3254,13,3254,32,0,0,4,0],[3254,13,3254,32,0,0,4,1],[3256,9,3256,24,0,0,4,0],[3256,9,3256,24,0,0,4,1],[3257,9,3257,23,0,0,4,0],[3257,9,3257,23,0,0,4,1],[3259,17,3259,43,0,0,4,0],[3259,17,3259,43,0,0,4,1],[3264,9,3264,18,0,0,4,1],[3269,13,3269,32,0,0,4,1],[3271,9,3271,23,0,0,4,0],[3271,9,3271,23,0,0,4,1],[3272,9,3272,22,0,0,4,0],[3272,9,3272,22,0,0,4,1],[3279,25,3279,34,0,0,4,0],[3279,25,3279,34,0,0,4,1],[3281,21,3281,47,0,0,4,0],[3281,21,3281,47,0,0,4,1]],\"TIFFInitCCITTFax4\":[[1612,9,1612,27,0,0,4,0],[1617,13,1617,75,0,0,4,1]],\"_TIFFmalloc\":[[323,9,323,15,0,0,4,1]],\"PixarLogDecode\":[[846,9,846,35,0,0,4,1],[849,9,849,35,0,0,4,0],[849,9,849,35,0,0,4,1],[850,9,850,40,0,0,4,1],[851,9,851,38,0,0,4,1],[854,9,854,34,0,0,4,0],[854,9,854,34,0,0,4,1],[855,9,855,38,0,0,4,1],[858,9,858,16,0,0,4,1],[879,9,879,60,0,0,4,1],[885,9,885,55,0,0,4,1],[893,13,893,34,0,0,4,1],[897,13,897,34,0,0,4,0],[901,31,901,45,0,0,4,0]],\"OJPEGReadBytePeek\":[[2317,9,2317,32,0,0,4,0],[2317,9,2317,32,0,0,4,1],[2319,13,2319,41,0,0,4,0],[2319,13,2319,41,0,0,4,1]],\"TIFFWriteDirectoryTagCheckedLongArray\":[[2299,9,2299,35,0,0,4,1]],\"TIFFInitOJPEG\":[[485,9,485,73,0,0,4,1],[494,9,494,19,0,0,4,1]],\"OJPEGReadHeaderInfoSecTablesAcTable\":[[2149,9,2149,35,0,0,4,0],[2149,9,2149,35,0,0,4,1],[2155,17,2155,42,0,0,4,0],[2155,17,2155,42,0,0,4,1],[2157,13,2157,41,0,0,4,0],[2157,13,2157,41,0,0,4,1],[2158,14,2158,22,0,0,4,0],[2158,14,2158,22,0,0,4,1],[2158,26,2158,78,0,0,4,0],[2160,25,2160,34,0,0,4,0],[2160,25,2160,34,0,0,4,1],[2162,21,2162,67,0,0,4,1],[2171,17,2171,24,0,0,4,0],[2171,17,2171,24,0,0,4,1],[2174,25,2174,31,0,0,4,0],[2174,25,2174,31,0,0,4,1],[2178,17,2178,24,0,0,4,1],[2189,25,2189,31,0,0,4,0],[2189,25,2189,31,0,0,4,1],[2192,17,2192,23,0,0,4,0],[2192,17,2192,23,0,0,4,1],[2197,17,2197,36,0,0,4,1]],\"TIFFReadDirEntryShortArray\":[[1757,9,1757,23,0,0,4,0],[1757,9,1757,23,0,0,4,1],[1758,9,1758,24,0,0,4,0],[1758,9,1758,24,0,0,4,1],[1759,9,1759,24,0,0,4,0],[1759,9,1759,24,0,0,4,1],[1760,9,1760,25,0,0,4,0],[1760,9,1760,25,0,0,4,1],[1761,9,1761,23,0,0,4,0],[1761,9,1761,23,0,0,4,1],[1762,9,1762,24,0,0,4,0],[1762,9,1762,24,0,0,4,1],[1763,9,1763,24,0,0,4,0],[1763,9,1763,24,0,0,4,1],[1764,9,1764,25,0,0,4,0],[1764,9,1764,25,0,0,4,1],[1766,9,1766,16,0,0,4,0],[1766,9,1766,16,0,0,4,1],[1770,9,1770,39,0,0,4,0],[1770,9,1770,39,0,0,4,1],[1770,43,1770,58,0,0,4,0],[1770,43,1770,58,0,0,4,1],[1775,13,1775,32,0,0,4,0],[1775,13,1775,32,0,0,4,1],[1777,9,1777,24,0,0,4,0],[1777,9,1777,24,0,0,4,1],[1779,17,1779,43,0,0,4,0],[1779,17,1779,43,0,0,4,1],[1782,9,1782,25,0,0,4,0],[1782,9,1782,25,0,0,4,1],[1787,25,1787,34,0,0,4,0],[1787,25,1787,34,0,0,4,1],[1789,21,1789,47,0,0,4,0],[1789,21,1789,47,0,0,4,1],[1792,21,1792,49,0,0,4,0],[1792,21,1792,49,0,0,4,1],[1804,9,1804,18,0,0,4,1],[1809,13,1809,32,0,0,4,1],[1811,9,1811,23,0,0,4,0],[1811,9,1811,23,0,0,4,1],[1818,25,1818,34,0,0,4,0],[1818,25,1818,34,0,0,4,1],[1822,9,1822,24,0,0,4,0],[1822,9,1822,24,0,0,4,1],[1829,25,1829,34,0,0,4,0],[1829,25,1829,34,0,0,4,1],[1832,21,1832,49,0,0,4,0],[1832,21,1832,49,0,0,4,1],[1838,9,1838,23,0,0,4,0],[1838,9,1838,23,0,0,4,1],[1845,25,1845,34,0,0,4,0],[1845,25,1845,34,0,0,4,1],[1847,21,1847,47,0,0,4,0],[1847,21,1847,47,0,0,4,1],[1850,21,1850,49,0,0,4,0],[1850,21,1850,49,0,0,4,1],[1856,9,1856,24,0,0,4,0],[1856,9,1856,24,0,0,4,1],[1863,25,1863,34,0,0,4,0],[1863,25,1863,34,0,0,4,1],[1865,21,1865,47,0,0,4,0],[1865,21,1865,47,0,0,4,1],[1868,21,1868,49,0,0,4,0],[1868,21,1868,49,0,0,4,1],[1874,9,1874,24,0,0,4,0],[1874,9,1874,24,0,0,4,1],[1881,25,1881,34,0,0,4,0],[1881,25,1881,34,0,0,4,1],[1883,21,1883,47,0,0,4,0],[1883,21,1883,47,0,0,4,1],[1886,21,1886,49,0,0,4,0],[1886,21,1886,49,0,0,4,1],[1892,9,1892,25,0,0,4,0],[1892,9,1892,25,0,0,4,1],[1899,25,1899,34,0,0,4,0],[1899,25,1899,34,0,0,4,1],[1901,21,1901,47,0,0,4,0],[1901,21,1901,47,0,0,4,1],[1904,21,1904,49,0,0,4,0],[1904,21,1904,49,0,0,4,1],[1912,9,1912,37,0,0,4,0],[1912,9,1912,37,0,0,4,1]],\"TIFFReadDirEntryCheckRangeShortLong\":[[3710,9,3710,23,0,0,4,0],[3710,9,3710,23,0,0,4,1]],\"_TIFFmallocExt\":[[123,9,123,20,0,0,4,0],[123,9,123,20,0,0,4,1],[123,24,123,57,0,0,4,1]],\"TIFFReadDirEntryFloat\":[[967,9,967,34,0,0,4,0],[967,9,967,34,0,0,4,1],[971,9,971,23,0,0,4,0],[971,9,971,23,0,0,4,1],[978,9,978,24,0,0,4,0],[978,9,978,24,0,0,4,1],[985,9,985,24,0,0,4,0],[985,9,985,24,0,0,4,1],[992,9,992,25,0,0,4,0],[992,9,992,25,0,0,4,1],[999,9,999,23,0,0,4,0],[999,9,999,23,0,0,4,1],[1006,9,1006,24,0,0,4,0],[1006,9,1006,24,0,0,4,1],[1013,9,1013,24,0,0,4,0],[1013,9,1013,24,0,0,4,1],[1017,17,1017,45,0,0,4,0],[1017,17,1017,45,0,0,4,1],[1031,9,1031,25,0,0,4,0],[1031,9,1031,25,0,0,4,1],[1035,17,1035,45,0,0,4,0],[1035,17,1035,45,0,0,4,1],[1040,9,1040,27,0,0,4,0],[1040,9,1040,27,0,0,4,1],[1044,17,1044,45,0,0,4,0],[1044,17,1044,45,0,0,4,1],[1049,9,1049,28,0,0,4,0],[1049,9,1049,28,0,0,4,1],[1053,17,1053,45,0,0,4,0],[1053,17,1053,45,0,0,4,1],[1058,9,1058,24,0,0,4,0],[1058,9,1058,24,0,0,4,1],[1061,9,1061,25,0,0,4,0],[1061,9,1061,25,0,0,4,1],[1065,17,1065,45,0,0,4,0],[1065,17,1065,45,0,0,4,1],[1067,17,1067,30,0,0,4,0],[1067,17,1067,30,0,0,4,1],[1067,34,1067,48,0,0,4,0],[1067,34,1067,48,0,0,4,1],[1072,9,1072,16,0,0,4,0],[1072,9,1072,16,0,0,4,1]],\"TIFFReadDirEntryCheckRangeByteSshort\":[[3584,9,3584,20,0,0,4,0],[3584,9,3584,20,0,0,4,1],[3584,24,3584,38,0,0,4,0],[3584,24,3584,38,0,0,4,1]],\"ZIPVSetField\":[[569,9,569,32,0,0,4,1],[604,9,604,38,0,0,4,1],[623,9,623,16,0,0,4,0]],\"TIFFInitCCITTRLEW\":[[1721,9,1721,27,0,0,4,0]],\"TIFFReadDirEntryOutputErr\":[[3938,9,3938,17,0,0,4,0],[3938,9,3938,17,0,0,4,1],[3942,13,3942,42,0,0,4,0],[3942,13,3942,42,0,0,4,1],[3946,13,3946,41,0,0,4,0],[3946,13,3946,41,0,0,4,1],[3950,13,3950,39,0,0,4,0],[3950,13,3950,39,0,0,4,1],[3954,13,3954,42,0,0,4,0],[3954,13,3954,42,0,0,4,1],[3958,13,3958,42,0,0,4,0],[3958,13,3958,42,0,0,4,1],[3964,13,3964,44,0,0,4,0],[3964,13,3964,44,0,0,4,1],[3969,13,3969,42,0,0,4,1],[3973,13,3973,20,0,0,4,1],[3982,13,3982,42,0,0,4,0],[3982,13,3982,42,0,0,4,1],[3987,13,3987,41,0,0,4,0],[3987,13,3987,41,0,0,4,1],[3992,13,3992,39,0,0,4,0],[3992,13,3992,39,0,0,4,1],[3997,13,3997,42,0,0,4,0],[3997,13,3997,42,0,0,4,1],[4002,13,4002,42,0,0,4,1],[4008,13,4008,44,0,0,4,0],[4008,13,4008,44,0,0,4,1],[4014,13,4014,42,0,0,4,1],[4019,13,4019,20,0,0,4,1]],\"OJPEGWriteStreamQTable\":[[2490,9,2490,37,0,0,4,0],[2490,9,2490,37,0,0,4,1]],\"TIFFHashSetNew\":[[143,9,143,20,0,0,4,1],[145,23,145,33,0,0,4,0],[146,24,146,35,0,0,4,0],[150,9,150,29,0,0,4,1]],\"OJPEGReadBlock\":[[2356,13,2356,36,0,0,4,1],[2363,13,2363,35,0,0,4,1],[2370,14,2370,22,0,0,4,1]],\"TIFFReadEncodedTile\":[[935,9,935,31,0,0,4,0],[935,9,935,31,0,0,4,1],[937,9,937,31,0,0,4,1],[946,9,946,47,0,0,4,0],[946,9,946,47,0,0,4,1],[946,51,946,73,0,0,4,0],[947,9,947,25,0,0,4,0],[947,9,947,25,0,0,4,1],[947,29,947,38,0,0,4,0],[948,9,948,49,0,0,4,0],[950,13,950,75,0,0,4,0],[950,13,950,75,0,0,4,1],[953,13,953,25,0,0,4,0],[953,13,953,25,0,0,4,1],[954,13,954,50,0,0,4,0],[961,9,961,31,0,0,4,1],[963,14,963,29,0,0,4,0],[963,14,963,29,0,0,4,1],[965,9,965,32,0,0,4,0],[965,9,965,32,0,0,4,1],[966,9,967,73,0,0,4,0],[966,9,967,73,0,0,4,1]],\"TIFFReadDirEntryCheckRangeLong8Sshort\":[[3874,9,3874,18,0,0,4,0],[3874,9,3874,18,0,0,4,1]],\"_TIFFGetStrileOffsetOrByteCountValue\":[[7760,9,7760,14,0,0,4,0],[7760,9,7760,14,0,0,4,1],[7762,9,7762,48,0,0,4,1],[7789,9,7789,24,0,0,4,0],[7789,9,7789,24,0,0,4,1],[7789,28,7789,52,0,0,4,1],[7791,13,7791,18,0,0,4,0]],\"_TIFFCleanupIFDOffsetAndNumberMaps\":[[122,9,122,42,0,0,4,0],[122,9,122,42,0,0,4,1],[127,9,127,42,0,0,4,0],[127,9,127,42,0,0,4,1]],\"TIFFSetupStrips\":[[567,9,568,70,0,0,4,1],[568,24,568,55,0,0,4,1],[574,9,574,53,0,0,4,1],[580,9,580,37,0,0,4,1],[580,41,580,72,0,0,4,1],[250,22,250,62,1,0,4,0],[551,30,551,64,2,0,4,1],[209,34,209,71,9,0,4,0]],\"OJPEGReadHeaderInfoSecStreamDri\":[[1635,9,1635,35,0,0,4,0],[1635,9,1635,35,0,0,4,1],[1637,9,1637,15,0,0,4,0],[1637,9,1637,15,0,0,4,1],[1642,9,1642,35,0,0,4,1]],\"_tiffWriteProc\":[[97,9,97,38,0,0,4,1],[103,29,103,56,0,0,4,0],[103,29,103,56,0,0,4,1],[107,13,107,34,0,0,4,1],[110,13,110,23,0,0,4,1],[113,9,113,18,0,0,4,1]],\"TIFFCheckRead\":[[1486,9,1486,34,0,0,4,1],[1491,9,1491,24,0,0,4,0],[1491,9,1491,24,0,0,4,1],[1494,23,1494,28,0,0,4,0]],\"OJPEGWriteStreamAcTable\":[[2514,9,2514,38,0,0,4,0],[2514,9,2514,38,0,0,4,1]],\"OJPEGWriteStreamSof\":[[2561,17,2561,52,0,0,4,0],[2561,17,2561,52,0,0,4,1]],\"JPEGInitializeLibJPEG\":[[2726,9,2726,30,0,0,4,1],[2741,9,2741,19,0,0,4,0],[2743,13,2743,44,0,0,4,1]],\"TIFFReadDirEntryCheckedFloat\":[[3532,9,3532,35,0,0,4,0],[3532,9,3532,35,0,0,4,1]],\"TIFFClose\":[[150,9,150,20,0,0,4,0]],\"LZWSetupDecode\":[[189,9,189,19,0,0,4,1],[212,9,212,32,0,0,4,0],[212,9,212,32,0,0,4,1],[215,13,215,36,0,0,4,1],[231,18,231,24,0,0,4,0],[231,18,231,24,0,0,4,1]],\"TIFFFindField\":[[799,9,799,28,0,0,4,0],[799,9,799,28,0,0,4,1],[799,32,799,69,0,0,4,0],[799,32,799,69,0,0,4,1],[800,10,800,24,0,0,4,0],[804,9,804,25,0,0,4,1],[814,35,814,38,0,0,4,0],[814,35,814,38,0,0,4,1]],\"_TIFFCreateAnonField\":[[904,9,904,20,0,0,4,1],[916,9,916,23,0,0,4,0],[916,9,916,23,0,0,4,1],[917,9,917,28,0,0,4,0],[917,9,917,28,0,0,4,1],[921,9,921,24,0,0,4,0],[921,9,921,24,0,0,4,1],[925,9,925,24,0,0,4,0],[925,9,925,24,0,0,4,1],[929,9,929,23,0,0,4,0],[929,9,929,23,0,0,4,1],[933,9,933,27,0,0,4,0],[933,9,933,27,0,0,4,1],[934,9,934,28,0,0,4,0],[934,9,934,28,0,0,4,1],[935,9,935,24,0,0,4,0],[935,9,935,24,0,0,4,1],[939,9,939,24,0,0,4,0],[939,9,939,24,0,0,4,1],[943,9,943,25,0,0,4,0],[943,9,943,25,0,0,4,1],[947,9,947,24,0,0,4,0],[947,9,947,24,0,0,4,1],[951,9,951,25,0,0,4,0],[951,9,951,25,0,0,4,1],[955,9,955,22,0,0,4,0],[955,9,955,22,0,0,4,1],[956,9,956,23,0,0,4,0],[956,9,956,23,0,0,4,1],[960,9,960,24,0,0,4,0],[960,9,960,24,0,0,4,1],[964,9,964,25,0,0,4,0],[964,9,964,25,0,0,4,1],[968,9,968,16,0,0,4,0],[968,9,968,16,0,0,4,1],[977,9,977,32,0,0,4,1]],\"TIFFNumberOfTiles\":[[116,9,116,27,0,0,4,0],[116,9,116,27,0,0,4,1],[118,9,118,27,0,0,4,0],[118,9,118,27,0,0,4,1],[120,9,120,27,0,0,4,1],[123,10,123,17,0,0,4,0],[123,10,123,17,0,0,4,1],[123,21,123,28,0,0,4,0],[123,21,123,28,0,0,4,1],[123,32,123,39,0,0,4,1],[131,9,131,53,0,0,4,0],[131,9,131,53,0,0,4,1],[282,6,282,54,1,0,4,0],[282,6,282,54,1,0,4,1],[282,6,282,54,2,0,4,0],[282,6,282,54,2,0,4,1],[282,6,282,54,3,0,4,0]],\"TIFFFindCODEC\":[[197,33,197,35,0,0,4,1],[200,34,200,41,0,0,4,0],[200,34,200,41,0,0,4,1],[201,13,201,32,0,0,4,0],[201,13,201,32,0,0,4,1]],\"_TIFFCheckDirNumberAndOffset\":[[5430,9,5430,20,0,0,4,1],[5433,9,5433,50,0,0,4,0],[5437,13,5437,54,0,0,4,1],[5445,9,5445,50,0,0,4,0],[5451,13,5451,54,0,0,4,1],[5471,9,5471,19,0,0,4,1],[5492,9,5492,19,0,0,4,1],[5547,9,5548,27,0,0,4,1],[5558,9,5558,25,0,0,4,1],[5568,9,5568,72,0,0,4,1],[5574,9,5574,72,0,0,4,1]],\"TIFFReadDirEntryArrayWithLimit\":[[1281,9,1281,42,0,0,4,0],[1281,9,1281,42,0,0,4,1],[1283,9,1283,30,0,0,4,0],[1283,9,1283,30,0,0,4,1],[1283,34,1283,49,0,0,4,1],[1294,10,1294,37,0,0,4,0],[1294,10,1294,37,0,0,4,1],[1302,9,1302,66,0,0,4,0],[1302,9,1302,66,0,0,4,1],[1304,9,1304,70,0,0,4,0],[1304,9,1304,70,0,0,4,1],[1314,9,1314,18,0,0,4,0],[1314,29,1314,60,0,0,4,1],[1315,29,1315,61,0,0,4,0],[1315,65,1315,77,0,0,4,0],[1315,65,1315,77,0,0,4,1],[1322,13,1322,22,0,0,4,1],[1325,9,1325,41,0,0,4,0],[1329,13,1329,43,0,0,4,0],[1329,13,1329,43,0,0,4,1],[1329,47,1329,60,0,0,4,0],[1335,17,1335,43,0,0,4,0],[1335,17,1335,43,0,0,4,1],[1343,17,1343,45,0,0,4,0],[1343,17,1343,45,0,0,4,1],[251,23,251,62,3,0,4,1],[251,23,251,62,9,0,4,1]],\"setByteArray\":[[46,9,46,13,0,0,4,0],[46,9,46,13,0,0,4,1],[51,9,51,11,0,0,4,0],[51,9,51,11,0,0,4,1],[54,13,54,18,0,0,4,0],[56,13,56,17,0,0,4,0]],\"TIFFListDestroy\":[[264,12,264,21,0,0,4,1]],\"NeXTDecode\":[[71,47,71,55,0,0,4,0],[71,47,71,55,0,0,4,1],[77,9,77,23,0,0,4,1],[82,21,82,27,0,0,4,0],[82,21,82,27,0,0,4,1],[82,31,82,38,0,0,4,0],[82,31,82,38,0,0,4,1],[88,13,88,28,0,0,4,0],[88,13,88,28,0,0,4,1],[92,21,92,34,0,0,4,0],[92,21,92,34,0,0,4,1],[98,13,98,29,0,0,4,0],[98,13,98,29,0,0,4,1],[105,21,105,27,0,0,4,1],[109,21,109,31,0,0,4,0],[116,13,116,20,0,0,4,0],[116,13,116,20,0,0,4,1],[140,28,140,35,0,0,4,0],[140,28,140,35,0,0,4,1],[140,39,140,59,0,0,4,0],[140,39,140,59,0,0,4,1],[141,28,141,48,0,0,4,0],[141,28,141,48,0,0,4,1],[143,25,143,46,0,0,4,0],[143,25,143,46,0,0,4,1],[145,25,145,46,0,0,4,0],[145,25,145,46,0,0,4,1],[152,25,152,32,0,0,4,1],[250,22,250,62,3,0,4,0],[35,17,35,30,4,0,4,1],[37,13,37,19,4,0,4,0],[37,13,37,19,4,0,4,1],[40,13,40,19,4,0,4,0],[40,13,40,19,4,0,4,1],[43,13,43,19,4,0,4,0],[43,13,43,19,4,0,4,1],[46,13,46,19,4,0,4,0],[46,13,46,19,4,0,4,1]],\"OJPEGReadByte\":[[2303,9,2303,32,0,0,4,0],[2303,9,2303,32,0,0,4,1],[2305,13,2305,41,0,0,4,0],[2305,13,2305,41,0,0,4,1]],\"JPEGResetUpsampled\":[[2548,9,2548,51,0,0,4,0],[2548,9,2548,51,0,0,4,1],[2550,13,2550,52,0,0,4,0],[2550,13,2550,52,0,0,4,1],[2551,13,2551,65,0,0,4,1],[2569,9,2569,30,0,0,4,1],[2571,9,2571,34,0,0,4,1]],\"TIFFReadDirEntrySlongArray\":[[2268,9,2268,23,0,0,4,1],[2269,9,2269,24,0,0,4,1],[2270,9,2270,24,0,0,4,1],[2271,9,2271,25,0,0,4,1],[2272,9,2272,23,0,0,4,1],[2273,9,2273,24,0,0,4,0],[2274,9,2274,24,0,0,4,1],[2275,9,2275,25,0,0,4,1],[2277,9,2277,16,0,0,4,1],[2281,9,2281,39,0,0,4,0],[2281,9,2281,39,0,0,4,1],[2281,43,2281,58,0,0,4,0],[2281,43,2281,58,0,0,4,1],[2286,13,2286,32,0,0,4,1],[2288,9,2288,23,0,0,4,1],[2308,9,2308,24,0,0,4,0],[2310,17,2310,43,0,0,4,0],[2310,17,2310,43,0,0,4,1]],\"TIFFWriteDirectorySec\":[[482,9,482,34,0,0,4,1],[492,9,492,18,0,0,4,0],[494,13,494,45,0,0,4,1],[512,13,512,31,0,0,4,1],[521,13,521,45,0,0,4,0],[521,13,521,45,0,0,4,1],[521,49,521,65,0,0,4,0],[534,9,534,61,0,0,4,1],[546,13,546,20,0,0,4,0],[550,21,552,80,0,0,4,1],[554,21,556,53,0,0,4,1],[561,21,563,79,0,0,4,1],[565,21,567,80,0,0,4,1],[608,21,610,77,0,0,4,1],[692,21,692,29,0,0,4,1],[702,25,705,62,0,0,4,1],[711,21,711,29,0,0,4,1],[733,25,736,59,0,0,4,1],[848,29,848,49,0,0,4,0],[848,29,848,49,0,0,4,1],[852,25,852,54,0,0,4,1],[924,21,924,69,0,0,4,1],[1088,13,1088,24,0,0,4,0],[1088,13,1088,24,0,0,4,1],[1091,13,1091,24,0,0,4,1],[1096,13,1096,20,0,0,4,0],[1098,17,1098,39,0,0,4,0],[1098,43,1098,68,0,0,4,1],[1104,13,1104,28,0,0,4,1],[1106,13,1106,45,0,0,4,0],[1111,13,1111,45,0,0,4,0],[1113,13,1113,49,0,0,4,1],[1114,13,1114,51,0,0,4,1],[1119,13,1119,33,0,0,4,1],[1121,13,1121,20,0,0,4,0],[1123,17,1123,64,0,0,4,0],[1129,9,1129,16,0,0,4,0],[1152,9,1152,23,0,0,4,1],[1157,9,1157,41,0,0,4,0],[1164,13,1164,39,0,0,4,1],[1168,21,1168,29,0,0,4,0],[1168,21,1168,29,0,0,4,1],[1171,17,1171,43,0,0,4,1],[1175,17,1175,43,0,0,4,1],[1180,17,1180,43,0,0,4,1],[1190,13,1190,39,0,0,4,1],[1228,9,1228,16,0,0,4,1],[1233,9,1233,17,0,0,4,1],[1239,9,1239,18,0,0,4,0],[209,34,209,71,7,0,4,0],[209,34,209,71,9,0,4,0],[209,34,209,71,12,0,4,0],[209,34,209,71,15,0,4,1],[209,34,209,71,18,0,4,1],[209,34,209,71,21,0,4,1],[209,34,209,71,23,0,4,1],[209,34,209,71,25,0,4,0],[209,34,209,71,27,0,4,1],[209,34,209,71,29,0,4,1],[209,34,209,71,31,0,4,1],[209,34,209,71,33,0,4,1],[209,34,209,71,35,0,4,1],[209,34,209,71,37,0,4,1],[209,34,209,71,39,0,4,1],[209,34,209,71,41,0,4,1],[209,34,209,71,43,0,4,1],[209,34,209,71,45,0,4,1],[209,34,209,71,47,0,4,1],[209,34,209,71,49,0,4,0],[209,34,209,71,49,0,4,1],[209,34,209,71,53,0,4,0],[209,34,209,71,53,0,4,1],[209,34,209,71,57,0,4,1],[209,34,209,71,58,0,4,1],[209,34,209,71,61,0,4,1],[209,34,209,71,63,0,4,1],[209,34,209,71,65,0,4,1],[209,34,209,71,67,0,4,1],[209,34,209,71,69,0,4,1],[209,34,209,71,71,0,4,1],[209,34,209,71,73,0,4,1],[209,34,209,71,75,0,4,1],[209,34,209,71,77,0,4,1],[209,34,209,71,79,0,4,1],[209,34,209,71,80,0,4,1],[209,34,209,71,82,0,4,1],[209,34,209,71,84,0,4,1],[209,34,209,71,91,0,4,1]],\"TIFFHashSetDestroy\":[[287,9,287,12,0,0,4,0]],\"ZIPVGetField\":[[635,9,635,32,0,0,4,1],[639,9,639,38,0,0,4,1],[643,9,643,16,0,0,4,0]],\"unixWarningHandler\":[[355,9,355,23,0,0,4,0]],\"Fax3Extension\":[[250,22,250,62,1,0,4,0],[250,22,250,62,2,0,4,0]],\"TIFFLinkDirectory\":[[2961,9,2961,39,0,0,4,1],[3013,9,3013,41,0,0,4,0],[3018,13,3018,39,0,0,4,1],[3020,13,3020,53,0,0,4,0],[3028,17,3028,25,0,0,4,1]],\"OJPEGReadHeaderInfoSecStreamDqt\":[[1658,9,1658,35,0,0,4,0],[1658,9,1658,35,0,0,4,1],[1660,9,1660,15,0,0,4,0],[1660,9,1660,15,0,0,4,1],[1662,13,1662,40,0,0,4,0],[1662,13,1662,40,0,0,4,1],[1666,9,1666,36,0,0,4,0],[1666,9,1666,36,0,0,4,1],[1673,17,1673,23,0,0,4,0],[1673,17,1673,23,0,0,4,1],[1680,17,1680,24,0,0,4,1],[1690,17,1690,71,0,0,4,1],[1696,17,1696,22,0,0,4,0],[1696,17,1696,22,0,0,4,1],[1702,17,1702,35,0,0,4,1],[1706,18,1706,23,0,0,4,0]],\"TIFFReadDirEntryCheckRangeByteSlong\":[[3602,9,3602,20,0,0,4,0],[3602,9,3602,20,0,0,4,1],[3602,24,3602,38,0,0,4,0],[3602,24,3602,38,0,0,4,1]],\"LZWPreDecode\":[[252,9,252,32,0,0,4,1],[262,9,262,28,0,0,4,0],[262,9,262,28,0,0,4,1],[262,32,262,56,0,0,4,0],[262,32,262,56,0,0,4,1],[263,9,263,36,0,0,4,0],[263,9,263,36,0,0,4,1],[266,13,266,28,0,0,4,0]],\"TIFFReadDirEntryCheckedSrational\":[[3452,9,3452,41,0,0,4,0],[3456,13,3456,39,0,0,4,0],[3456,13,3456,39,0,0,4,1],[3459,13,3459,41,0,0,4,0],[3459,13,3459,41,0,0,4,1],[3464,9,3464,35,0,0,4,0],[3464,9,3464,35,0,0,4,1],[3469,9,3469,29,0,0,4,0],[3469,9,3469,29,0,0,4,1],[3469,33,3469,44,0,0,4,0],[3469,33,3469,44,0,0,4,1]]},\"library_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFClose\",\"TIFFGetFieldDefaulted\",\"TIFFGetFieldDefaulted\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFTileSize\",\"_TIFFmalloc\",\"TIFFClose\",\"TIFFClose\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\",\"TIFFWriteEncodedTile\",\"TIFFComputeTile\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\"],\"critical_calls\":[\"TIFFStreamOpen\",\"TIFFOpen\",\"TIFFGetFieldDefaulted\",\"TIFFGetFieldDefaulted\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFSetField\",\"TIFFTileSize\",\"_TIFFmalloc\",\"TIFFReadEncodedTile\",\"TIFFComputeTile\",\"TIFFWriteEncodedTile\",\"TIFFComputeTile\",\"_TIFFfree\",\"TIFFClose\",\"TIFFClose\"],\"visited\":6}\n/*Here is a complete C++ program that utilizes the libtiff library APIs to achieve the given event:\n\n*/\n\n\n\nextern \"C\" int LLVMFuzzerTestOneInput_0(const uint8_t* f_data, size_t f_size) {\n\tif(f_size\u003c42) return 0;\n\n\t\n\t//fuzzer vars shim {\n\t\tFuzzedDataProvider fdp(f_data, f_size);\n\t\tFDPConsumeRawBytes(const uint8_t *, data, size, fdp)\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_1, fuzz_str_sz_1, fdp);\n\t\tFDPConsumeRandomLengthString(char, fuzz_str_2, fuzz_str_sz_2, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_3, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_4, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_5, fdp);\n\t\tFDPConsumeIntegral(uint16_t, fuzz_uint16_t_6, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_7, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_8, fdp);\n\t\tFDPConsumeIntegral(uint32_t, fuzz_uint32_t_9, fdp);\n\t\tFDPConsumeIntegral(uint16_t, fuzz_uint16_t_10, fdp);\n\t//fuzzer shim end}\n\n\n\n\n  // Write data into input_file\n  FILE* in_file = fopen(\"input_file\", \"wb\");\n  if (in_file == nullptr) {\n    assert_file_closed(\u0026in_file);\n\treturn 0;\n  }\n  fwrite(data, sizeof(uint8_t), size, in_file);\n  assert_file_closed(\u0026in_file);;\n\n  // Open input TIFF in memory\n  std::istringstream s(std::string(data, data + size));\n  TIFF* in_tif = TIFFStreamOpen(fuzz_str_1, \u0026s);\n  if (!in_tif) {\n    assert_file_closed(\u0026in_file);\n\treturn 0;\n  }\n\n  // Create output TIFF file\n  TIFF* out_tif = TIFFOpen(\"output_file\", fuzz_str_2);\n  if (!out_tif) {\n    TIFFClose(in_tif);\n    assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n  }\n\n  uint32_t image_width;\n  uint32_t image_height;\n\n  // Read input TIFF tags\n  TIFFGetFieldDefaulted(in_tif, TIFFTAG_IMAGEWIDTH, \u0026image_width);\n  TIFFGetFieldDefaulted(in_tif, TIFFTAG_IMAGELENGTH, \u0026image_height);\n\n  // Set output TIFF tags\n  TIFFSetField(out_tif, TIFFTAG_IMAGEWIDTH, image_width);\n  TIFFSetField(out_tif, TIFFTAG_IMAGELENGTH, image_height);\n\n  // Set output TIFF tile size\n  uint32_t tile_width = 256;\n  uint32_t tile_height = 256;\n  TIFFSetField(out_tif, TIFFTAG_TILEWIDTH, tile_width);\n  TIFFSetField(out_tif, TIFFTAG_TILELENGTH, tile_height);\n\n  // Allocate tile buffer\n  tsize_t tile_size = TIFFTileSize(out_tif);\n  unsigned char* tile_buffer = static_cast\u003cunsigned char*\u003e(_TIFFmalloc(tile_size));\n\n  if (tile_buffer == nullptr) {\n    TIFFClose(in_tif);\n    TIFFClose(out_tif);\n    assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n  }\n\n  // Iterate through each tile of the input image\n  for (uint32_t row = 0; row \u003c image_height; row += tile_height) {\n    for (uint32_t col = 0; col \u003c image_width; col += tile_width) {\n      // Read tile from input TIFF\n      if (TIFFReadEncodedTile(in_tif, TIFFComputeTile(in_tif, fuzz_uint32_t_3, fuzz_uint32_t_4, fuzz_uint32_t_5, fuzz_uint16_t_6), tile_buffer, tile_size) \u003c 0) {\n        _TIFFfree(tile_buffer);\n        TIFFClose(in_tif);\n        TIFFClose(out_tif);\n        assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n      }\n\n      // Write tile to output TIFF\n      if (TIFFWriteEncodedTile(out_tif, TIFFComputeTile(out_tif, fuzz_uint32_t_7, fuzz_uint32_t_8, fuzz_uint32_t_9, fuzz_uint16_t_10), tile_buffer, tile_size) \u003c 0) {\n        _TIFFfree(tile_buffer);\n        TIFFClose(in_tif);\n        TIFFClose(out_tif);\n        assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n      }\n    }\n  }\n\n  // Cleanup\n  _TIFFfree(tile_buffer);\n  TIFFClose(in_tif);\n  TIFFClose(out_tif);\n\n  assert_file_closed(\u0026in_file);\n\tassert_file_name_closed(\"output_file\");\n\treturn 0;\n}",
        "name": "id_000000.cc",
        "path": "examples/libtiff/fuzzer_1/fuzzers/id_000000.cc",
        "url": "/github.com/PromptFuzz/PromptFuzz/-/blob/examples/libtiff/fuzzer_1/fuzzers/id_000000.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              107,
              18
            ]
          ],
          "preview": "//\u003cPrompt\u003e [\"TIFFStreamOpen\",\"TIFFGetStrileOffset\",\"TIFFOpen\",\"TIFFGetUnmapFileProc\",\"TIFFSetWriteOffset\",\"TIFFPrintDirectory\",\"LogLuv32toXYZ\",\"TIFFWriteDirectory\",\"TIFFCreateDirectory\",\"TIFFSetFileName\",\"TIFFVGetFieldDefaulted\",\"TIFFClose\"]"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              9,
              18
            ]
          ],
          "preview": "    void TIFFPrintDirectory(TIFF * , FILE * , long ),"
        }
      ],
      "repository": {
        "name": "github.com/PromptFuzz/PromptFuzz",
        "url": "/github.com/PromptFuzz/PromptFuzz"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "f29d030f997c7aa72523647da27c35bd2b86f33b"
        },
        "content": "\n/*========================================================================*\n *                                                                        *\n *  Distributed by Whiteley Research Inc., Sunnyvale, California, USA     *\n *                       http://wrcad.com                                 *\n *  Copyright (C) 2017 Whiteley Research Inc., all rights reserved.       *\n *  Author: Stephen R. Whiteley, except as indicated.                     *\n *                                                                        *\n *  As fully as possible recognizing licensing terms and conditions       *\n *  imposed by earlier work from which this work was derived, if any,     *\n *  this work is released under the Apache License, Version 2.0 (the      *\n *  \"License\").  You may not use this file except in compliance with      *\n *  the License, and compliance with inherited licenses which are         *\n *  specified in a sub-header below this one if applicable.  A copy       *\n *  of the License is provided with this distribution, or you may         *\n *  obtain a copy of the License at                                       *\n *                                                                        *\n *        http://www.apache.org/licenses/LICENSE-2.0                      *\n *                                                                        *\n *  See the License for the specific language governing permissions       *\n *  and limitations under the License.                                    *\n *                                                                        *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,      *\n *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES      *\n *   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-        *\n *   INFRINGEMENT.  IN NO EVENT SHALL WHITELEY RESEARCH INCORPORATED      *\n *   OR STEPHEN R. WHITELEY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER     *\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,      *\n *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE       *\n *   USE OR OTHER DEALINGS IN THE SOFTWARE.                               *\n *                                                                        *\n *========================================================================*\n *               XicTools Integrated Circuit Design System                *\n *                                                                        *\n * MOZY html help viewer files                                            *\n *                                                                        *\n *========================================================================*\n $Id:$\n *========================================================================*/\n\n/*------------------------------------------------------------------------*\n * This file is part of the gtkhtm widget library.  The gtkhtm library\n * was derived from the gtk-xmhtml library by:\n *\n *   Stephen R. Whiteley  \u003cstevew@wrcad.com\u003e\n *   Whiteley Research Inc.\n *------------------------------------------------------------------------*\n *  The gtk-xmhtml widget was derived from the XmHTML library by\n *  Miguel de Icaza  \u003cmiguel@nuclecu.unam.mx\u003e and others from the GNOME\n *  project.\n *  11/97 - 2/98\n *------------------------------------------------------------------------*\n * The present file is heavily based on\n * tiff2png.c - converts Tagged Image File Format to Portable Network Graphics\n *\n * Copyright 1996,2000 Willem van Schaik, Calgary (willem@schaik.com)\n * Copyright 1999-2002 Greg Roelofs (newt@pobox.com)\n *\n * [see VERSION macro below for version and date]\n *\n * Lots of material was stolen from libtiff, tifftopnm, pnmtopng, which\n * programs had also done a fair amount of \"borrowing\", so the credit for\n * this program goes besides the author also to:\n *         Sam Leffler\n *         Jef Poskanzer\n *         Alexander Lehmann\n *         Patrick Naughton\n *         Marcel Wijkstra\n *\n *------------------------------------------------------------------------*\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the Free\n * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n *------------------------------------------------------------------------*/\n\n// Needed to expose vasprintf prototype in stdio.h.\n#ifdef WIN32\n#define _GNU_SOURCE\n#endif\n\n#include \"htm_widget.h\"\n#include \"htm_image.h\"\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cstring.h\u003e\n//#ifdef WIN32\n// This provides vasprintf in win-builds MINGW.\n//#include \u003clibiberty.h\u003e\n//#endif\n\n#if defined(HAVE_LIBTIFF) \u0026\u0026 defined(HAVE_LIBPNG)\n#include \u003ctiff.h\u003e\n#include \u003ctiffio.h\u003e\n#include \u003cpng.h\u003e\n\nnamespace tiffns {\n    char *tiff_to_png_err();\n    bool tiff_to_png(const char*, FILE*);\n}\n\n\n// We handle TIFF by converting to PNG.\n//\nhtmRawImageData*\nhtmImageManager::readTIFF(ImageBuffer *ib)\n{\n    const char *path = getenv(\"TMPDIR\");\n    if (!path)\n        path = \"/tmp\";\n    char buf[256];\n    snprintf(buf, sizeof(buf), \"%s/moz%d-%s.tmp\", path, getpid(), \"tiff\");\n    FILE *fp = fopen(buf, \"wb\");\n    if (!fp)\n        return (0);\n\n    fwrite(ib-\u003ebuffer, 1, ib-\u003esize, fp);\n    fclose(fp);\n    char *tiffile = new char[strlen(buf)+1];\n    strcpy(tiffile, buf);\n\n    snprintf(buf, sizeof(buf), \"%s/moz%d-%s.tmp\", path, getpid(), \"png\");\n    fp = fopen(buf, \"wb\");\n    if (fp) {\n        bool ret = tiffns::tiff_to_png(tiffile, fp);\n        fclose (fp);\n        if (ret) {\n            fp = fopen(buf, \"rb\");\n            fseek(fp, 0, SEEK_END);\n            long len = ftell(fp);\n            rewind(fp);\n            char *sbuf = new char[len];\n            long sz = fread(sbuf, 1, len, fp);\n            if (sz == len) {\n                delete [] ib-\u003ebuffer;\n                ib-\u003ebuffer = (unsigned char*)sbuf;\n                ib-\u003esize = sz;\n                ib-\u003etype = IMAGE_PNG;\n            }\n            else\n                delete [] sbuf;\n        }\n        unlink(buf);\n    }\n    unlink(tiffile);\n    delete [] tiffile;\n\n    if (ib-\u003etype == IMAGE_PNG)\n        return (readPNG(ib));\n    return (0);\n}\n\n\n#ifdef _AIX\n#define jmpbuf __jmpbuf\n#endif\n\n#define MAXCOLORS 256\n\n#ifndef PHOTOMETRIC_DEPTH\n#define PHOTOMETRIC_DEPTH 32768\n#endif\n\n// It appears that PHOTOMETRIC_MINISWHITE should always be inverted\n// (which makes sense), but if you find a class of TIFFs or a version\n// of libtiff for which that is *not* the case, try not defining\n// INVERT_MINISWHITE.\n\n#define INVERT_MINISWHITE\n\n// Macros to get and put bits out of the bytes.\n\n#define GET_LINE_SAMPLE \\\n  { \\\n    if (bitsleft == 0) \\\n    { \\\n      p_line++; \\\n      bitsleft = 8; \\\n    } \\\n    bitsleft -= (bps \u003e= 8) ? 8 : bps; \\\n    sample = (*p_line \u003e\u003e bitsleft) \u0026 maxval; \\\n  }\n\n#define GET_STRIP_SAMPLE \\\n  { \\\n    if (getbitsleft == 0) \\\n    { \\\n      p_strip++; \\\n      getbitsleft = 8; \\\n    } \\\n    getbitsleft -= (bps \u003e= 8) ? 8 : bps; \\\n    sample = (*p_strip \u003e\u003e getbitsleft) \u0026 maxval; \\\n  }\n\n#define PUT_LINE_SAMPLE \\\n  { \\\n    if (putbitsleft == 0) \\\n    { \\\n      p_line++; \\\n      putbitsleft = 8; \\\n    } \\\n    putbitsleft -= (bps \u003e= 8) ? 8 : bps; \\\n    *p_line |= ((sample \u0026 maxval) \u003c\u003c putbitsleft); \\\n  }\n\nnamespace {\n    inline bool test_bigendian()\n    {\n        union { int32_t i; char c[4]; } endian_tester;\n        endian_tester.i = 1;\n        return (endian_tester.c[0]);\n    }\n\n\n    struct jmpbuf_wrapper\n    {\n        jmp_buf jmpbuf;\n    };\n    jmpbuf_wrapper jmpbuf_struct;\n\n    char *err_msg;\n\n    void err_printf(const char *fmt, ...)\n    {\n        va_list args;\n        delete [] err_msg;\n#ifdef HAVE_VASPRINTF\n        va_start(args, fmt);\n        vasprintf(\u0026err_msg, fmt, args);\n#else\n        char buf[1024];\n        va_start(args, fmt);\n        vsnprintf(buf, 1024, fmt, args);\n        err_msg = new char[strlen(buf)+1];\n        strcpy(err_msg, buf);\n#endif\n    }\n\n\n    void error_handler(png_structp png_ptr, png_const_charp msg)\n    {\n        err_printf(\"fatal libpng error: %s\", msg);\n        jmpbuf_wrapper *jmpbuf_ptr =\n            (jmpbuf_wrapper*)png_get_error_ptr(png_ptr);\n        longjmp(jmpbuf_ptr-\u003ejmpbuf, 1);\n    }\n}\n\n\n// Static function.\n// Return the error message generated by a call to tiff_to_png.  The\n// returned string should be deleted after use.  This clears the error\n// message saved from the function call.\n//\nchar *\ntiffns::tiff_to_png_err()\n{\n    char *er = err_msg;\n    err_msg = 0;\n    return (er);\n}\n\n\n// Static function.\n// Read a TIFF file in tiffname, and output a PNG translation to\n// pngfp.  True is returned on success.  On error, false is returned,\n// and an error message is available from tiff_to_png_err.\n//\nbool\ntiffns::tiff_to_png(const char *tiffname, FILE *pngfp)\n{\n    bool bigendian = test_bigendian();\n\n    TIFF *tif = TIFFOpen(tiffname, \"r\");\n    if (!tif) {\n        err_printf(\"Failed to open %s.\", tiffname);\n        return (false);\n    }\n\n    png_struct *png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING,\n        \u0026jmpbuf_struct, error_handler, 0);\n    if (!png_ptr) {\n        TIFFClose(tif);\n        return (false);\n    }\n\n    png_info *info_ptr = png_create_info_struct(png_ptr);\n    if (!info_ptr) {\n        png_destroy_write_struct(\u0026png_ptr, 0);\n        TIFFClose(tif);\n        return (false);\n    }\n\n    if (setjmp(jmpbuf_struct.jmpbuf)) {\n        png_destroy_write_struct(\u0026png_ptr, 0);\n        TIFFClose(tif);\n        return (false);\n    }\n\n    png_init_io(png_ptr, pngfp);\n\n#ifdef DEBUG\n    if (verbose) {\n        int byteswapped = TIFFIsByteSwapped(tif);\n\n        fprintf(stderr, \"tiff_to_png:  \");\n        TIFFPrintDirectory(tif, stderr, TIFFPRINT_NONE);\n        fprintf(stderr, \"tiff_to_png:  byte order = %s\\n\",\n            ((bigendian \u0026\u0026 byteswapped) || (!bigendian \u0026\u0026 !byteswapped))?\n            \"little-endian (Intel)\" : \"big-endian (Motorola)\");\n        fprintf(stderr, \"tiff_to_png:  this machine is %s-endian\\n\",\n            bigendian? \"big\" : \"little\");\n    }\n#endif\n\n    unsigned short photometric;\n    if (!TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, \u0026photometric)) {\n        err_printf(\"TIFF photometric could not be retrieved (%s)\", tiffname);\n        png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n        TIFFClose(tif);\n        return (false);\n    }\n    unsigned short bps;\n    if (!TIFFGetField(tif, TIFFTAG_BITSPERSAMPLE, \u0026bps))\n        bps = 1;\n    unsigned short spp;\n    if (!TIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, \u0026spp))\n        spp = 1;\n    unsigned short planar;\n    if (!TIFFGetField(tif, TIFFTAG_PLANARCONFIG, \u0026planar))\n        planar = 1;\n\n    unsigned short tiled = TIFFIsTiled(tif);\n\n    int cols, rows;\n    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, \u0026cols);\n    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, \u0026rows);\n    png_uint_32 width = cols;\n\n    bool have_res = false;\n    float xres, yres;\n    png_uint_32 res_x=0, res_y=0;\n    int unit_type = 0;\n    if (TIFFGetField(tif, TIFFTAG_XRESOLUTION, \u0026xres) \u0026\u0026\n            TIFFGetField(tif, TIFFTAG_YRESOLUTION, \u0026yres) \u0026\u0026 \n            (xres != 0.0) \u0026\u0026 (yres != 0.0)) {\n        uint16_t resunit;\n        have_res = true;\n#ifdef DEBUG\n        if (verbose) {\n            float ratio = xres / yres;\n            fprintf(stderr,\n                \"tiff_to_png:  aspect ratio (hor/vert) = %g (%g / %g)\\n\",\n                ratio, xres, yres);\n            if (0.95 \u003c ratio \u0026\u0026 ratio \u003c 1.05)\n                fprintf(stderr, \"tiff2png:  near-unity aspect ratio\\n\");\n            else if (1.90 \u003c ratio \u0026\u0026 ratio \u003c 2.10)\n                fprintf(stderr, \"tiff2png:  near-2X aspect ratio\\n\");\n            else\n                fprintf(stderr, \"tiff2png:  non-square, non-2X pixels\\n\");\n        }\n#endif\n\n        if (!TIFFGetField(tif, TIFFTAG_RESOLUTIONUNIT, \u0026resunit))\n            resunit = RESUNIT_INCH;\n\n        // Convert from TIFF data (floats) to PNG data (unsigned longs).\n        switch (resunit) {\n        case RESUNIT_CENTIMETER:\n            res_x = (png_uint_32)(100.0*xres + 0.5);\n            res_y = (png_uint_32)(100.0*yres + 0.5);\n            unit_type = PNG_RESOLUTION_METER;\n            break;\n        case RESUNIT_INCH:\n            res_x = (png_uint_32)(39.37*xres + 0.5);\n            res_y = (png_uint_32)(39.37*yres + 0.5);\n            unit_type = PNG_RESOLUTION_METER;\n            break;\n        case RESUNIT_NONE:\n        default:\n            res_x = (png_uint_32)(100.0*xres + 0.5);\n            res_y = (png_uint_32)(100.0*yres + 0.5);\n            unit_type = PNG_RESOLUTION_UNKNOWN;\n            break;\n        }\n    }\n\n#ifdef DEBUG\n    if (verbose) {\n        fprintf(stderr, \"tiff_to_png:  %dx%dx%d image\\n\", cols, rows,\n            bps * spp);\n        fprintf(stderr, \"tiff_to_png:  %d bit%s/sample, %d sample%s/pixel\\n\",\n            bps, bps == 1? \"\" : \"s\", spp, spp == 1? \"\" : \"s\");\n    }\n#endif\n\n    // Detect tiff filetype.\n\n    int maxval = (1 \u003c\u003c bps) - 1;\n#ifdef DEBUG\n    if (verbose)\n        fprintf(stderr, \"tiff_to_png:  maxval=%d\\n\", maxval);\n#endif\n\n    int color_type = -1;\n    int bit_depth = 0;\n    int colors = 0;\n    png_color palette[MAXCOLORS];\n    unsigned short tiff_compression_method;\n\n    switch (photometric) {\n    case PHOTOMETRIC_MINISWHITE:\n    case PHOTOMETRIC_MINISBLACK:\n#ifdef DEBUG\n        if (verbose) {\n            fprintf(stderr,\n                \"tiff_to_png:  %d graylevels (min = %s)\\n\", maxval + 1,\n                photometric == PHOTOMETRIC_MINISBLACK? \"black\" : \"white\");\n        }\n#endif\n        if (spp == 1) {\n            // no alpha\n            color_type = PNG_COLOR_TYPE_GRAY;\n#ifdef DEBUG\n            if (verbose)\n                fprintf(stderr, \"tiff_to_png:  color type = grayscale\\n\");\n#endif\n            bit_depth = bps;\n        }\n        else {\n            // must be alpha\n            color_type = PNG_COLOR_TYPE_GRAY_ALPHA;\n#ifdef DEBUG\n            if (verbose)\n                fprintf(stderr,\n                    \"tiff_to_png:  color type = grayscale + alpha\\n\");\n#endif\n            if (bps \u003c= 8)\n                bit_depth = 8;\n            else\n                bit_depth = bps;\n        }\n        break;\n\n    case PHOTOMETRIC_PALETTE:\n        {\n            int palette_8bit; // Set iff all color values in TIFF palette\n                              // are \u003c 256.\n\n            color_type = PNG_COLOR_TYPE_PALETTE;\n#ifdef DEBUG\n            if (verbose)\n                fprintf(stderr, \"tiff_to_png:  color type = paletted\\n\");\n#endif\n\n            unsigned short *redcolormap;\n            unsigned short *greencolormap;\n            unsigned short *bluecolormap;\n            if (!TIFFGetField(tif, TIFFTAG_COLORMAP, \u0026redcolormap,\n                    \u0026greencolormap, \u0026bluecolormap)) {\n                err_printf(\"Cannot retrieve TIFF colormaps (%s)\\n\", tiffname);\n                png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n                TIFFClose(tif);\n                return (false);\n            }\n            colors = maxval + 1;\n            if (colors \u003e MAXCOLORS) {\n                err_printf(\"Palette too large (%d colors) (%s)\\n\",\n                    colors, tiffname);\n                png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n                TIFFClose(tif);\n                return (false);\n            }\n            // Max PNG palette-size is 8 bits, you could convert to\n            // full-color.\n            if (bps \u003e= 8) \n                bit_depth = 8;\n            else\n                bit_depth = bps;\n\n            // PLTE chunk\n            // TIFF palettes contain 16-bit shorts, while PNG palettes\n            // are 8-bit.  Some broken (??) software puts 8-bit values\n            // in the shorts, which would make the palette come out\n            // all zeros, which isn't good.  We check...\n\n            palette_8bit = 1;\n            for (int i = 0 ; i \u003c colors ; i++) {\n                if (redcolormap[i] \u003e 255 || greencolormap[i] \u003e 255 ||\n                         bluecolormap[i] \u003e 255) {\n                     palette_8bit = 0;\n                     break;\n                }\n            } \n#ifdef DEBUG\n            if (palette_8bit \u0026\u0026 verbose)\n                fprintf(stderr,\n                    \"tiff_to_png warning:  assuming 8-bit palette values.\\n\");\n#endif\n\n            for (int i = 0 ; i \u003c colors ; i++) {\n                if (palette_8bit) {\n                    palette[i].red   = (png_byte)redcolormap[i];\n                    palette[i].green = (png_byte)greencolormap[i];\n                    palette[i].blue  = (png_byte)bluecolormap[i];\n                }\n                else {\n                    palette[i].red   = (png_byte)(redcolormap[i] \u003e\u003e 8);\n                    palette[i].green = (png_byte)(greencolormap[i] \u003e\u003e 8);\n                    palette[i].blue  = (png_byte)(bluecolormap[i] \u003e\u003e 8);\n                }\n            }\n            break;\n        }\n\n    case PHOTOMETRIC_YCBCR:\n        TIFFGetField(tif, TIFFTAG_COMPRESSION, \u0026tiff_compression_method);\n        if (tiff_compression_method == COMPRESSION_JPEG \u0026\u0026\n                planar == PLANARCONFIG_CONTIG) {\n            // Can rely on libjpeg to convert to RGB.\n            TIFFSetField(tif, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB);\n            photometric = PHOTOMETRIC_RGB;\n#ifdef DEBUG\n            if (verbose)\n                fprintf(stderr, \"tiff2png:  original color type = YCbCr \"\n                    \"with JPEG compression.\\n\");\n#endif\n        }\n        else {\n            err_printf(\n                \"Don't know how to handle PHOTOMETRIC_YCBCR with \"\n                \"compression %d\\n\"\n                \"  (%sJPEG) and planar config %d (%scontiguous)\\n\"\n                \"  (%s)\\n\", tiff_compression_method,\n                tiff_compression_method == COMPRESSION_JPEG? \"\" : \"not \",\n                planar, planar == PLANARCONFIG_CONTIG? \"\" : \"not \", tiffname);\n            png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n            TIFFClose(tif);\n            return (false);\n        }\n        // fall thru... \n\n    case PHOTOMETRIC_RGB:\n        if (spp == 3) {\n            color_type = PNG_COLOR_TYPE_RGB;\n#ifdef DEBUG\n            if (verbose)\n                fprintf(stderr, \"tiff_to_png:  color type = truecolor\\n\");\n#endif\n        }\n        else {\n            color_type = PNG_COLOR_TYPE_RGB_ALPHA;\n#ifdef DEBUG\n            if (verbose)\n                fprintf(stderr,\n                    \"tiff_to_png:  color type = truecolor + alpha\\n\");\n#endif\n        }\n        if (bps \u003c= 8)\n            bit_depth = 8;\n        else\n            bit_depth = bps;\n        break;\n\n    case PHOTOMETRIC_LOGL:\n    case PHOTOMETRIC_LOGLUV:\n        TIFFGetField(tif, TIFFTAG_COMPRESSION, \u0026tiff_compression_method);\n        if (tiff_compression_method != COMPRESSION_SGILOG \u0026\u0026\n                tiff_compression_method != COMPRESSION_SGILOG24) {\n            err_printf(\"Don't know how to handle PHOTOMETRIC_LOGL%s with\\n\"\n                \"  compression %d (not SGILOG) (%s)\\n\",\n                photometric == PHOTOMETRIC_LOGLUV? \"UV\" : \"\",\n                tiff_compression_method, tiffname);\n            png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n            TIFFClose(tif);\n            return (false);\n        }\n        // rely on library to convert to RGB/greyscale.\n#ifdef LIBTIFF_HAS_16BIT_INTEGER_FORMAT\n        if (bps \u003e 8) {\n            // SGILOGDATAFMT_16BIT converts to a floating-point\n            // luminance value; U,V are left as such. \n            // SGILOGDATAFMT_16BIT_INT doesn't exist.\n\n            TIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_16BIT_INT);\n            bit_depth = bps = 16;\n        }\n        else\n#endif\n        {\n            // SGILOGDATAFMT_8BIT converts to normal grayscale or RGB format.\n            TIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_8BIT);\n            bit_depth = bps = 8;\n        }\n        if (photometric == PHOTOMETRIC_LOGL) {\n            photometric = PHOTOMETRIC_MINISBLACK;\n            color_type = PNG_COLOR_TYPE_GRAY;\n#ifdef DEBUG\n            if (verbose) {\n                fprintf(stderr, \"tiff_to_png:  original color type = \"\n                    \"logL with SGILOG compression.\\n\");\n                fprintf(stderr, \"tiff_to_png:  color type = grayscale.\\n\");\n            }\n#endif\n        }\n        else {\n            photometric = PHOTOMETRIC_RGB;\n            color_type = PNG_COLOR_TYPE_RGB;\n#ifdef DEBUG\n            if (verbose) {\n                fprintf(stderr, \"tiff_to_png:  original color type = \"\n                    \"logLUV with SGILOG compression.\\n\");\n                fprintf(stderr, \"tiff_to_png:  color type = truecolor.\\n\");\n            }\n#endif\n        }\n        break;\n\n    case PHOTOMETRIC_MASK:\n    case PHOTOMETRIC_SEPARATED:\n    case PHOTOMETRIC_CIELAB:\n    case PHOTOMETRIC_DEPTH:\n        err_printf(\"Don't know how to handle %s (%s)\\n\",\n            photometric == PHOTOMETRIC_MASK?      \"PHOTOMETRIC_MASK\" :\n            photometric == PHOTOMETRIC_SEPARATED? \"PHOTOMETRIC_SEPARATED\" :\n            photometric == PHOTOMETRIC_CIELAB?    \"PHOTOMETRIC_CIELAB\" :\n            photometric == PHOTOMETRIC_DEPTH?     \"PHOTOMETRIC_DEPTH\" :\n                                                  \"unknown photometric\",\n            tiffname);\n        png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n        TIFFClose(tif);\n        return (false);\n\n    default:\n        err_printf(\"Unknown photometric (%d) (%s)\\n\",\n            photometric, tiffname);\n        png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n        TIFFClose(tif);\n        return (false);\n    }\n    int tiff_color_type = color_type;\n\n#ifdef DEBUG\n    if (verbose)\n        fprintf(stderr, \"tiff_to_png:  bit depth = %d\\n\", bit_depth);\n#endif\n\n    // Put parameter info in png-chunks.\n\n    png_set_IHDR(png_ptr, info_ptr, width, rows, bit_depth, color_type,\n        PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_DEFAULT,\n        PNG_FILTER_TYPE_DEFAULT);\n\n//    if (png_compression_level != -1)\n//        png_set_compression_level(png_ptr, png_compression_level);\n\n    if (color_type == PNG_COLOR_TYPE_PALETTE)\n        png_set_PLTE(png_ptr, info_ptr, palette, colors);\n\n    // gAMA chunk\n//    if (gamma != -1.0) {\n#ifdef DEBUG\n//        if (verbose)\n//            fprintf(stderr, \"tiff_to_png:  gamma = %f\\n\", gamma);\n#endif\n//        png_set_gAMA(png_ptr, info_ptr, gamma);\n//    }\n\n    // pHYs chunk\n    if (have_res)\n        png_set_pHYs(png_ptr, info_ptr, res_x, res_y, unit_type);\n\n    png_write_info(png_ptr, info_ptr);\n    png_set_packing(png_ptr);\n\n    // Allocate space for one line (or row of tiles) of TIFF image.\n\n    unsigned char *tiffline = 0;\n    unsigned char *tifftile = 0;\n    unsigned char *tiffstrip = 0;\n    size_t tilesz = 0L;\n    int num_tilesX = 0;\n    uint32_t tile_width = 0, tile_height = 0;\n\n    if (!tiled) {\n        // strip-based TIFF\n        if (planar == 1) {\n            // contiguous picture\n            tiffline = (unsigned char*)malloc(TIFFScanlineSize(tif));\n        }\n        else {\n            // separated planes\n            tiffline = (unsigned char*)malloc(TIFFScanlineSize(tif) * spp);\n        }\n    }\n    else {\n        // Allocate space for one \"row\" of tiles.\n\n        TIFFGetField(tif, TIFFTAG_TILEWIDTH, \u0026tile_width);\n        TIFFGetField(tif, TIFFTAG_TILELENGTH, \u0026tile_height);\n\n        num_tilesX = (width+tile_width-1)/tile_width;\n\n        if (planar == 1) {\n            tilesz = TIFFTileSize(tif);\n            tifftile = new unsigned char[tilesz];\n            size_t stripsz = (tile_width*num_tilesX) * tile_height * spp;\n            tiffstrip = new unsigned char[stripsz];\n            tiffline = tiffstrip;\n            // Just set the line to the top of the strip, we'll move it\n            // through below.\n        }\n        else {\n            err_printf(\n                \"Can't handle tiled separated-plane TIFF format (%s).\\n\",\n                tiffname);\n            png_destroy_write_struct (\u0026png_ptr, \u0026info_ptr);\n            TIFFClose(tif);\n            return (false);\n        }\n    }\n\n    if (!tiffline) {\n        err_printf(\"Can't allocate memory for TIFF scanline buffer (%s).\\n\",\n            tiffname);\n        png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n        TIFFClose(tif);\n        if (tiled \u0026\u0026 planar == 1)\n            delete [] tifftile;\n        return (false);\n    }\n\n    if (planar != 1) {\n        // In case we must combine more planes into one.\n        tiffstrip = new unsigned char[TIFFScanlineSize(tif)];\n        if (!tiffstrip) {\n            err_printf(\"Can't allocate memory for TIFF strip buffer (%s).\\n\",\n                tiffname);\n            png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n            TIFFClose(tif);\n            free(tiffline);\n            return (false);\n        }\n    }\n\n    // Allocate space for one line of PNG image.\n    // max: 3 color channels plus one alpha channel, 16 bit =\u003e 8 bytes/pixel\n\n    png_byte *pngline = new unsigned char[cols * 8];\n    for (int pass = 0 ; pass \u003c png_set_interlace_handling(png_ptr); pass++) {\n        for (int row = 0; row \u003c rows; row++) {\n            if (planar == 1) {\n                // contiguous picture\n                if (!tiled) {\n                    if (TIFFReadScanline(tif, tiffline, row, 0) \u003c 0) {\n                        err_printf(\"Bad data read on line %d (%s).\\n\",\n                            row, tiffname);\n                        png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n                        TIFFClose(tif);\n                        free(tiffline);\n                        return (false);\n                    }\n                }\n                else {\n                    // tiled\n                    int col, ok=1, r;\n                    int tileno;\n                    // Read in one row of tiles and hand out the data\n                    // one scanline at a time so the code below\n                    // doesn't need to change.\n\n                    // Is it time for a new strip?\n                    if ((row % tile_height) == 0) {\n                        for (col = 0; ok \u0026\u0026 col \u003c num_tilesX; col += 1 ) {\n                            tileno = col+(row/tile_height)*num_tilesX;\n                            // Read the tile into an RGB array.\n                            if (!TIFFReadEncodedTile(tif, tileno, tifftile,\n                                    tilesz)) {\n                                ok = 0;\n                                break;\n                            }\n\n                            // Copy this tile into the row buffer.\n                            for (r = 0; r \u003c (int) tile_height; r++) {\n                                void *dest = tiffstrip + (r * tile_width *\n                                    num_tilesX * spp) +\n                                    (col * tile_width * spp);\n                                void *src  = tifftile + (r * tile_width * spp);\n                                memcpy(dest, src, (tile_width * spp));\n                            }\n                        }\n                        tiffline = tiffstrip; // Set tileline to top of strip.\n                    }\n                    else {\n                        tiffline = tiffstrip + ((row % tile_height) *\n                            ((tile_width * num_tilesX) * spp));\n                    }\n                }\n            }\n            else {\n                // Separated planes, then combine more strips into one line.\n                unsigned short s;\n\n                // XXX:  this assumes strips; are separated-plane\n                // tiles possible?\n\n                unsigned char *p_line = tiffline;\n                for (int n = 0; n \u003c (cols/8 * bps*spp); n++)\n                    *p_line++ = '\\0';\n\n                for (s = 0; s \u003c spp; s++) {\n                    unsigned char *p_strip = tiffstrip;\n                    int getbitsleft = 8;\n                    p_line = tiffline;\n                    int putbitsleft = 8;\n\n                    if (TIFFReadScanline(tif, tiffstrip, row, s) \u003c 0) {\n                        err_printf(\"Bad data read on line %d (%s).\\n\",\n                            row, tiffname);\n                        png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n                        TIFFClose(tif);\n                        delete [] tiffline;\n                        delete [] tiffstrip;\n                        return (false);\n                    }\n\n                    p_strip = (unsigned char *)tiffstrip;\n                    unsigned char sample = '\\0';\n                    for (int i = 0 ; i \u003c s ; i++)\n                        PUT_LINE_SAMPLE\n                    for (int n = 0; n \u003c cols; n++) {\n                        GET_STRIP_SAMPLE\n                        PUT_LINE_SAMPLE\n                        sample = '\\0';\n                        for (int i = 0 ; i \u003c (spp-1) ; i++)\n                            PUT_LINE_SAMPLE\n                    }\n                }\n            }\n\n            unsigned char *p_line = tiffline;\n            int bitsleft = 8;\n            png_byte *p_png = pngline;\n\n            // Convert from tiff-line to png-line.\n\n            switch (tiff_color_type) {\n            case PNG_COLOR_TYPE_GRAY:       // we know spp == 1\n                for (int col = cols; col \u003e 0; --col) {\n                    switch (bps) {\n                    case 16:\n#ifdef INVERT_MINISWHITE\n                        if (photometric == PHOTOMETRIC_MINISWHITE) {\n                            unsigned char sample;\n                            int sample16;\n                            if (bigendian) {\n                                // same as PNG order\n                                GET_LINE_SAMPLE\n                                sample16 = sample;\n                                sample16 \u003c\u003c= 8;\n                                GET_LINE_SAMPLE\n                                sample16 |= sample;\n                            }\n                            else {\n                                // reverse of PNG\n                                GET_LINE_SAMPLE\n                                sample16 = sample;\n                                GET_LINE_SAMPLE\n                                sample16 |= (((int)sample) \u003c\u003c 8);\n                            }\n                            sample16 = maxval - sample16;\n                            *p_png++ = (unsigned char)((sample16 \u003e\u003e 8) \u0026 0xff);\n                            *p_png++ = (unsigned char)(sample16 \u0026 0xff);\n                        }\n                        else // not PHOTOMETRIC_MINISWHITE\n#endif\n                        {\n                            unsigned char sample;\n                            if (bigendian) {\n                                GET_LINE_SAMPLE\n                                *p_png++ = sample;\n                                GET_LINE_SAMPLE\n                                *p_png++ = sample;\n                            }\n                            else {\n                                GET_LINE_SAMPLE\n                                p_png[1] = sample;\n                                GET_LINE_SAMPLE\n                                *p_png = sample;\n                                p_png += 2;\n                            }\n                        }\n                        break;\n\n                    case 8:\n                    case 4:\n                    case 2:\n                    case 1:\n                        {\n                            unsigned char sample;\n                            GET_LINE_SAMPLE\n#ifdef INVERT_MINISWHITE\n                            if (photometric == PHOTOMETRIC_MINISWHITE)\n                                sample = maxval - sample;\n#endif\n                            *p_png++ = sample;\n                        }\n                        break;\n\n                    }\n                }\n                break;\n\n            case PNG_COLOR_TYPE_GRAY_ALPHA:\n                for (int col = 0; col \u003c cols; col++) {\n                    for (int i = 0 ; i \u003c spp ; i++) {\n                        switch (bps) {\n                        case 16:\n#ifdef INVERT_MINISWHITE\n                            if (photometric == PHOTOMETRIC_MINISWHITE \u0026\u0026\n                                    i == 0) {\n                                unsigned char sample;\n                                int sample16;\n                                if (bigendian) {\n                                    GET_LINE_SAMPLE\n                                    sample16 = (sample \u003c\u003c 8);\n                                    GET_LINE_SAMPLE\n                                    sample16 |= sample;\n                                }\n                                else {\n                                    GET_LINE_SAMPLE\n                                    sample16 = sample;\n                                    GET_LINE_SAMPLE\n                                    sample16 |= (((int)sample) \u003c\u003c 8);\n                                }\n                                sample16 = maxval - sample16;\n                                *p_png++ = (unsigned char)(\n                                    (sample16 \u003e\u003e 8) \u0026 0xff);\n                                *p_png++ = (unsigned char)(sample16 \u0026 0xff);\n                            }\n                            else\n#endif\n                            {\n                                unsigned char sample;\n                                if (bigendian) {\n                                    GET_LINE_SAMPLE\n                                    *p_png++ = sample;\n                                    GET_LINE_SAMPLE\n                                    *p_png++ = sample;\n                                }\n                                else {\n                                    GET_LINE_SAMPLE\n                                    p_png[1] = sample;\n                                    GET_LINE_SAMPLE\n                                    *p_png = sample;\n                                    p_png += 2;\n                                }\n                            }\n                            break;\n\n                        case 8:\n                            {\n                                unsigned char sample;\n                                GET_LINE_SAMPLE\n#ifdef INVERT_MINISWHITE\n                                if (photometric == PHOTOMETRIC_MINISWHITE \u0026\u0026\n                                        i == 0)\n                                    sample = maxval - sample;\n#endif\n                                *p_png++ = sample;\n                            }\n                            break;\n\n                        case 4:\n                            {\n                                unsigned char sample;\n                                GET_LINE_SAMPLE\n#ifdef INVERT_MINISWHITE\n                                if (photometric == PHOTOMETRIC_MINISWHITE \u0026\u0026\n                                        i == 0)\n                                    sample = maxval - sample;\n#endif\n                                *p_png++ = sample * 17;   /* was 16 */\n                            }\n                            break;\n\n                        case 2:\n                            {\n                                unsigned char sample;\n                                GET_LINE_SAMPLE\n#ifdef INVERT_MINISWHITE\n                                if (photometric == PHOTOMETRIC_MINISWHITE \u0026\u0026\n                                        i == 0)\n                                    sample = maxval - sample;\n#endif\n                                *p_png++ = sample * 85;   /* was 64 */\n                            }\n                            break;\n\n                        case 1:\n                            {\n                                unsigned char sample;\n                                GET_LINE_SAMPLE\n#ifdef INVERT_MINISWHITE\n                                if (photometric == PHOTOMETRIC_MINISWHITE \u0026\u0026\n                                        i == 0)\n                                    sample = maxval - sample;\n#endif\n                                *p_png++ = sample * 255;  /* was 128...oops */\n                            }\n                            break;\n\n                        }\n                    }\n                }\n                break;\n\n            case PNG_COLOR_TYPE_RGB:\n            case PNG_COLOR_TYPE_RGB_ALPHA:\n                for (int col = 0; col \u003c cols; col++) {\n                    // Process for red, green and blue (and when\n                    // applicable alpha).\n\n                    for (int i = 0 ; i \u003c spp ; i++) {\n                        switch (bps) {\n                        case 16:\n                            // XXX:  do we need INVERT_MINISWHITE\n                            // support here, too, or is that only for\n                            // grayscale?\n\n                            unsigned char sample;\n                            if (bigendian) {\n                                GET_LINE_SAMPLE\n                                *p_png++ = sample;\n                                GET_LINE_SAMPLE\n                                *p_png++ = sample;\n                            }\n                            else {\n                                GET_LINE_SAMPLE\n                                p_png[1] = sample;\n                                GET_LINE_SAMPLE\n                                *p_png = sample;\n                                p_png += 2;\n                            }\n                            break;\n\n                        case 8:\n                            GET_LINE_SAMPLE\n                            *p_png++ = sample;\n                            break;\n\n                        case 4:\n                            GET_LINE_SAMPLE\n                            *p_png++ = sample * 17;\n                            break;\n\n                        case 2:\n                            GET_LINE_SAMPLE\n                            *p_png++ = sample * 85;\n                            break;\n\n                        case 1:\n                            GET_LINE_SAMPLE\n                            *p_png++ = sample * 255;\n                           break;\n\n                        }\n                    }\n                }\n                break;\n  \n            case PNG_COLOR_TYPE_PALETTE:\n                for (int col = 0; col \u003c cols; col++) {\n                    unsigned char sample;\n                    GET_LINE_SAMPLE\n                    *p_png++ = sample;\n                }\n                break;\n  \n            default:\n                err_printf(\"Unknown photometric (%d) (%s).\\n\",\n                    photometric, tiffname);\n                png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n                TIFFClose(tif);\n                delete [] tiffline;\n                if (tiled \u0026\u0026 planar == 1)\n                    delete [] tifftile;\n                else if (planar != 1)\n                    delete [] tiffstrip;\n                return (false);\n\n            }\n            png_write_row(png_ptr, pngline);\n        }\n    }\n\n    TIFFClose(tif);\n\n    png_write_end(png_ptr, info_ptr);\n\n    png_destroy_write_struct(\u0026png_ptr, \u0026info_ptr);\n\n    free(tiffline);\n    if (tiled \u0026\u0026 planar == 1)\n        delete [] tifftile;\n    else if (planar != 1)\n        delete [] tiffstrip;\n    return (true);\n}\n\n\n#else\n\nhtmRawImageData*\nhtmImageManager::readTIFF(ImageBuffer*)\n{\n    return (0);\n}\n\n#endif\n\n",
        "name": "htm_TIFF.cc",
        "path": "mozy/src/htm/htm_TIFF.cc",
        "url": "/github.com/wrcad/xictools/-/blob/mozy/src/htm/htm_TIFF.cc"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 317,
          "offsetAndLengths": [
            [
              8,
              18
            ]
          ],
          "preview": "        TIFFPrintDirectory(tif, stderr, TIFFPRINT_NONE);"
        }
      ],
      "repository": {
        "name": "github.com/wrcad/xictools",
        "url": "/github.com/wrcad/xictools"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c879e6eeedc274706c6138f7823318df68147c1b"
        },
        "content": "#ifdef TINYTIFF_TEST_LIBTIFF\r\n#include \u003ctiffio.h\u003e\r\n#include \"libtiff_tools.h\"\r\n#endif\r\n#include \u003carray\u003e\r\n#include \u003cfstream\u003e\r\n#include \u003ciostream\u003e\r\n#include \u003cstring\u003e\r\n#include \u003cstdio.h\u003e\r\n#include \u003cstdlib.h\u003e\r\n#include \u003ciomanip\u003e\r\n#include \"tinytiffwriter.h\"\r\n#include \"tinytiffreader.h\"\r\n#include \"tinytiffhighrestimer.h\"\r\n#include \"test_results.h\"\r\n#include \"testimage_tools.h\"\r\n#include \u003csys/types.h\u003e\r\n#include \u003csys/stat.h\u003e\r\n#include \u003cstdio.h\u003e\r\n#include \u003cstdlib.h\u003e\r\n#include \u003cerrno.h\u003e\r\n#include \u003cstring.h\u003e\r\n#include \u003ccstring\u003e\r\n#include \u003ciostream\u003e\r\n#include \u003cfstream\u003e\r\n#include \u003csstream\u003e\r\n#include \u003ccstdarg\u003e\r\n#include \u003ccstdio\u003e\r\n#include \u003ccstdlib\u003e\r\n#include \u003cvector\u003e\r\n#include \u003ctime.h\u003e\r\n#include \u003cmath.h\u003e\r\n#include \u003csys/stat.h\u003e\r\n#include \u003cstdint.h\u003e\r\n#include \u003cstdexcept\u003e\r\n#include \u003ccctype\u003e\r\n#include \u003carray\u003e\r\n#include \"tinytiff_tools.hxx\"\r\n\r\n\r\ninline TinyTIFFWriterFile* TinyTIFFWriter_open(const std::string\u0026 filename, uint16_t bitsPerSample, enum TinyTIFFWriterSampleFormat sampleFormat, uint16_t samples, uint32_t width, uint32_t height, enum TinyTIFFWriterSampleInterpretation sampleInterpretation) {\r\n    return TinyTIFFWriter_open(filename.c_str(), bitsPerSample, sampleFormat, samples, width, height, sampleInterpretation);\r\n}\r\n std::string tolower(const std::string\u0026 s){\r\n  std::string d;\r\n  d=\"\";\r\n  if (s.length()\u003e0) {\r\n    for (unsigned long i=0; i\u003cs.length(); i++) {\r\n        d+=std::tolower(s[i]);\r\n    }\r\n  }\r\n  return d;\r\n};\r\n\r\n bool strtobool(std::string data){\r\n    std::string d=tolower(data);\r\n  if (d==\"true\") return true;\r\n  if (d==\"t\") return true;\r\n  if (d==\"1\") return true;\r\n  if (d==\"j\") return true;\r\n  if (d==\"y\") return true;\r\n  if (d==\"yes\") return true;\r\n  if (d==\"ja\") return true;\r\n  return false;\r\n}\r\n std::string toupper(const std::string\u0026 s){\r\n  std::string d;\r\n  d=\"\";\r\n  if (s.length()\u003e0) {\r\n    for (unsigned long i=0; i\u003cs.length(); i++) {\r\n        d+=toupper(s[i]);\r\n    }\r\n  }\r\n  return d;\r\n};\r\n\r\n\r\n std::string inttostr(long data){\r\n  return format(\"%ld\", data);\r\n};\r\n\r\n std::string inttohex(long data){\r\n  return format(\"%lX\", data);\r\n};\r\n\r\n std::string uinttostr(unsigned long data){\r\n  std::ostringstream ost;\r\n  ost\u003c\u003cdata;\r\n  return ost.str();\r\n};\r\n\r\n std::string floattostr(double data, int past_comma=-1, bool remove_trail0=false, double belowIsZero=1e-16){\r\n  if (belowIsZero\u003e0) {\r\n      if (fabs(data)\u003cbelowIsZero) return std::string(\"0\");\r\n  }\r\n\r\n  std::string form=\"%.\"+inttostr(past_comma)+\"lf\";\r\n  //std::string form=\"%lf\";\r\n  if (past_comma\u003c=0) form=\"%lf\";\r\n  std::string r=format(form,data);\r\n  //std::cout\u003c\u003cr\u003c\u003cstd::endl;\r\n  if (remove_trail0 \u0026\u0026 (tolower(r).find('e')==std::string::npos)) {\r\n      if (data==0) return \"0\";\r\n      //size_t cp=r.find(\".\");\r\n      //if (cp\u003cr.size()) return r;\r\n      std::string re;\r\n      size_t dpos=r.find('.');\r\n      if (dpos==std::string::npos) {\r\n          return r;\r\n      } else {\r\n          long i=r.size()-1;\r\n          bool nonz=false;\r\n          while (i\u003e=0) {\r\n              //std::cout\u003c\u003ci\u003c\u003c\"\\n\";\r\n              if (r[i]!='0') {\r\n                  nonz=true;\r\n              }\r\n              if (nonz || (i\u003clong(dpos))) {\r\n                  if (re.size()==0 \u0026\u0026 r[i]=='.') {\r\n                      // swallow decimal dot, if only 0 folowed\r\n                  } else {\r\n                      re=r[i]+re;\r\n                  }\r\n              }\r\n              i--;\r\n          }\r\n          return re;\r\n      }\r\n\r\n  }\r\n  return r;\r\n}\r\n\r\n std::string floattounitstr(double dataa, std::string unitname){\r\n  if (dataa==0) return floattostr(dataa)+unitname;\r\n  std::string u=\"\";\r\n  double factor=1;\r\n  double data=fabs(dataa);\r\n  if (data\u003e=1e3) { u=\"k\"; factor=1e3; }\r\n  if (data\u003e=1e6) { u=\"M\"; factor=1e6; }\r\n  if (data\u003e=1e9) { u=\"G\"; factor=1e9; }\r\n  if (data\u003e=1e12) { u=\"T\"; factor=1e12; }\r\n  if (data\u003e=1e15) { u=\"P\"; factor=1e15; }\r\n  if (data\u003e=1e18) { u=\"E\"; factor=1e18; }\r\n  if (data\u003c1) {u=\"m\"; factor=1e-3; }\r\n  if (data\u003c1e-3) {u=\"u\"; factor=1e-6; }\r\n  if (data\u003c1e-6) {u=\"n\"; factor=1e-9; }\r\n  if (data\u003c1e-9) {u=\"p\"; factor=1e-12; }\r\n  if (data\u003c1e-12) {u=\"f\"; factor=1e-15; }\r\n  if (data\u003c1e-15) {u=\"a\"; factor=1e-18; }\r\n\r\n  return floattostr(dataa/factor)+u+unitname;\r\n};\r\n\r\nusing namespace std;\r\n\r\n#define TESTFAIL(msg, res) { std::stringstream str; str\u003c\u003cmsg; std::cout\u003c\u003cstr.str()\u003c\u003c\"\\n\"; res.success=ok=false; res.message=str.str();}\r\n\r\n// save data (size=width*height*sizeof(TDATA)) into a file \\a filename\r\ntemplate\u003cclass TDATA\u003e\r\nvoid SAVE_TIFF(const std::string\u0026 filename, const TDATA* data, size_t width, size_t height) {\r\n    TinyTIFFWriterFile* tiff = TinyTIFFWriter_open(filename.c_str(), sizeof(TDATA)*8, TinyTIFF_SampleFormatFromType\u003cTDATA\u003e().format, 1, width, height, TinyTIFFWriter_Greyscale);\r\n    TinyTIFFWriter_writeImage(tiff, data);\r\n    TinyTIFFWriter_close(tiff);\r\n}\r\n\r\n// save data (size=width*height*sizeof(TDATA)) into a file \\a filename\r\ntemplate\u003cclass TDATA\u003e\r\nvoid SAVE_TIFF_libtiff(const std::string\u0026 filename, const TDATA* data, size_t width, size_t height, bool little_endian=true) {\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    TIFF* tifvideo;\r\n    if (little_endian) {\r\n        tifvideo=TIFFOpen(filename.c_str(), \"wl\");\r\n    } else {\r\n        tifvideo=TIFFOpen(filename.c_str(), \"wb\");\r\n    }\r\n    if (tifvideo) {\r\n        TIFFWrite\u003cTDATA\u003e(tifvideo, data, width, height);\r\n        TIFFWriteDirectory(tifvideo);\r\n        TIFFClose(tifvideo);\r\n    }\r\n#endif\r\n}\r\n\r\n\r\n// try to open a TIFF file with TInyTIFFReader, if read successfully, the read frames are stored using SAVE_TIFF,\r\n// does not check the contents for correctness!\r\ntemplate\u003cclass TIMAGESAMPLETYPE\u003e\r\nvoid TEST_SIMPLE(const std::string\u0026 filename, std::vector\u003cTestResult\u003e\u0026 test_results) {\r\n    HighResTimer timer;\r\n    bool ok=false;\r\n    test_results.emplace_back();\r\n    test_results.back().name=std::string(\"TEST_SIMPLE(\")+std::string(filename)+std::string(\")\");\r\n    std::cout\u003c\u003c\"\\n\\nreading '\"\u003c\u003cstd::string(filename)\u003c\u003c\"' and checking read contents ... filesize = \"\u003c\u003cbytestostr(get_filesize(filename.c_str()))\u003c\u003c\"\\n\";\r\n    test_results.back().success=ok=false;\r\n    TinyTIFFReaderFile* tiffr=TinyTIFFReader_open(filename.c_str());\r\n    if (!tiffr) {\r\n        TESTFAIL(\"reading (not existent, not accessible or no TIFF file)\", test_results.back())\r\n    } else {\r\n        if (TinyTIFFReader_wasError(tiffr)) TESTFAIL(\"\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n        std::cout\u003c\u003c\"    ImageDescription:\\n\"\u003c\u003c TinyTIFFReader_getImageDescription(tiffr) \u003c\u003c\"\\n\";\r\n        timer.start();\r\n        uint32_t frames=TinyTIFFReader_countFrames(tiffr);\r\n        double duration=timer.get_time();\r\n        std::cout\u003c\u003c\"    frames: \"\u003c\u003cframes\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n        if (TinyTIFFReader_wasError(tiffr)) TESTFAIL(\"\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n        timer.start();\r\n        test_results.back().success=ok=true;\r\n        uint32_t frame=0;\r\n        do {\r\n            uint32_t width=TinyTIFFReader_getWidth(tiffr);\r\n            uint32_t height=TinyTIFFReader_getHeight(tiffr);\r\n            if (width\u003e0 \u0026\u0026 height\u003e0) std::cout\u003c\u003c\"    size of frame \"\u003c\u003cframe\u003c\u003c\": \"\u003c\u003cwidth\u003c\u003c\"x\"\u003c\u003cheight\u003c\u003c\"\\n\";\r\n            else { TESTFAIL(\"IN FRAME \"\u003c\u003cframe\u003c\u003c\": size too small \"\u003c\u003cwidth\u003c\u003c\"x\"\u003c\u003cheight\u003c\u003c\"\", test_results.back()) test_results.back().success=ok=false; }\r\n            if (ok) {\r\n                frame++;\r\n                TIMAGESAMPLETYPE* tmp=(TIMAGESAMPLETYPE*)calloc(width*height, sizeof(TIMAGESAMPLETYPE));\r\n                TinyTIFFReader_getSampleData(tiffr, tmp, 0);\r\n                if (TinyTIFFReader_wasError(tiffr)) { test_results.back().success=ok=false; TESTFAIL(\"\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back()) }\r\n                if (ok) {\r\n                    char fn[1024];\r\n                    sprintf(fn, \"%s.%u.tif\", filename.c_str(), frame);\r\n                    SAVE_TIFF(fn, tmp, width, height);\r\n                }\r\n                free(tmp);\r\n            }\r\n        } while (ok \u0026\u0026 TinyTIFFReader_readNext(tiffr));\r\n        duration=timer.get_time();\r\n        test_results.back().duration_ms=duration/1.0e3;\r\n        test_results.back().numImages=frame;\r\n        std::cout\u003c\u003c\"    read and checked all frames: \"\u003c\u003c((ok)?std::string(\"SUCCESS\"):std::string(\"ERROR\"))\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n        std::cout\u003c\u003c\"    read \"\u003c\u003cframe\u003c\u003c\" frames\\n\";\r\n    }\r\n    TinyTIFFReader_close(tiffr);\r\n    test_results.back().success=ok;\r\n    if (ok) std::cout\u003c\u003c\"  =\u003e SUCCESS\\n\";\r\n    else std::cout\u003c\u003c\"  =\u003e NOT CORRECTLY READ\\n\";\r\n}\r\n\r\n\r\n// try to read the data in the TIFF file \\a filename with TinyTIFFReader, compare the read data to the data in image and imagei, the file is expected to contain either\r\n// a single frame of contents \\a image, or a series of frames alternativ between image and imagei (i.e.  image,imagei,image,imagei,image,...)\r\ntemplate\u003cclass TIMAGESAMPLETYPE\u003e\r\nvoid TEST(const std::string\u0026 filename, const TIMAGESAMPLETYPE* image, const TIMAGESAMPLETYPE* imagei,size_t WIDTH_IN, size_t HEIGHT_IN, size_t SAMPLES_IN, size_t FRAMES_IN, std::vector\u003cTestResult\u003e\u0026 test_results) {\r\n    HighResTimer timer, timer1;\r\n    bool ok=false;\r\n    std::cout\u003c\u003c\"\\n\\nreading '\"\u003c\u003cstd::string(filename)\u003c\u003c\"' and checking read contents ... filesize = \"\u003c\u003cbytestostr(get_filesize(filename.c_str()))\u003c\u003c\"\\n\";\r\n    test_results.emplace_back();\r\n    const std::string desc=std::to_string(WIDTH_IN)+\"x\"+std::to_string(HEIGHT_IN)+\"pix/\"+std::to_string(sizeof(TIMAGESAMPLETYPE)*8)+\"bit/\"+std::to_string(SAMPLES_IN)+\"ch/\"+std::to_string(FRAMES_IN)+\"frames\";\r\n    test_results.back().name=std::string(\"TEST(\")+desc+\", \"+std::string(filename)+std::string(\")\");\r\n    test_results.back().success=ok=false;\r\n    try {\r\n        TinyTIFFReaderFile* tiffr=TinyTIFFReader_open(filename.c_str());\r\n        if (!tiffr) {\r\n            TESTFAIL(\"reading (not existent, not accessible or no TIFF file)\", test_results.back())\r\n        } else {\r\n            if (TinyTIFFReader_wasError(tiffr)) TESTFAIL(\"\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n            const char* desc=TinyTIFFReader_getImageDescription(tiffr);\r\n            if (desc!=NULL \u0026\u0026 strlen(desc)\u003e0) {\r\n                std::cout\u003c\u003c\"    ImageDescription:\\n\"\u003c\u003c desc \u003c\u003c\"\\n\";\r\n            } else {\r\n                std::cout\u003c\u003c\"    ImageDescription: EMPTY\\n\";\r\n            }\r\n            timer.start();\r\n            uint32_t frames=TinyTIFFReader_countFrames(tiffr);\r\n            double duration=timer.get_time();\r\n            std::cout\u003c\u003c\"    frames: \"\u003c\u003cframes\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n            if (TinyTIFFReader_wasError(tiffr)) TESTFAIL(\"\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n            timer.start();\r\n            test_results.back().success=ok=true;\r\n            uint32_t frame=0;\r\n            double duration_getdata=0, duration_nextframe=0;\r\n            bool next;\r\n            do {\r\n                uint32_t width=TinyTIFFReader_getWidth(tiffr);\r\n                uint32_t height=TinyTIFFReader_getHeight(tiffr);\r\n                uint32_t samples=TinyTIFFReader_getSamplesPerPixel(tiffr);\r\n                test_results.back().success=ok=(width==WIDTH_IN)\u0026\u0026(height==HEIGHT_IN)\u0026\u0026(samples==SAMPLES_IN);\r\n                if (!ok) TESTFAIL(\"IN FRAME \"\u003c\u003cframe\u003c\u003c\": size does not match, read \"\u003c\u003cwidth\u003c\u003c\"x\"\u003c\u003cheight\u003c\u003c\"x\"\u003c\u003csamples\u003c\u003c\"    expected \"\u003c\u003cWIDTH_IN\u003c\u003c\"x\"\u003c\u003cHEIGHT_IN\u003c\u003c\"x\"\u003c\u003cSAMPLES_IN\u003c\u003c\"\", test_results.back());\r\n                if (ok) {\r\n                    for (size_t sample=0; sample\u003csamples; sample++) {\r\n                        TIMAGESAMPLETYPE* tmp=(TIMAGESAMPLETYPE*)calloc(width*height, TinyTIFFReader_getBitsPerSample(tiffr, sample)/8);\r\n                        timer1.start();\r\n                        TinyTIFFReader_getSampleData(tiffr, tmp, sample);\r\n                        duration_getdata+=timer1.get_time();\r\n                        if (TinyTIFFReader_wasError(tiffr)) TESTFAIL(\"\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n                        uint32_t poserror=0xFFFFFFFF;\r\n                        if (frame%2==0) {\r\n                            for (uint32_t i=0; i\u003cwidth*height; i++) {\r\n                                test_results.back().success=ok=ok\u0026\u0026(tmp[i]==image[i*SAMPLES_IN+sample]);\r\n                                if (!ok) { poserror=i; break; }\r\n                            }\r\n                        } else {\r\n                            for (uint32_t i=0; i\u003cwidth*height; i++) {\r\n                                test_results.back().success=ok=ok\u0026\u0026(tmp[i]==imagei[i*SAMPLES_IN+sample]);\r\n                                if (!ok) { poserror=i; break; }\r\n                            }\r\n                        }\r\n                        free(tmp);\r\n                        if (!ok) TESTFAIL(\"IN FRAME \"\u003c\u003cframe\u003c\u003c\"/ SAMPLE \"\u003c\u003csample\u003c\u003c\": did not read correct contents @ pos=\"\u003c\u003cposerror\u003c\u003c\"\", test_results.back());\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    frame++;\r\n                }\r\n                timer1.start();\r\n                next=TinyTIFFReader_readNext(tiffr);\r\n                duration_nextframe+=timer1.get_time();\r\n            } while (ok \u0026\u0026 next);\r\n            duration=timer.get_time();\r\n            test_results.back().duration_ms=duration/1.0e3;\r\n            test_results.back().numImages=frame;\r\n            std::cout\u003c\u003c\"    read and checked \"\u003c\u003cframe\u003c\u003c\" frames: \"\u003c\u003c((ok)?std::string(\"SUCCESS\"):std::string(\"ERROR\"))\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n            std::cout\u003c\u003c\"    getSampleData() consumed \"\u003c\u003cfloattounitstr(duration_getdata/1.0e6, \"s\")\u003c\u003c\"\\n\";\r\n            std::cout\u003c\u003c\"    readNext() consumed \"\u003c\u003cfloattounitstr(duration_nextframe/1.0e6, \"s\")\u003c\u003c\"\\n\";\r\n            std::cout\u003c\u003c\"    read \"\u003c\u003cframe\u003c\u003c\" frames\\n\";\r\n\r\n            if (frame!=FRAMES_IN) {\r\n                ok=false;\r\n                TESTFAIL(\"not enough frames red: expected: \"\u003c\u003cFRAMES_IN\u003c\u003c\", found: \"\u003c\u003cframe\u003c\u003c\"\", test_results.back())\r\n            }\r\n        }\r\n        TinyTIFFReader_close(tiffr);\r\n    } catch(...) {\r\n        ok=false;\r\n        std::cout\u003c\u003c\"       CRASH While reading file\\n\";\r\n    }\r\n\r\n    test_results.back().success=ok;\r\n    if (ok) std::cout\u003c\u003c\"  =\u003e SUCCESS\\n\";\r\n    else std::cout\u003c\u003c\"  =\u003e NOT CORRECTLY READ\\n\";\r\n}\r\n\r\n\r\n// try to read the data in the TIFF file \\a filename with TinyTIFFReader and LIBTIFF and compare the result of the two\r\ntemplate\u003cclass TIMAGESAMPLETYPE\u003e\r\nvoid TEST_AGAINST_LIBTIFF(const std::string\u0026 filename, std::vector\u003cTestResult\u003e\u0026 test_results) {\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    HighResTimer timer, timer1;\r\n    bool ok=false;\r\n    std::cout\u003c\u003c\"\\n\\nreading '\"\u003c\u003cstd::string(filename)\u003c\u003c\"' with tinytiff and libtiff and checking read contents ... filesize = \"\u003c\u003cbytestostr(get_filesize(filename.c_str()))\u003c\u003c\"\\n\";\r\n    test_results.emplace_back();\r\n    test_results.back().name=std::string(\"TEST_AGAINST_LIBTIFF(\")+std::string(filename)+std::string(\")\");\r\n    test_results.back().success=ok=false;\r\n    test_results.back().numImages=0;\r\n    try {\r\n        timer.start();\r\n        std::cout\u003c\u003c\"    libTIFF: opening file with     [duration: \"\u003c\u003cfloattounitstr(double(timer.get_time())/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n        TIFF* ltiff=TIFFOpen(filename.c_str(), \"r\");\r\n        if (!ltiff) {\r\n            TESTFAIL(\"libTIFF ERROR: reading (not existent, not accessible or no TIFF file)\", test_results.back())\r\n        } else {\r\n            timer.start();\r\n            uint32_t libTIFF_frames=TIFFCountDirectories(ltiff);\r\n            double duration=timer.get_time();\r\n            std::cout\u003c\u003c\"    libTIFF: frames: \"\u003c\u003clibTIFF_frames\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n            std::cout\u003c\u003c\"    TinyTIFF: opening file with     [duration: \"\u003c\u003cfloattounitstr(double(timer.get_time())/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n            TinyTIFFReaderFile* tiffr=TinyTIFFReader_open(filename.c_str());\r\n            if (!tiffr) {\r\n                TESTFAIL(\"TinyTIFF ERROR: reading (not existent, not accessible or no TIFF file)\", test_results.back())\r\n                ok=false;\r\n            } else if (TinyTIFFReader_wasError(tiffr)) {\r\n                TESTFAIL(\"TinyTIFF ERROR: \"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n                ok=false;\r\n            } else {\r\n                timer.start();\r\n                uint32_t tinyTIFF_frames=TinyTIFFReader_countFrames(tiffr);\r\n                duration=timer.get_time();\r\n                std::cout\u003c\u003c\"    TinyTIFF: frames: \"\u003c\u003ctinyTIFF_frames\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n                if (TinyTIFFReader_wasError(tiffr)) {\r\n                    TESTFAIL(\"TinyTIFF ERROR: \"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n                    ok=false;\r\n                } else {\r\n                    if (libTIFF_frames!=tinyTIFF_frames) {\r\n                        TESTFAIL(\"number of frames, read with TinyTIFF (\"\u003c\u003ctinyTIFF_frames\u003c\u003c\") and libTIFF (\"\u003c\u003clibTIFF_frames\u003c\u003c\") are not equal!\", test_results.back())\r\n                        ok=false;\r\n                    } else {\r\n                        timer.start();\r\n                        size_t frame=0;\r\n                        ok=true;\r\n                        do {\r\n                            std::cout\u003c\u003c\"   frame: \"\u003c\u003cframe\u003c\u003cstd::endl;\r\n                            uint32_t tinyTIFF_width=TinyTIFFReader_getWidth(tiffr);\r\n                            uint32_t tinyTIFF_height=TinyTIFFReader_getHeight(tiffr);\r\n                            uint16_t tinyTIFF_bitspersample=TinyTIFFReader_getBitsPerSample(tiffr, 0);\r\n                            uint16_t tinyTIFF_samplesperpixel=TinyTIFFReader_getSamplesPerPixel(tiffr);\r\n                            const char* tinyTIFF_imagedesc=TinyTIFFReader_getImageDescription(tiffr);\r\n                            std::cout\u003c\u003c\"     tinyTIFF: width=\"\u003c\u003ctinyTIFF_width\u003c\u003c\", height=\"\u003c\u003ctinyTIFF_height\u003c\u003c\", bitspersample=\"\u003c\u003ctinyTIFF_bitspersample\u003c\u003c\", samplesperpixel=\"\u003c\u003ctinyTIFF_samplesperpixel\u003c\u003c\"\\n\";\r\n                            if (frame==0) {\r\n                                const std::string desc=std::to_string(tinyTIFF_width)+\"x\"+std::to_string(tinyTIFF_height)+\"pix/\"+std::to_string(sizeof(TIMAGESAMPLETYPE)*8)+\"bit/\"+std::to_string(tinyTIFF_samplesperpixel)+\"ch/\"+std::to_string(tinyTIFF_frames)+\"frames\";\r\n                                test_results.back().name=std::string(\"TEST_AGAINST_LIBTIFF(\")+desc+\", \"+std::string(filename)+std::string(\")\");\r\n                            }\r\n\r\n                            uint32_t libTIFF_width=0;\r\n                            uint32_t libTIFF_height=0;\r\n                            uint32_t libTIFF_bitspersample=0;\r\n                            uint32_t libTIFF_samplesperpixel=0;\r\n                            char*libtiff_imagedesc;\r\n                            TIFFGetField(ltiff,TIFFTAG_SAMPLESPERPIXEL,\u0026libTIFF_samplesperpixel);\r\n                            TIFFGetField(ltiff,TIFFTAG_BITSPERSAMPLE,\u0026libTIFF_bitspersample);\r\n                            TIFFGetField(ltiff,TIFFTAG_IMAGEWIDTH,\u0026libTIFF_width);\r\n                            TIFFGetField(ltiff,TIFFTAG_IMAGELENGTH,\u0026libTIFF_height);\r\n                            TIFFGetField(ltiff,TIFFTAG_IMAGEDESCRIPTION,\u0026libtiff_imagedesc);\r\n                            TIFFPrintDirectory(ltiff, stdout,TIFFPRINT_STRIPS|TIFFPRINT_COLORMAP);\r\n                            std::cout\u003c\u003c\"     libTIFF:  width=\"\u003c\u003clibTIFF_width\u003c\u003c\", height=\"\u003c\u003clibTIFF_height\u003c\u003c\", bitspersample=\"\u003c\u003clibTIFF_bitspersample\u003c\u003c\", samplesperpixel=\"\u003c\u003clibTIFF_samplesperpixel\u003c\u003c\"\\n\";\r\n\r\n                            if (tinyTIFF_width!=libTIFF_width) {\r\n                                TESTFAIL(\"in frame \"\u003c\u003cframe\u003c\u003c\": TinyTIFF and libTIFF read different widths (TinyTIFF: \"\u003c\u003ctinyTIFF_width\u003c\u003c\" != libTIFF: \"\u003c\u003clibTIFF_width\u003c\u003c\")\", test_results.back())\r\n                                ok=false;\r\n                                break;\r\n                            }\r\n                            if (tinyTIFF_height!=libTIFF_height) {\r\n                                TESTFAIL(\"in frame \"\u003c\u003cframe\u003c\u003c\": TinyTIFF and libTIFF read different heights (TinyTIFF: \"\u003c\u003ctinyTIFF_height\u003c\u003c\" != libTIFF: \"\u003c\u003clibTIFF_height\u003c\u003c\")\", test_results.back())\r\n                                ok=false;\r\n                                break;\r\n                            }\r\n                            if (tinyTIFF_bitspersample!=libTIFF_bitspersample) {\r\n                                TESTFAIL(\"in frame \"\u003c\u003cframe\u003c\u003c\": TinyTIFF and libTIFF read different bitspersamples (TinyTIFF: \"\u003c\u003ctinyTIFF_bitspersample\u003c\u003c\" != libTIFF: \"\u003c\u003clibTIFF_bitspersample\u003c\u003c\")\", test_results.back())\r\n                                ok=false;\r\n                                break;\r\n                            }\r\n                            if (tinyTIFF_samplesperpixel!=libTIFF_samplesperpixel) {\r\n                                TESTFAIL(\"in frame \"\u003c\u003cframe\u003c\u003c\": TinyTIFF and libTIFF read different samplesperpixels (TinyTIFF: \"\u003c\u003ctinyTIFF_samplesperpixel\u003c\u003c\" != libTIFF: \"\u003c\u003clibTIFF_samplesperpixel\u003c\u003c\")\", test_results.back())\r\n                                ok=false;\r\n                                break;\r\n                            }\r\n                            if (tinyTIFF_imagedesc==nullptr || libtiff_imagedesc==nullptr || strcmp(tinyTIFF_imagedesc, libtiff_imagedesc)!=0) {\r\n                                std::cout\u003c\u003c\"       WARNING in frame \"\u003c\u003cframe\u003c\u003c\": TinyTIFF and libTIFF read different descriptions (TinyTIFF: '\"\u003c\u003ctinyTIFF_imagedesc\u003c\u003c\"' != libTIFF: '\"\u003c\u003clibtiff_imagedesc\u003c\u003c\"')\\n\";\r\n                                //ok=false;\r\n                                //break;\r\n                            }\r\n                            if (ok) {\r\n                                for (size_t sample=0; sample\u003clibTIFF_samplesperpixel; sample++) {\r\n                                    std::vector\u003cTIMAGESAMPLETYPE\u003e tinyTIFF_data(tinyTIFF_width*tinyTIFF_height*sizeof(TIMAGESAMPLETYPE)*2, 0);\r\n                                    TinyTIFFReader_getSampleData(tiffr,tinyTIFF_data.data(), sample);\r\n                                    if (TinyTIFFReader_wasError(tiffr)) {\r\n                                        TESTFAIL(\"TinyTIFF ERROR: reading frame \"\u003c\u003cframe\u003c\u003c\", sample \"\u003c\u003csample\u003c\u003c\":\"\u003c\u003cTinyTIFFReader_getLastError(tiffr)\u003c\u003c\"\", test_results.back())\r\n                                        ok=false;\r\n                                        break;\r\n                                    }\r\n                                    std::vector\u003cTIMAGESAMPLETYPE\u003e libTIFF_data(libTIFF_width*libTIFF_height*sizeof(TIMAGESAMPLETYPE)*2, 0);\r\n                                    if (!TIFFReadFrame(ltiff, libTIFF_data.data(), sample)) {\r\n                                        TESTFAIL(\"libTIFF ERROR: reading frame \"\u003c\u003cframe\u003c\u003c\", sample \"\u003c\u003csample\u003c\u003c\"\", test_results.back())\r\n                                        ok=false;\r\n                                        break;\r\n                                    }\r\n                                    for (size_t i=0; i\u003clibTIFF_data.size(); i++) {\r\n                                        if (i\u003c=8) std::cout\u003c\u003c\"          f\"\u003c\u003cframe\u003c\u003c\"s\"\u003c\u003csample\u003c\u003c\"i\"\u003c\u003ci\u003c\u003c\": tiny=\"\u003c\u003cstd::dec\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cTIMAGESAMPLETYPE\u003e::TPrint\u003e(tinyTIFF_data[i])\u003c\u003c\" lib=\"\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cTIMAGESAMPLETYPE\u003e::TPrint\u003e(libTIFF_data[i])\u003c\u003c\"\\n\";\r\n                                        if (libTIFF_data[i]!=tinyTIFF_data[i]) {\r\n                                            TESTFAIL(\"in frame \"\u003c\u003cframe\u003c\u003c\", sample \"\u003c\u003csample\u003c\u003c\": TinyTIFF and libTIFF read different sample values (I=\"\u003c\u003ci\u003c\u003c\": TinyTIFF: \"\u003c\u003cstd::dec\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cTIMAGESAMPLETYPE\u003e::TPrint\u003e(tinyTIFF_data[i])\u003c\u003c\" != libTIFF: \"\u003c\u003cstd::dec\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cTIMAGESAMPLETYPE\u003e::TPrint\u003e(libTIFF_data[i])\u003c\u003c\")\", test_results.back())\r\n                                            ok=false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    if (!ok) {\r\n                                        SAVE_TIFF(std::string(std::string(filename)+\".tinytiff.error_sample\"+std::to_string(sample)+\".tif\").c_str(), tinyTIFF_data.data(), tinyTIFF_width, tinyTIFF_height);\r\n                                        SAVE_TIFF(std::string(std::string(filename)+\".libtiff.error_sample\"+std::to_string(sample)+\".tif\").c_str(), libTIFF_data.data(), tinyTIFF_width, tinyTIFF_height);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n\r\n                            frame++;\r\n                        } while (ok \u0026\u0026 TIFFReadDirectory(ltiff) \u0026\u0026 TinyTIFFReader_readNext(tiffr));\r\n\r\n                        test_results.back().success=ok;\r\n                        test_results.back().numImages=frame;\r\n                        duration=timer.get_time();\r\n                        test_results.back().duration_ms=duration/1.0e3;\r\n                        std::cout\u003c\u003c\"    read and checked all \"\u003c\u003cframe\u003c\u003c\" frames: \"\u003c\u003c((ok)?std::string(\"SUCCESS\"):std::string(\"ERROR\"))\u003c\u003c\"     [duration: \"\u003c\u003cduration\u003c\u003c\" us  =  \"\u003c\u003cfloattounitstr(duration/1.0e6, \"s\")\u003c\u003c\" ]\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch(...) {\r\n        ok=false;\r\n        std::cout\u003c\u003c\"       CRASH While reading file\\n\";\r\n    }\r\n\r\n    test_results.back().success=ok;\r\n    if (ok) std::cout\u003c\u003c\"  =\u003e SUCCESS\\n\";\r\n    else std::cout\u003c\u003c\"  =\u003e NOT CORRECTLY READ\\n\";\r\n#endif\r\n}\r\n\r\n\r\n\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\nstatic void errorhandler(const char* module, const char* fmt, va_list ap)\r\n{\r\n    static std::array\u003cchar, 1024\u003e errorbuffer;\r\n    vsnprintf(errorbuffer.data(), errorbuffer.size(), fmt, ap);\r\n\r\n    std::cout\u003c\u003c\"###LIBTIFF-ERROR: \"\u003c\u003cmodule\u003c\u003c\": \"\u003c\u003cerrorbuffer.data()\u003c\u003c\"\\n\";\r\n}\r\nstatic void warninghandler(const char* module, const char* fmt, va_list ap)\r\n{\r\n    static std::array\u003cchar, 1024\u003e errorbuffer;\r\n    vsnprintf(errorbuffer.data(), errorbuffer.size(), fmt, ap);\r\n\r\n    std::cout\u003c\u003c\"###LIBTIFF-WARNING: \"\u003c\u003cmodule\u003c\u003c\": \"\u003c\u003cerrorbuffer.data()\u003c\u003c\"\\n\";\r\n}\r\n#endif\r\n\r\n\r\n\r\nint main(int argc, char *argv[]) {\r\n    int quicktest=TINYTIFF_FALSE;\r\n    if (argc\u003e1 \u0026\u0026 std::string(argv[1])==\"--simple\")  quicktest=TINYTIFF_TRUE;\r\n\r\n    std::cout\u003c\u003c\"tinytiffreader_test:\"\u003c\u003cstd::endl;\r\n    if (quicktest!=TINYTIFF_FALSE) std::cout\u003c\u003c\"  - quick test with --simple\"\u003c\u003cstd::endl;\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    std::cout\u003c\u003c\"  - checking against LibTIFF \"\u003c\u003cTIFFGetVersion()\u003c\u003cstd::endl;\r\n    TIFFSetErrorHandler(errorhandler);\r\n    TIFFSetWarningHandler(warninghandler);\r\n#endif\r\n    std::cout\u003c\u003c\"creating some test TIFF files ...\"\u003c\u003cstd::endl;\r\n\r\n    HighResTimer timer, timer1;\r\n\r\n    const size_t WIDTH=(quicktest!=TINYTIFF_FALSE)?32:513;\r\n    const size_t HEIGHT=(quicktest!=TINYTIFF_FALSE)?32:333;\r\n    const size_t PATTERNSIZE=12;\r\n    const size_t TEST_FRAMES=(quicktest!=TINYTIFF_FALSE)?6:100;\r\n\r\n\r\n    vector\u003cuint8_t\u003e image8(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint8_t\u003e image8i(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint16_t\u003e image16(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint16_t\u003e image16i(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint32_t\u003e image32(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint32_t\u003e image32i(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint64_t\u003e image64(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint64_t\u003e image64i(WIDTH*HEIGHT, 0);\r\n    vector\u003cfloat\u003e imagef(WIDTH*HEIGHT, 0);\r\n    vector\u003cfloat\u003e imagefi(WIDTH*HEIGHT, 0);\r\n    vector\u003cdouble\u003e imaged(WIDTH*HEIGHT, 0);\r\n    vector\u003cdouble\u003e imagedi(WIDTH*HEIGHT, 0);\r\n    vector\u003cuint8_t\u003e imagergb(WIDTH*HEIGHT*3, 0);\r\n    vector\u003cuint8_t\u003e imagergbi(WIDTH*HEIGHT*3, 0);\r\n\r\n    write1ChannelTestData(image8.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    write1ChannelTestData(image8i.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    invertTestImage(image8i.data(), WIDTH, HEIGHT);\r\n    write1ChannelTestData(image16.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    write1ChannelTestData(image16i.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    invertTestImage(image16i.data(), WIDTH, HEIGHT);\r\n    write1ChannelTestData(image32.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    write1ChannelTestData(image32i.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    invertTestImage(image32i.data(), WIDTH, HEIGHT);\r\n    write1ChannelTestData(image64.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    write1ChannelTestData(image64i.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    invertTestImage(image64i.data(), WIDTH, HEIGHT);\r\n    write1ChannelFloatTestData(imagef.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    write1ChannelFloatTestData(imagefi.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    invertFloatTestImage(imagefi.data(), WIDTH, HEIGHT);\r\n    write1ChannelFloatTestData(imaged.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    write1ChannelFloatTestData(imagedi.data(), WIDTH, HEIGHT, PATTERNSIZE);\r\n    invertFloatTestImage(imagedi.data(), WIDTH, HEIGHT);\r\n    writeRGBTestDataChunky(imagergb.data(), WIDTH, HEIGHT, PATTERNSIZE,3);\r\n    writeRGBTestDataChunky(imagergbi.data(), WIDTH, HEIGHT, PATTERNSIZE,3);\r\n    invertTestImage(imagergbi.data(), WIDTH, HEIGHT,3);\r\n\r\n    TinyTIFFWriterFile* tiff = TinyTIFFWriter_open(\"test8.tif\", 8, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImage(tiff, image8.data());\r\n    TinyTIFFWriter_close(tiff);\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    SAVE_TIFF_libtiff(\"test8_littleendian.tif\", image8.data(), WIDTH, HEIGHT, true);\r\n    SAVE_TIFF_libtiff(\"test8_bigendian.tif\", image8.data(), WIDTH, HEIGHT, false);\r\n#endif\r\n    tiff = TinyTIFFWriter_open(\"test8m.tif\", 8, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImage(tiff, image8.data());\r\n        TinyTIFFWriter_writeImage(tiff, image8i.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    tiff = TinyTIFFWriter_open(\"test16.tif\", 16, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImage(tiff, image16.data());\r\n    TinyTIFFWriter_close(tiff);\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    SAVE_TIFF_libtiff(\"test16_littleendian.tif\", image16.data(), WIDTH, HEIGHT, true);\r\n    SAVE_TIFF_libtiff(\"test16_bigendian.tif\", image16.data(), WIDTH, HEIGHT, false);\r\n#endif\r\n    tiff = TinyTIFFWriter_open(\"test16m.tif\", 16, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImage(tiff, image16.data());\r\n        TinyTIFFWriter_writeImage(tiff, image16i.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    tiff = TinyTIFFWriter_open(\"test32.tif\", 32, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImage(tiff, image32.data());\r\n    TinyTIFFWriter_close(tiff);\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    SAVE_TIFF_libtiff(\"test32_littleendian.tif\", image32.data(), WIDTH, HEIGHT, true);\r\n    SAVE_TIFF_libtiff(\"test32_bigendian.tif\", image32.data(), WIDTH, HEIGHT, false);\r\n#endif\r\n    tiff = TinyTIFFWriter_open(\"test32m.tif\", 32, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImage(tiff, image32.data());\r\n        TinyTIFFWriter_writeImage(tiff, image32i.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    tiff = TinyTIFFWriter_open(\"test64.tif\", 64, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImage(tiff, image64.data());\r\n    TinyTIFFWriter_close(tiff);\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    SAVE_TIFF_libtiff(\"test64_littleendian.tif\", image64.data(), WIDTH, HEIGHT, true);\r\n    SAVE_TIFF_libtiff(\"test64_bigendian.tif\", image64.data(), WIDTH, HEIGHT, false);\r\n#endif\r\n    tiff = TinyTIFFWriter_open(\"test64m.tif\", 64, TinyTIFFWriter_UInt, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImage(tiff, image64.data());\r\n        TinyTIFFWriter_writeImage(tiff, image64i.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    tiff = TinyTIFFWriter_open(\"testf.tif\", 32, TinyTIFFWriter_Float, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImage(tiff, imagef.data());\r\n    TinyTIFFWriter_close(tiff);\r\n    tiff = TinyTIFFWriter_open(\"testfm.tif\", 32, TinyTIFFWriter_Float, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImage(tiff, imagef.data());\r\n        TinyTIFFWriter_writeImage(tiff, imagefi.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    tiff = TinyTIFFWriter_open(\"testd.tif\", 64, TinyTIFFWriter_Float, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImage(tiff, imaged.data());\r\n    TinyTIFFWriter_close(tiff);\r\n    tiff = TinyTIFFWriter_open(\"testdm.tif\", 64, TinyTIFFWriter_Float, 1, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImage(tiff, imaged.data());\r\n        TinyTIFFWriter_writeImage(tiff, imagedi.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    tiff = TinyTIFFWriter_open(\"testrgb.tif\", 8, TinyTIFFWriter_UInt, 3, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    TinyTIFFWriter_writeImagePlanarReorder(tiff, imagergb.data());\r\n    TinyTIFFWriter_close(tiff);\r\n    tiff = TinyTIFFWriter_open(\"testrgbm.tif\", 8, TinyTIFFWriter_UInt, 3, WIDTH,HEIGHT, TinyTIFFWriter_AutodetectSampleInterpetation);\r\n    for (size_t i=0; i\u003cTEST_FRAMES/2; i++) {\r\n        TinyTIFFWriter_writeImagePlanarReorder(tiff, imagergb.data());\r\n        TinyTIFFWriter_writeImagePlanarReorder(tiff, imagergbi.data());\r\n    }\r\n    TinyTIFFWriter_close(tiff);\r\n\r\n    std::cout\u003c\u003c\" DONE!\\n\";\r\n\r\n    std::vector\u003cTestResult\u003e test_results;\r\n\r\n\r\n\r\n    TEST\u003cuint8_t\u003e(\"test8.tif\", image8.data(), image8i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint8_t\u003e(\"test8m.tif\", image8.data(), image8i.data(), WIDTH, HEIGHT, 1, TEST_FRAMES, test_results);\r\n    TEST\u003cuint16_t\u003e(\"test16.tif\", image16.data(), image16i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint16_t\u003e(\"test16m.tif\", image16.data(), image16i.data(), WIDTH, HEIGHT, 1, TEST_FRAMES, test_results);\r\n    TEST\u003cuint32_t\u003e(\"test32.tif\", image32.data(), image32i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint32_t\u003e(\"test32m.tif\", image32.data(), image32i.data(), WIDTH, HEIGHT, 1, TEST_FRAMES, test_results);\r\n    TEST\u003cuint64_t\u003e(\"test64.tif\", image64.data(), image64i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint64_t\u003e(\"test64m.tif\", image64.data(), image64i.data(), WIDTH, HEIGHT, 1, TEST_FRAMES, test_results);\r\n    TEST\u003cfloat\u003e(\"testf.tif\", imagef.data(), imagefi.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cfloat\u003e(\"testfm.tif\", imagef.data(), imagefi.data(), WIDTH, HEIGHT, 1, TEST_FRAMES, test_results);\r\n    TEST\u003cdouble\u003e(\"testd.tif\", imaged.data(), imagedi.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cdouble\u003e(\"testdm.tif\", imaged.data(), imagedi.data(), WIDTH, HEIGHT, 1, TEST_FRAMES, test_results);\r\n    TEST\u003cuint8_t\u003e(\"testrgb.tif\", imagergb.data(), imagergbi.data(), WIDTH, HEIGHT, 3, 1, test_results);\r\n    TEST\u003cuint8_t\u003e(\"testrgbm.tif\", imagergb.data(), imagergbi.data(), WIDTH, HEIGHT, 3, TEST_FRAMES, test_results);\r\n\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n\r\n    TEST\u003cuint8_t\u003e(\"test8_littleendian.tif\", image8.data(), image8i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint8_t\u003e(\"test8_bigendian.tif\", image8.data(), image8i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint16_t\u003e(\"test16_littleendian.tif\", image16.data(), image16i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint16_t\u003e(\"test16_bigendian.tif\", image16.data(), image16i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint32_t\u003e(\"test32_littleendian.tif\", image32.data(), image32i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint32_t\u003e(\"test32_bigendian.tif\", image32.data(), image32i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint64_t\u003e(\"test64_littleendian.tif\", image64.data(), image64i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n    TEST\u003cuint64_t\u003e(\"test64_bigendian.tif\", image64.data(), image64i.data(), WIDTH, HEIGHT, 1, 1, test_results);\r\n\r\n    //TEST_AGAINST_LIBTIFF\u003cuint16_t\u003e(\"2K_source_Stack.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint16_t\u003e(\"2K_tiff_image.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"cell.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"circuit.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"galaxy.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"mri.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"multi-channel-time-series.ome.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint16_t\u003e(\"test16m_imagej.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cfloat\u003e(\"imagej_32bit_ramp.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"imagej_32bit_ramp_tiled.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"circuit_nocompression.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"mri_nocompression.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"galaxy_nocompression.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"corel_photopaint_grey.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint16_t\u003e(\"corel_photopaint_grey16.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"corel_photopaint_greyalpha.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"corel_photopaint_rgb.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint16_t\u003e(\"corel_photopaint_rgb48.tif\",  test_results);\r\n    TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"corel_photopaint_rgba.tif\",  test_results);\r\n    //TEST_AGAINST_LIBTIFF\u003cuint8_t\u003e(\"gh19-id8.tif\",  test_results);\r\n#else\r\n    //TEST_SIMPLE\u003cuint16_t\u003e(\"2K_source_Stack.tif\",  test_results);\r\n    //TEST_SIMPLE\u003cuint16_t\u003e(\"2K_tiff_image.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"cell.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"circuit.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"galaxy.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"mri.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"multi-channel-time-series.ome.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint16_t\u003e(\"test16m_imagej.tif\",  test_results);\r\n    TEST_SIMPLE\u003cfloat\u003e(\"imagej_32bit_ramp.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"imagej_32bit_ramp_tiled.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"circuit_nocompression.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"mri_nocompression.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"galaxy_nocompression.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"corel_photopaint_grey.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint16_t\u003e(\"corel_photopaint_grey16.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"corel_photopaint_greyalpha.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"corel_photopaint_rgb.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint16_t\u003e(\"corel_photopaint_rgb48.tif\",  test_results);\r\n    TEST_SIMPLE\u003cuint8_t\u003e(\"corel_photopaint_rgba.tif\",  test_results);\r\n    //TEST_SIMPLE\u003cuint8_t\u003e(\"gh19-id8.tif\",  test_results);\r\n#endif\r\n\r\n    std::ostringstream testsum;\r\n    testsum\u003c\u003c\"\\n\\n\\n\\n\";\r\n    testsum\u003c\u003c\"tinytiffreader_test:\"\u003c\u003cstd::endl;\r\n    if (quicktest!=TINYTIFF_FALSE) testsum\u003c\u003c\"  - quick test with --simple\"\u003c\u003cstd::endl;\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    testsum\u003c\u003c\"  - checking against LibTIFF\"\u003c\u003cstd::endl;\r\n#endif\r\n    testsum\u003c\u003c\"  - TinyTIFFReader Version: \"\u003c\u003cTinyTIFFReader_getVersion()\u003c\u003c\"\\n  - TinyTIFFWriter Version: \"\u003c\u003cTinyTIFFWriter_getVersion()\u003c\u003c\"\\n\";\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    testsum\u003c\u003c\"  - libTIFF Version: \"\u003c\u003cTIFFGetVersion()\u003c\u003c\"\\n\";\r\n#endif\r\n    testsum\u003c\u003c\"\\n\"\u003c\u003cwriteTestSummary(test_results)\u003c\u003cstd::endl;\r\n    std::cout\u003c\u003ctestsum.str();\r\n    std::ofstream file(\"tintytiffreader_test_result.txt\", std::ofstream::out | std::ofstream::trunc);\r\n    file\u003c\u003ctestsum.str();\r\n    file.close();\r\n    writeJUnit(\"tintytiffreader_test_result.xml\", \"tinytiffreader_test\", test_results);\r\n    return 0;\r\n}\r\n",
        "name": "tinytiffreader_test.cpp",
        "path": "tests/tinytiffreader_test/tinytiffreader_test.cpp",
        "url": "/github.com/jkriege2/TinyTIFF/-/blob/tests/tinytiffreader_test/tinytiffreader_test.cpp"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 403,
          "offsetAndLengths": [
            [
              28,
              18
            ]
          ],
          "preview": "                            TIFFPrintDirectory(ltiff, stdout,TIFFPRINT_STRIPS|TIFFPRINT_COLORMAP);\r"
        }
      ],
      "repository": {
        "name": "github.com/jkriege2/TinyTIFF",
        "url": "/github.com/jkriege2/TinyTIFF"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "c879e6eeedc274706c6138f7823318df68147c1b"
        },
        "content": "#include \"tinytiffwriter.h\"\r\n#include \"tinytiffhighrestimer.h\"\r\n#include \"test_results.h\"\r\n#include \"testimage_tools.h\"\r\n#include \u003cfstream\u003e\r\n#include \u003cstring.h\u003e\r\n#include \u003carray\u003e\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n#include \u003ctiffio.h\u003e\r\n#include \"libtiff_tools.h\"\r\n#endif\r\n#include \"tinytiff_tools.hxx\"\r\n#include \u003csstream\u003e\r\n\r\n\r\nusing namespace std;\r\n\r\n#define TESTFAIL(msg, res) { std::stringstream str; str\u003c\u003cmsg; std::cout\u003c\u003cstr.str()\u003c\u003c\"\\n\"; res.success=false; res.message=str.str();}\r\n\r\n\r\ntemplate \u003cclass T\u003e\r\nbool libtiffTestRead(const char* filename, const T* writteneven, const T* writtenodd, uint32_t width, uint32_t height, uint16_t samples=1, uint32_t frames_expected=0, TinyTIFFSampleLayout inputOrg=TinyTIFF_Chunky, std::string* description_out=nullptr)  {\r\n    bool ok=true;\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    TIFF* tif = TIFFOpen(filename, \"r\");\r\n    T* data=(T*)malloc(width*height*sizeof(T));\r\n    if (tif) {\r\n        uint32_t frame=0;\r\n        do {\r\n            uint32_t nx,ny;\r\n            uint16_t ns,bs;\r\n            TIFFGetField(tif,TIFFTAG_IMAGEWIDTH,\u0026nx);\r\n            TIFFGetField(tif,TIFFTAG_IMAGELENGTH,\u0026ny);\r\n            TIFFGetField(tif,TIFFTAG_SAMPLESPERPIXEL,\u0026ns);\r\n            TIFFGetField(tif,TIFFTAG_BITSPERSAMPLE,\u0026bs);\r\n            char* val=NULL;\r\n            TIFFGetField(tif,TIFFTAG_IMAGEDESCRIPTION,\u0026val);\r\n            if (val) {\r\n                std::cout\u003c\u003c\"    ImageDescription(\"\u003c\u003cstrlen(val)\u003c\u003c\"):\\n\"\u003c\u003cval\u003c\u003c\"\\n\";\r\n                if (description_out) *description_out=val;\r\n            } else {\r\n                if (description_out) description_out-\u003eclear();\r\n            }\r\n            TIFFPrintDirectory(tif, stdout);\r\n            if (nx==width \u0026\u0026 ny==height \u0026\u0026 ns==samples \u0026\u0026 bs==sizeof(T)*8) {\r\n                size_t errcnt=0;\r\n                size_t pixcnt=0;\r\n                for (uint16_t samp=0; samp\u003csamples; samp++) {\r\n                    if (TIFFReadFrame(tif, data, samp)) {\r\n                        ok=true;\r\n                        const T* written=writteneven;\r\n                        if (writtenodd \u0026\u0026 frame%2==1) written=writtenodd;\r\n                        if (inputOrg==TinyTIFF_Chunky) {\r\n                            for (uint32_t i=0; i\u003cwidth*height; i++) {\r\n                                if (data[i]!=written[i*samples+samp]) {\r\n                                    ok=false;\r\n                                    errcnt++;\r\n                                    if (errcnt\u003c50) std::cout\u003c\u003c\" -- READ-ERROR: pixel-value differs in frame \"\u003c\u003cframe\u003c\u003c\" for pixel (\"\u003c\u003ci%width\u003c\u003c\",\"\u003c\u003ci/width\u003c\u003c\"): file: \"\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cT\u003e::TPrint\u003e(data[i])\u003c\u003c\" expected: \"\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cT\u003e::TPrint\u003e(written[i*samples+samp])\u003c\u003c\"\\n\";\r\n                                    if (errcnt==50) std::cout\u003c\u003c\" -- READ-ERROR: ...\\n\";\r\n                                } else {\r\n                                    pixcnt++;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            for (uint32_t i=0; i\u003cwidth*height; i++) {\r\n                                if (data[i]!=written[i+samp*width*height]) {\r\n                                    ok=false;\r\n                                    errcnt++;\r\n                                    if (errcnt\u003c50) std::cout\u003c\u003c\" -- READ-ERROR: pixel-value differs in frame \"\u003c\u003cframe\u003c\u003c\" for pixel (\"\u003c\u003ci%width\u003c\u003c\",\"\u003c\u003ci/width\u003c\u003c\"): file: \"\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cT\u003e::TPrint\u003e(data[i])\u003c\u003c\" expected: \"\u003c\u003cstatic_cast\u003ctypename atleast_int\u003cT\u003e::TPrint\u003e(written[i+samp*width*height])\u003c\u003c\"\\n\";\r\n                                    if (errcnt==50) std::cout\u003c\u003c\" -- READ-ERROR: ...\\n\";\r\n                                } else {\r\n                                    pixcnt++;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!ok) {\r\n                            std::cout\u003c\u003c\" -- TEST READ WITH LIBTIFF: READ WRONG DATA for \"\u003c\u003cerrcnt\u003c\u003c\" pixels in frame \"\u003c\u003cframe\u003c\u003c\"!!!\\n\";\r\n                        }\r\n                    } else {\r\n                        std::cout\u003c\u003c\" -- TEST READ WITH LIBTIFF: COULD NOT READ FRAME \"\u003c\u003cframe\u003c\u003c\"!\\n\";\r\n                        ok=false;\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    std::cout\u003c\u003c\" -- TEST READ WITH LIBTIFF: SUCCESS FOR FRAME \"\u003c\u003cframe\u003c\u003c\"! All \"\u003c\u003cpixcnt\u003c\u003c\" pixels\u0026samples as expected!\\n\";\r\n                }\r\n            } else {\r\n                std::cout\u003c\u003c\" -- TEST READ WITH LIBTIFF: FRAME SIZE OF FRAME \"\u003c\u003cframe\u003c\u003c\" DOES NOT MATCH (width: file:\"\u003c\u003cnx\u003c\u003c\"/expected:\"\u003c\u003cwidth\u003c\u003c\",   height: file:\"\u003c\u003cny\u003c\u003c\"/expected:\"\u003c\u003cheight\u003c\u003c\",   samples: file:\"\u003c\u003cns\u003c\u003c\"/expected:\"\u003c\u003csamples\u003c\u003c\",   bitspersample: file:\"\u003c\u003cbs\u003c\u003c\"/expected:\"\u003c\u003c(sizeof(T)*8)\u003c\u003c\")!\\n\";\r\n                ok=false;\r\n            }\r\n            frame++;\r\n        } while (ok \u0026\u0026 TIFFReadDirectory(tif));\r\n        if (frames_expected\u003e0 \u0026\u0026 frames_expected!=frame) {\r\n            std::cout\u003c\u003c\" -- ERROR IN TEST READ WITH LIBTIFF: number of frames (\"\u003c\u003cframe\u003c\u003c\")does not match expected number of frames (\"\u003c\u003cframes_expected\u003c\u003c\")\\n\";\r\n            ok=false;\r\n        }\r\n        TIFFClose(tif);\r\n    } else {\r\n        std::cout\u003c\u003c\" -- TEST READ WITH LIBTIFF: COULD NOT OPEN FILE!\\n\";\r\n        ok=false;\r\n    }\r\n    free(data);\r\n#endif\r\n    return ok;\r\n}\r\n\r\nenum class DescriptionMode {\r\n    None,\r\n    Text,\r\n    Metadata\r\n};\r\n\r\ntemplate \u003cclass T\u003e\r\nvoid performWriteTest(const std::string\u0026 name, const char* filename, const T* imagedata, size_t WIDTH, size_t HEIGHT, size_t SAMPLES, TinyTIFFWriterSampleInterpretation interpret, std::vector\u003cTestResult\u003e\u0026 test_results, TinyTIFFSampleLayout inputOrg=TinyTIFF_Chunky, TinyTIFFSampleLayout outputOrg=TinyTIFF_Chunky, DescriptionMode descMode=DescriptionMode::None) {\r\n    const size_t bits=sizeof(T)*8;\r\n    std::string desc=std::to_string(WIDTH)+\"x\"+std::to_string(HEIGHT)+\"pix/\"+std::to_string(bits)+\"bit/\"+std::to_string(SAMPLES)+\"ch/1frame\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_PLANAR\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_PLANAR\";\r\n    test_results.emplace_back();\r\n    test_results.back().name=name+\" [\"+desc+\", \"+std::string(filename)+\"]\";\r\n    test_results.back().success=true;\r\n    std::cout\u003c\u003c\"\\n\\n*****************************************************************************\\n\";\r\n    std::cout\u003c\u003c\"* \"\u003c\u003ctest_results.back().name\u003c\u003c\"\\n\";\r\n    HighResTimer timer;\r\n    timer.start();\r\n    TinyTIFFWriterFile* tiff = TinyTIFFWriter_open(filename, bits, TinyTIFF_SampleFormatFromType\u003cT\u003e().format, SAMPLES, WIDTH,HEIGHT, interpret);\r\n    if (tiff) {\r\n        int res;\r\n        res=TinyTIFFWriter_writeImageMultiSample(tiff, imagedata, inputOrg, outputOrg);\r\n        if (res!=TINYTIFF_TRUE) {\r\n            test_results.back().success=false;\r\n            TESTFAIL(\"error writing image data into '\"\u003c\u003cfilename\u003c\u003c\"'! MESSAGE: \"\u003c\u003cTinyTIFFWriter_getLastError(tiff)\u003c\u003c\"\", test_results.back())\r\n        }\r\n        if (descMode==DescriptionMode::None) TinyTIFFWriter_close(tiff);\r\n        else if (descMode==DescriptionMode::Text) TinyTIFFWriter_close_withdescription(tiff, \"Test Description for TIFF\");\r\n        else if (descMode==DescriptionMode::Metadata) TinyTIFFWriter_close_withmetadatadescription(tiff, 1.234, 2.345, 10, 0.1);\r\n        test_results.back().duration_ms=timer.get_time()/1e3;\r\n        test_results.back().numImages=1;\r\n        std::string description_out;\r\n        if ((get_filesize(filename)\u003c=0)) {\r\n            test_results.back().success=false;\r\n            TESTFAIL(\"file '\"\u003c\u003cfilename\u003c\u003c\"' has no contents!\", test_results.back())\r\n        } else {\r\n            if (!libtiffTestRead\u003cT\u003e(filename, imagedata, nullptr, WIDTH, HEIGHT, SAMPLES, 1, inputOrg, \u0026description_out)) {\r\n                test_results.back().success=false;\r\n                TESTFAIL(\"reading '\"\u003c\u003cfilename\u003c\u003c\"' with libTIFF failed!\", test_results.back())\r\n            } else {\r\n                if (descMode==DescriptionMode::Text \u0026\u0026 description_out.find(\"Test Description for TIFF\")==std::string::npos) {\r\n                    test_results.back().success=false;\r\n                    TESTFAIL(\"reading '\"\u003c\u003cfilename\u003c\u003c\"' with libTIFF failed to read correct description!\", test_results.back())\r\n                } else  if (descMode==DescriptionMode::Metadata \u0026\u0026 description_out.find(\"pixel_width\")==std::string::npos) {\r\n                    test_results.back().success=false;\r\n                    TESTFAIL(\"reading '\"\u003c\u003cfilename\u003c\u003c\"' with libTIFF failed to read correct metadata description!\", test_results.back())\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        TESTFAIL(\"could not open '\"\u003c\u003cfilename\u003c\u003c\"' for writing!\", test_results.back())\r\n        test_results.back().success=false;\r\n    }\r\n    if (test_results.back().success) {\r\n        std::cout\u003c\u003c\"* ==\u003e SUCCESSFUL,   duration=\"\u003c\u003ctest_results.back().duration_ms\u003c\u003c\"ms\\n\";\r\n    } else {\r\n        std::cout\u003c\u003c\"* ==\u003e FAILED\\n\";\r\n    }\r\n}\r\n\r\ntemplate \u003cclass T\u003e\r\nvoid performWriteTest_ExpectedToFail(const std::string\u0026 name, const char* filename, const T* imagedata, size_t WIDTH, size_t HEIGHT, size_t SAMPLES, TinyTIFFWriterSampleInterpretation interpret, std::vector\u003cTestResult\u003e\u0026 test_results, TinyTIFFSampleLayout inputOrg=TinyTIFF_Chunky, TinyTIFFSampleLayout outputOrg=TinyTIFF_Chunky) {\r\n    const size_t bits=sizeof(T)*8;\r\n    std::string desc=std::to_string(WIDTH)+\"x\"+std::to_string(HEIGHT)+\"pix/\"+std::to_string(bits)+\"bit/\"+std::to_string(SAMPLES)+\"ch/1frame\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_PLANAR\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_PLANAR\";\r\n    test_results.emplace_back();\r\n    test_results.back().name=name+\" [\"+desc+\", \"+std::string(filename)+\"]\";\r\n    test_results.back().success=true;\r\n    std::cout\u003c\u003c\"\\n\\n*****************************************************************************\\n\";\r\n    std::cout\u003c\u003c\"* \"\u003c\u003ctest_results.back().name\u003c\u003c\"\\n\";\r\n    HighResTimer timer;\r\n    timer.start();\r\n    TinyTIFFWriterFile* tiff = TinyTIFFWriter_open(filename, bits, TinyTIFF_SampleFormatFromType\u003cT\u003e().format, SAMPLES, WIDTH,HEIGHT, interpret);\r\n    if (tiff) {\r\n        int res;\r\n        res=TinyTIFFWriter_writeImageMultiSample(tiff, imagedata, inputOrg, outputOrg);\r\n        if (res!=TINYTIFF_FALSE) {\r\n            test_results.back().success=false;\r\n            TESTFAIL(\"could not prevent writing image data into '\"\u003c\u003cfilename\u003c\u003c\"'!\", test_results.back())\r\n        } else {\r\n            std::cout\u003c\u003c\"  --\u003e WRITING GENERATED ERROR MESSAGE:\"\u003c\u003cTinyTIFFWriter_getLastError(tiff)\u003c\u003c\"\\n\";\r\n        }\r\n        TinyTIFFWriter_close(tiff);\r\n        test_results.back().duration_ms=timer.get_time()/1e3;\r\n        test_results.back().numImages=1;\r\n        std::string description_out;\r\n    } else {\r\n        TESTFAIL(\"could not open '\"\u003c\u003cfilename\u003c\u003c\"' for writing!\", test_results.back())\r\n        test_results.back().success=false;\r\n    }\r\n    if (test_results.back().success) {\r\n        std::cout\u003c\u003c\"* ==\u003e SUCCESSFUL,   duration=\"\u003c\u003ctest_results.back().duration_ms\u003c\u003c\"ms\\n\";\r\n    } else {\r\n        std::cout\u003c\u003c\"* ==\u003e FAILED\\n\";\r\n    }\r\n}\r\n\r\n\r\ntemplate \u003cclass T\u003e\r\nvoid performMultiFrameWriteTest_ExpectedToFail(const std::string\u0026 name, const char* filename, const T* imagedata, const T* imagedatai, size_t WIDTH, size_t HEIGHT, size_t SAMPLES, size_t FRAMES, TinyTIFFWriterSampleInterpretation interpret, std::vector\u003cTestResult\u003e\u0026 test_results, TinyTIFFSampleLayout inputOrg=TinyTIFF_Chunky, TinyTIFFSampleLayout outputOrg=TinyTIFF_Chunky) {\r\n    const size_t bits=sizeof(T)*8;\r\n    std::string desc=std::to_string(WIDTH)+\"x\"+std::to_string(HEIGHT)+\"pix/\"+std::to_string(bits)+\"bit/\"+std::to_string(SAMPLES)+\"ch/1frame\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_PLANAR\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_PLANAR\";\r\n    test_results.emplace_back();\r\n    test_results.back().name=name+\" [\"+desc+\", \"+std::string(filename)+\"]\";\r\n    test_results.back().success=true;\r\n    std::cout\u003c\u003c\"\\n\\n*****************************************************************************\\n\";\r\n    std::cout\u003c\u003c\"* \"\u003c\u003ctest_results.back().name\u003c\u003c\"\\n\";\r\n    HighResTimer timer;\r\n    timer.start();\r\n    TinyTIFFWriterFile* tiff = TinyTIFFWriter_open(filename, bits, TinyTIFF_SampleFormatFromType\u003cT\u003e().format, SAMPLES, WIDTH,HEIGHT, interpret);\r\n    if (tiff) {\r\n        int res;\r\n        size_t f=0;\r\n        for (; f\u003cFRAMES; f++) {\r\n            if (f%2==0) res=TinyTIFFWriter_writeImageMultiSample(tiff, imagedata, inputOrg, outputOrg);\r\n            else res=TinyTIFFWriter_writeImageMultiSample(tiff, imagedatai, inputOrg, outputOrg);\r\n            if (res!=TINYTIFF_TRUE) {\r\n                break;\r\n            }\r\n        }\r\n        if (res!=TINYTIFF_FALSE) {\r\n            test_results.back().success=false;\r\n            TESTFAIL(\"could not prevent writing image data into '\"\u003c\u003cfilename\u003c\u003c\"'!\", test_results.back())\r\n        } else {\r\n            std::cout\u003c\u003c\"  --\u003e WRITING GENERATED ERROR MESSAGE for frame \"\u003c\u003c(f+1)\u003c\u003c\"/\"\u003c\u003cFRAMES\u003c\u003c\":\"\u003c\u003cTinyTIFFWriter_getLastError(tiff)\u003c\u003c\"\\n\";\r\n        }\r\n        TinyTIFFWriter_close(tiff);\r\n        test_results.back().duration_ms=timer.get_time()/1e3;\r\n        test_results.back().numImages=1;\r\n        std::string description_out;\r\n    } else {\r\n        TESTFAIL(\"could not open '\"\u003c\u003cfilename\u003c\u003c\"' for writing!\", test_results.back())\r\n        test_results.back().success=false;\r\n    }\r\n    if (test_results.back().success) {\r\n        std::cout\u003c\u003c\"* ==\u003e SUCCESSFUL,   duration=\"\u003c\u003ctest_results.back().duration_ms\u003c\u003c\"ms\\n\";\r\n    } else {\r\n        std::cout\u003c\u003c\"* ==\u003e FAILED\\n\";\r\n    }\r\n}\r\n\r\ntemplate \u003cclass T\u003e\r\nvoid performMultiFrameWriteTest(const std::string\u0026 name, const char* filename, const T* imagedata, const T* imagedatai, size_t WIDTH, size_t HEIGHT, size_t SAMPLES, size_t FRAMES, TinyTIFFWriterSampleInterpretation interpret, std::vector\u003cTestResult\u003e\u0026 test_results, TinyTIFFSampleLayout inputOrg=TinyTIFF_Chunky, TinyTIFFSampleLayout outputOrg=TinyTIFF_Chunky) {\r\n    const size_t bits=sizeof(T)*8;\r\n    std::string desc=std::to_string(WIDTH)+\"x\"+std::to_string(HEIGHT)+\"pix/\"+std::to_string(bits)+\"bit/\"+std::to_string(SAMPLES)+\"ch/\"+std::to_string(FRAMES)+\"frames\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Chunky \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_CHUNKY\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Chunky) desc+=\"/CHUNKY_FROM_PLANAR\";\r\n    if (inputOrg==TinyTIFF_Planar \u0026\u0026 outputOrg==TinyTIFF_Planar) desc+=\"/PLANAR_FROM_PLANAR\";\r\n    test_results.emplace_back();\r\n    test_results.back().name=name+\" [\"+desc+\", \"+std::string(filename)+\"]\";\r\n    test_results.back().success=true;\r\n    std::cout\u003c\u003c\"\\n\\n*****************************************************************************\\n\";\r\n    std::cout\u003c\u003c\"* \"\u003c\u003ctest_results.back().name\u003c\u003c\"\\n\";\r\n    HighResTimer timer;\r\n    timer.start();\r\n    TinyTIFFWriterFile* tiff = TinyTIFFWriter_open(filename, bits, TinyTIFF_SampleFormatFromType\u003cT\u003e().format, SAMPLES, WIDTH,HEIGHT, interpret);\r\n    if (tiff) {\r\n        for (size_t f=0; f\u003cFRAMES; f++) {\r\n            int res;\r\n            if (f%2==0) res=TinyTIFFWriter_writeImageMultiSample(tiff, imagedata, inputOrg, outputOrg);\r\n            else res=TinyTIFFWriter_writeImageMultiSample(tiff, imagedatai, inputOrg, outputOrg);\r\n            if (res!=TINYTIFF_TRUE) {\r\n                test_results.back().success=false;\r\n                TESTFAIL(\"error writing image data into '\"\u003c\u003cfilename\u003c\u003c\"'! MESSAGE: \"\u003c\u003cTinyTIFFWriter_getLastError(tiff)\u003c\u003c\"\", test_results.back())\r\n            }\r\n\r\n        }\r\n        TinyTIFFWriter_close(tiff);\r\n        test_results.back().duration_ms=timer.get_time()/1e3;\r\n        test_results.back().numImages=FRAMES;\r\n        if ((get_filesize(filename)\u003c=0)) {\r\n            test_results.back().success=false;\r\n            TESTFAIL(\"file '\"\u003c\u003cfilename\u003c\u003c\"' has no contents!\", test_results.back())\r\n        } else if (!libtiffTestRead\u003cT\u003e(filename, imagedata, imagedatai, WIDTH, HEIGHT, SAMPLES, FRAMES, inputOrg)) {\r\n            test_results.back().success=false;\r\n            TESTFAIL(\"reading '\"\u003c\u003cfilename\u003c\u003c\"' with libTIFF failes!\", test_results.back())\r\n        }\r\n    } else {\r\n        TESTFAIL(\"could not open '\"\u003c\u003cfilename\u003c\u003c\"' for writing!\", test_results.back())\r\n        test_results.back().success=false;\r\n    }\r\n    if (test_results.back().success) {\r\n        std::cout\u003c\u003c\"* ==\u003e SUCCESSFUL,   duration=\"\u003c\u003ctest_results.back().duration_ms\u003c\u003c\"ms\\n\";\r\n    } else {\r\n        std::cout\u003c\u003c\"* ==\u003e FAILED\\n\";\r\n    }\r\n}\r\n\r\n\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\nstatic void errorhandler(const char* module, const char* fmt, va_list ap)\r\n{\r\n    static std::array\u003cchar, 1024\u003e errorbuffer;\r\n    vsnprintf(errorbuffer.data(), errorbuffer.size(), fmt, ap);\r\n\r\n    std::cout\u003c\u003c\"###LIBTIFF-ERROR: \"\u003c\u003cmodule\u003c\u003c\": \"\u003c\u003cerrorbuffer.data()\u003c\u003c\"\\n\";\r\n}\r\nstatic void warninghandler(const char* module, const char* fmt, va_list ap)\r\n{\r\n    static std::array\u003cchar, 1024\u003e errorbuffer;\r\n    vsnprintf(errorbuffer.data(), errorbuffer.size(), fmt, ap);\r\n\r\n    std::cout\u003c\u003c\"###LIBTIFF-WARNING: \"\u003c\u003cmodule\u003c\u003c\": \"\u003c\u003cerrorbuffer.data()\u003c\u003c\"\\n\";\r\n}\r\n#endif\r\n\r\nint main(int argc, char *argv[]) {\r\n    int quicktest=TINYTIFF_FALSE;\r\n    if (argc\u003e1 \u0026\u0026 std::string(argv[1])==\"--simple\")  quicktest=TINYTIFF_TRUE;\r\n\r\n    std::cout\u003c\u003c\"tinytiffwriter_test:\"\u003c\u003cstd::endl;\r\n    if (quicktest!=TINYTIFF_FALSE) std::cout\u003c\u003c\"  - quick test with --simple\"\u003c\u003cstd::endl;\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    std::cout\u003c\u003c\"  - cheching against LibTIFF \"\u003c\u003cTIFFGetVersion()\u003c\u003cstd::endl;\r\n    TIFFSetErrorHandler(errorhandler);\r\n    TIFFSetWarningHandler(warninghandler);\r\n#endif\r\n    std::vector\u003cTestResult\u003e test_results;\r\n\r\n    const size_t WIDTH = (quicktest!=TINYTIFF_FALSE)?32:500;\r\n    const size_t HEIGHT = (quicktest!=TINYTIFF_FALSE)?32:432;\r\n    const size_t NUMFRAMES = (quicktest!=TINYTIFF_FALSE)?6:100;\r\n    const size_t PATTERNSIZE = 12;\r\n\r\n\r\n    std::vector\u003cuint8_t\u003e image8(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint8_t\u003e image8i(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint16_t\u003e image16(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint16_t\u003e image16i(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint32_t\u003e image32(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint32_t\u003e image32i(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint64_t\u003e image64(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint64_t\u003e image64i(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cfloat\u003e imagef(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cfloat\u003e imagefi(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cdouble\u003e imaged(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cdouble\u003e imagedi(WIDTH*HEIGHT, 0);\r\n    std::vector\u003cuint8_t\u003e imagergb(WIDTH*HEIGHT*3, 0);\r\n    std::vector\u003cuint8_t\u003e imagergbi(WIDTH*HEIGHT*3, 0);\r\n    std::vector\u003cuint8_t\u003e imagergba(WIDTH*HEIGHT*4, 0);\r\n    std::vector\u003cuint8_t\u003e imagergbai(WIDTH*HEIGHT*4, 0);\r\n    std::vector\u003cuint8_t\u003e greyalpha(WIDTH*HEIGHT*2, 0);\r\n    std::vector\u003cuint8_t\u003e greyalphai(WIDTH*HEIGHT*2, 0);\r\n    std::vector\u003cuint8_t\u003e imagergbplan(WIDTH*HEIGHT*3, 0);\r\n    std::vector\u003cuint8_t\u003e imagergbplani(WIDTH*HEIGHT*3, 0);\r\n\r\n\r\n    write1ChannelTestData(image8.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    write1ChannelTestData(image8i.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    invertTestImage(image8i.data(), WIDTH, HEIGHT, 1);\r\n    write1ChannelTestData(image16.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    write1ChannelTestData(image16i.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    invertTestImage(image16i.data(), WIDTH, HEIGHT, 1);\r\n    write1ChannelTestData(image32.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    write1ChannelTestData(image32i.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    invertTestImage(image32i.data(), WIDTH, HEIGHT, 1);\r\n    write1ChannelTestData(image64.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    write1ChannelTestData(image64i.data(), WIDTH, HEIGHT, PATTERNSIZE, 1);\r\n    invertTestImage(image64i.data(), WIDTH, HEIGHT, 1);\r\n    write1ChannelFloatTestData\u003cfloat\u003e(imagef.data(), WIDTH, HEIGHT, PATTERNSIZE, 1, 1.0);\r\n    write1ChannelFloatTestData\u003cfloat\u003e(imagefi.data(), WIDTH, HEIGHT, PATTERNSIZE, 1, 1.0);\r\n    invertFloatTestImage\u003cfloat\u003e(imagefi.data(), WIDTH, HEIGHT, 1, 1.0);\r\n    write1ChannelFloatTestData\u003cdouble\u003e(imaged.data(), WIDTH, HEIGHT, PATTERNSIZE, 1, 1.0);\r\n    write1ChannelFloatTestData\u003cdouble\u003e(imagedi.data(), WIDTH, HEIGHT, PATTERNSIZE, 1, 1.0);\r\n    invertFloatTestImage\u003cdouble\u003e(imagedi.data(), WIDTH, HEIGHT, 1, 1.0);\r\n    writeRGBTestDataChunky(imagergb.data(), WIDTH, HEIGHT, PATTERNSIZE,3);\r\n    writeRGBTestDataChunky(imagergbi.data(), WIDTH, HEIGHT, PATTERNSIZE,3);\r\n    invertTestImage(imagergbi.data(), WIDTH, HEIGHT,3);\r\n    writeRGBTestDataPlanar(imagergbplan.data(), WIDTH, HEIGHT, PATTERNSIZE,3);\r\n    writeRGBTestDataPlanar(imagergbplani.data(), WIDTH, HEIGHT, PATTERNSIZE,3);\r\n    invertTestImage(imagergbplani.data(), WIDTH, HEIGHT,3);\r\n    writeRGBTestDataChunky(imagergba.data(), WIDTH, HEIGHT, PATTERNSIZE,4);\r\n    writeALPHATestData(imagergba.data(), 3, WIDTH, HEIGHT, 4);\r\n    writeRGBTestDataChunky(imagergbai.data(), WIDTH, HEIGHT, PATTERNSIZE,4);\r\n    writeALPHATestData(imagergbai.data(), 3, WIDTH, HEIGHT, 4);\r\n    invertTestImage(imagergbai.data(), WIDTH, HEIGHT,4);\r\n    write1ChannelTestData(greyalpha.data(), WIDTH, HEIGHT, PATTERNSIZE, 2);\r\n    writeALPHATestData(greyalpha.data(), 1, WIDTH, HEIGHT, 2);\r\n    write1ChannelTestData(greyalphai.data(), WIDTH, HEIGHT, PATTERNSIZE, 2);\r\n    writeALPHATestData(greyalphai.data(), 1, WIDTH, HEIGHT, 2);\r\n    invertTestImage(greyalphai.data(), WIDTH, HEIGHT, 2);\r\n\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT GREY TIFF\", \"test8.tif\", image8.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    performWriteTest(\"WRITING 8-Bit UINT GREY TIFF with description\", \"test8_msg.tif\", image8.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results, TinyTIFF_Chunky, TinyTIFF_Chunky, DescriptionMode::Text);\r\n    performWriteTest(\"WRITING 8-Bit UINT GREY TIFF with metadata description\", \"test8_metadata.tif\", image8.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results, TinyTIFF_Chunky, TinyTIFF_Chunky, DescriptionMode::Metadata);\r\n    performWriteTest(\"WRITING 8-Bit UINT GREY TIFF\", \"test8.tif\", image8.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT GREY TIFF\", \"test8m.tif\", image8.data(), image8i.data(), WIDTH, HEIGHT, 1, NUMFRAMES, TinyTIFFWriter_Greyscale, test_results);\r\n\r\n    performWriteTest(\"WRITING 16-Bit UINT GREY TIFF\", \"test16.tif\", image16.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 16-Bit UINT GREY TIFF\", \"test16m.tif\", image16.data(), image16i.data(), WIDTH, HEIGHT, 1, NUMFRAMES, TinyTIFFWriter_Greyscale, test_results);\r\n\r\n    performWriteTest(\"WRITING 32-Bit UINT GREY TIFF\", \"test32.tif\", image32.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 32-Bit UINT GREY TIFF\", \"test32m.tif\", image32.data(), image32i.data(), WIDTH, HEIGHT, 1, NUMFRAMES, TinyTIFFWriter_Greyscale, test_results);\r\n\r\n    performWriteTest(\"WRITING 64-Bit UINT GREY TIFF\", \"test64.tif\", image64.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 64-Bit UINT GREY TIFF\", \"test64m.tif\", image64.data(), image64i.data(), WIDTH, HEIGHT, 1, NUMFRAMES, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) {\r\n        const size_t WIDTH_too_many=8000;\r\n        const size_t HEIGHT_too_many=4000;\r\n        const std::vector\u003cuint64_t\u003e image64_too_many(WIDTH_too_many*HEIGHT_too_many, 0);\r\n        const size_t too_many_frames=((size_t)0xFFFFFFFF)/((size_t)(WIDTH_too_many*HEIGHT_too_many*sizeof(uint64_t)))*8;\r\n        performMultiFrameWriteTest_ExpectedToFail(\"WRITING TOO MANY 64-Bit UINT GREY TIFF\", \"test64m_toomany.tif\", image64_too_many.data(), image64_too_many.data(), WIDTH_too_many, HEIGHT_too_many, 1, too_many_frames, TinyTIFFWriter_Greyscale, test_results);\r\n    }\r\n\r\n    performWriteTest(\"WRITING 32-Bit FLOAT GREY TIFF\", \"testf.tif\", imagef.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 32-Bit FLOAT GREY TIFF\", \"testfm.tif\", imagef.data(), imagefi.data(), WIDTH, HEIGHT, 1, NUMFRAMES, TinyTIFFWriter_Greyscale, test_results);\r\n\r\n    performWriteTest(\"WRITING 64-Bit FLOAT GREY TIFF\", \"testd.tif\", imaged.data(), WIDTH, HEIGHT, 1, TinyTIFFWriter_Greyscale, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 64-Bit FLOAT GREY TIFF\", \"testdm.tif\", imaged.data(), imagedi.data(), WIDTH, HEIGHT, 1, NUMFRAMES, TinyTIFFWriter_Greyscale, test_results);\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgb.tif\", imagergb.data(), WIDTH, HEIGHT, 3, TinyTIFFWriter_RGB, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgbm.tif\", imagergb.data(), imagergbi.data(), WIDTH, HEIGHT, 3, NUMFRAMES, TinyTIFFWriter_RGB, test_results);\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgb_chunkplan.tif\", imagergb.data(), WIDTH, HEIGHT, 3, TinyTIFFWriter_RGB, test_results, TinyTIFF_Chunky, TinyTIFF_Planar);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgbm_chunkplan.tif\", imagergb.data(), imagergbi.data(), WIDTH, HEIGHT, 3, NUMFRAMES, TinyTIFFWriter_RGB, test_results, TinyTIFF_Chunky, TinyTIFF_Planar);\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgb_planchunk.tif\", imagergbplan.data(), WIDTH, HEIGHT, 3, TinyTIFFWriter_RGB, test_results, TinyTIFF_Planar, TinyTIFF_Chunky);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgbm_planchunk.tif\", imagergbplan.data(), imagergbplani.data(), WIDTH, HEIGHT, 3, NUMFRAMES, TinyTIFFWriter_RGB, test_results, TinyTIFF_Planar, TinyTIFF_Chunky);\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgb_planplan.tif\", imagergbplan.data(), WIDTH, HEIGHT, 3, TinyTIFFWriter_RGB, test_results, TinyTIFF_Planar, TinyTIFF_Planar);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT RGB TIFF\", \"testrgbm_planplan.tif\", imagergbplan.data(), imagergbplani.data(), WIDTH, HEIGHT, 3, NUMFRAMES, TinyTIFFWriter_RGB, test_results, TinyTIFF_Planar, TinyTIFF_Planar);\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT RGBA TIFF\", \"testrgba.tif\", imagergba.data(), WIDTH, HEIGHT, 4, TinyTIFFWriter_RGBA, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT RGBA TIFF\", \"testrgbam.tif\", imagergba.data(), imagergbai.data(), WIDTH, HEIGHT, 4, NUMFRAMES, TinyTIFFWriter_RGBA, test_results);\r\n\r\n    performWriteTest(\"WRITING 8-Bit UINT GREY+ALPHA  TIFF\", \"test_ga.tif\", greyalpha.data(), WIDTH, HEIGHT, 2, TinyTIFFWriter_GreyscaleAndAlpha, test_results);\r\n    if (quicktest==TINYTIFF_FALSE) performMultiFrameWriteTest(\"WRITING 8-Bit UINT GREY+ALPHA TIFF\", \"test_gam.tif\", greyalpha.data(), greyalphai.data(), WIDTH, HEIGHT, 2, NUMFRAMES, TinyTIFFWriter_GreyscaleAndAlpha, test_results);\r\n\r\n\r\n\r\n    std::ostringstream testsum;\r\n    testsum\u003c\u003c\"\\n\\n\\n\\n\";\r\n    testsum\u003c\u003c\"tinytiffwriter_test:\"\u003c\u003cstd::endl;\r\n    if (quicktest!=TINYTIFF_FALSE) testsum\u003c\u003c\"  - quick test with --simple\"\u003c\u003cstd::endl;\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    testsum\u003c\u003c\"  - cheching against LibTIFF\"\u003c\u003cstd::endl;\r\n#endif\r\n    testsum\u003c\u003c\"  - TinyTIFFReader Version: \"\u003c\u003cTinyTIFFReader_getVersion()\u003c\u003c\"\\n  - TinyTIFFWriter Version: \"\u003c\u003cTinyTIFFWriter_getVersion()\u003c\u003c\"\\n\";\r\n#ifdef TINYTIFF_TEST_LIBTIFF\r\n    testsum\u003c\u003c\"  - libTIFF Version: \"\u003c\u003cTIFFGetVersion()\u003c\u003c\"\\n\";\r\n#endif\r\n    testsum\u003c\u003c\"\\n\"\u003c\u003cwriteTestSummary(test_results)\u003c\u003cstd::endl;\r\n    std::cout\u003c\u003ctestsum.str();\r\n    std::ofstream file(\"tintytiffwriter_test_result.txt\", std::ofstream::out | std::ofstream::trunc);\r\n    file\u003c\u003ctestsum.str();\r\n    file.close();\r\n\r\n    writeJUnit(\"tintytiffwriter_test_result.xml\", \"tinytiffwriter_test\", test_results);\r\n\r\n    return 0;\r\n}\r\n",
        "name": "tinytiffwriter_test.cpp",
        "path": "tests/tinytiffwriter_test/tinytiffwriter_test.cpp",
        "url": "/github.com/jkriege2/TinyTIFF/-/blob/tests/tinytiffwriter_test/tinytiffwriter_test.cpp"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 43,
          "offsetAndLengths": [
            [
              12,
              18
            ]
          ],
          "preview": "            TIFFPrintDirectory(tif, stdout);\r"
        }
      ],
      "repository": {
        "name": "github.com/jkriege2/TinyTIFF",
        "url": "/github.com/jkriege2/TinyTIFF"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "78c8b4d634f1379eb3e33642716717f53bf7e1ad"
        },
        "content": "#include \u003ciostream\u003e\t// std::cout\n#include \u003climits\u003e\t// std::numeric_limits\n#include \u003csstream\u003e\t// std::ostringstream\n#include \u003ciomanip\u003e\t// std::setw(-)\n#include \"image_tif_read_handle.h\"\n#include \"image_tif_read_handle_info.h\"\n\nnamespace image {\nnamespace tif {\n\nstd::string get_info(\n\t  const std::string\u0026 name\n\t, const std::string\u0026 file_path\n) {\n\tstd::ostringstream os; \n\tbool isexist = false;\n\n\t os \u003c\u003c name \u003c\u003c '\\n';\n\n\timage::tif::read_handle handler(file_path);\n\n\t os \u003c\u003c \" Byte Order : \";\n\tunion { unsigned short us; unsigned char uc[2]; } order_box;\n\torder_box.us = 1;\n\tconst bool cpu_is_little_endian = (1==order_box.uc[0])?true:false;\n\tconst bool byte_swap_sw = (TIFFIsByteSwapped(handler))?true:false;\n\tif (( (!cpu_is_little_endian) == (!byte_swap_sw) ) ||\n\t    (   cpu_is_little_endian  ==   byte_swap_sw   )) {\n\t     /*\tCPUがbig    endian(false)でbyte swapしてない(false)か、\n\t\tCPUがlittle endian(true )でbyte swapした(true) */\n\t os \u003c\u003c \"Big Endian\";\n\t} else {\n\t os \u003c\u003c \"Little Endian\";\n\t}\n\t os \u003c\u003c \"\\n\";\n\n\t os \u003c\u003c \" Compression : \";\n\tconst unsigned int u_compre = handler.compression(isexist);\n\tswitch (u_compre) {\n\tcase COMPRESSION_NONE:\t\tos \u003c\u003c \"NONE\"; break;\n\tcase COMPRESSION_CCITTRLE:\tos \u003c\u003c \"CCITTRLE\"; break;\n\tcase COMPRESSION_CCITTFAX3:\tos \u003c\u003c \"CCITTFAX3\"; break;\n\tcase COMPRESSION_CCITTFAX4:\tos \u003c\u003c \"CCITTFAX4\"; break;\n\tcase COMPRESSION_LZW:\t\tos \u003c\u003c \"LZW\"; break;\n\tcase COMPRESSION_OJPEG:\t\tos \u003c\u003c \"OJPEG\"; break;\n\tcase COMPRESSION_JPEG:\t\tos \u003c\u003c \"JPEG\"; break;\n\tcase COMPRESSION_NEXT:\t\tos \u003c\u003c \"NEXT\"; break;\n\tcase COMPRESSION_CCITTRLEW:\tos \u003c\u003c \"CCITTRLEW\"; break;\n\tcase COMPRESSION_PACKBITS:\tos \u003c\u003c \"PACKBITS\"; break;\n\tcase COMPRESSION_THUNDERSCAN:\tos \u003c\u003c \"THUNDERSCAN\"; break;\n\t/* codes 32895-32898 are reserved for ANSI IT8 TIFF/IT \u003cdkelly@etsinc.com) */\n\tcase COMPRESSION_IT8CTPAD:\tos \u003c\u003c \"IT8CTPAD\"; break;\n\tcase COMPRESSION_IT8LW:\t\tos \u003c\u003c \"IT8LW\"; break;\n\tcase COMPRESSION_IT8MP:\t\tos \u003c\u003c \"IT8MP\"; break;\n\tcase COMPRESSION_IT8BL:\t\tos \u003c\u003c \"IT8BL\"; break;\n\t/* compression codes 32908-32911 are reserved for Pixar */\n\tcase COMPRESSION_PIXARFILM:\tos \u003c\u003c \"PIXARFILM\"; break;\n\tcase COMPRESSION_PIXARLOG:\tos \u003c\u003c \"PIXARLOG\"; break;\n\tcase COMPRESSION_DEFLATE:\tos \u003c\u003c \"DEFLATE\"; break;\n\tcase COMPRESSION_ADOBE_DEFLATE:\tos \u003c\u003c \"ADOBE DEFLATE\"; break;\n\t/* compression code 32947 is reserved for Oceana Matrix \u003cdev@oceana.com\u003e */\n\tcase COMPRESSION_DCS:\t\tos \u003c\u003c \"DCS\"; break;\n\tcase COMPRESSION_JBIG:\t\tos \u003c\u003c \"JBIG\"; break;\n\tcase COMPRESSION_SGILOG:\tos \u003c\u003c \"SGILOG\"; break;\n\tcase COMPRESSION_SGILOG24:\tos \u003c\u003c \"SGILOG24\"; break;\n\tdefault:\n\t\t{\n\t\t\tos\t\u003c\u003c \"Bad_Compression_Type\"\n\t\t\t\t\u003c\u003c '(' \u003c\u003c u_compre \u003c\u003c ')';\n\t\t}\n\t\tbreak;\n\t}\n\t os \u003c\u003c \"\\n\";\n\n\t//------------------------------------------------------------\n\n\t os \u003c\u003c \"Image\\n\"\n\t    \u003c\u003c \" Size : \"\n\t    \u003c\u003c handler.imagewidth(isexist)\n\t    \u003c\u003c \" x \"\n\t    \u003c\u003c handler.imagelength(isexist)\n\t    \u003c\u003c \"  \"\n\t    ;\n\tif      (1 == handler.samplesperpixel(isexist)) {\n\t if (1 == handler.bitspersample(isexist)) { os \u003c\u003c \"MonoBW\"; }\n\t else\t\t\t\t   { os \u003c\u003c \"Grayscale\"; }\n\t}\n\telse if (3 == handler.samplesperpixel(isexist)) { os \u003c\u003c \"RGB\"; }\n\telse if (4 == handler.samplesperpixel(isexist)) { os \u003c\u003c \"RGBA\"; }\n\telse {\n\t os \u003c\u003c \"Bad_Samples_Per_Pixel\"\n\t    \u003c\u003c '(' \u003c\u003c handler.samplesperpixel(isexist) \u003c\u003c ')';\n\t}\n\n\t os\n\t    \u003c\u003c ' '\n\t    \u003c\u003c handler.bitspersample(isexist)\n\t    \u003c\u003c \" bit\";\n\tif (1 \u003c handler.bitspersample(isexist)) {\n\t os \u003c\u003c 's';\n\t}\n\t os \u003c\u003c '\\n';\n\n\t os \u003c\u003c \" Resolution : \";\n\n\tconst unsigned int u_re = handler.resolutionunit(isexist);\n\tif (std::numeric_limits\u003cunsigned int\u003e::max() == u_re) {\n\t\tos \u003c\u003c \"Not Defined\";\n\t} else {\n\t\tswitch (u_re) {\n\t\tcase RESUNIT_INCH:\n\t\tcase RESUNIT_CENTIMETER:\n\t\t\tos \u003c\u003c handler.xresolution(isexist);\n\t\t if (handler.xresolution(isexist) != handler.yresolution(isexist)) {\n\t\t\tos \u003c\u003c \" x \" \u003c\u003c handler.yresolution(isexist);\n\t\t }\n\t\t\tos \u003c\u003c ' ';\n\t\t}\n\t\tswitch (u_re) {\n\t\tcase RESUNIT_NONE:       os \u003c\u003c \"Nothing\"; break;\n\t\tcase RESUNIT_INCH:       os \u003c\u003c \"Dot/Inch\"; break;\n\t\tcase RESUNIT_CENTIMETER: os \u003c\u003c \"Dot/Centimeter\"; break;\n\t\tdefault: os\t\u003c\u003c \"Bad_Unit_Type\"\n\t\t\t\t\u003c\u003c '(' \u003c\u003c (int)u_re \u003c\u003c ')';\n\t\t\tbreak;\n\t\t}\n\t}\n\t os \u003c\u003c '\\n';\n\n\t os \u003c\u003c \" Orientation(Row Column) : \";\n\tconst unsigned int u_or = handler.orientation(isexist);\n\tif (std::numeric_limits\u003cunsigned int\u003e::max() == u_or) {\n\t\t\t\t    os \u003c\u003c \"Not Defined\";\n\t} else {\n\t switch (u_or) {\n\t case 0:\n\t case ORIENTATION_TOPLEFT:  os \u003c\u003c \"Top Left\"; break;\n\t case ORIENTATION_TOPRIGHT: os \u003c\u003c \"Top Right\"; break;\n\t case ORIENTATION_BOTRIGHT: os \u003c\u003c \"Bottom Right\"; break;\n\t case ORIENTATION_BOTLEFT:  os \u003c\u003c \"Bottom Left\"; break;\n\t case ORIENTATION_LEFTTOP:  os \u003c\u003c \"Left Top\"; break;\n\t case ORIENTATION_RIGHTTOP: os \u003c\u003c \"Right Top\"; break;\n\t case ORIENTATION_RIGHTBOT: os \u003c\u003c \"Right Bottom\"; break;\n\t case ORIENTATION_LEFTBOT:  os \u003c\u003c \"Left Bottom\"; break;\n\t default: os\t\u003c\u003c \"Bad_Orientation_Type\"\n\t\t\t\u003c\u003c '(' \u003c\u003c (int)u_or \u003c\u003c ')';\n\t }\n\t}\n\t os \u003c\u003c '\\n';\n\n\treturn os.str();\n}\n//--------------------------------------------------------------------\nstd::string get_line_head(void) {\n\tstd::string line_head;\n\tline_head += \"bo  compr width heigh c bi or pho pla bit\";\n\tline_head += \" reso x y (tile) file\\n\";\n\treturn line_head;\n}\nstd::string get_line_info(\n\tconst std::string\u0026 file_path\n) {\n\t/* TIFFファイル開く ------------------------------- */\n\timage::tif::read_handle handler(file_path.c_str());\n\tbool isexist = false;\n\n\tstd::ostringstream os;\n\n\t/* TIFFファイルのバイトオーダ --------------------- */\n\tunion { unsigned short us; unsigned char uc[2]; } order_box;\n\torder_box.us = 1;\n\tconst bool cpu_is_little_endian = (1==order_box.uc[0])?true:false;\n\tconst bool byte_swap_sw = (TIFFIsByteSwapped(handler))?true:false;\n\tif (( (!cpu_is_little_endian) == (!byte_swap_sw) ) ||\n\t    (   cpu_is_little_endian  ==   byte_swap_sw  )) {\n\t     /*\tCPUがbig    endian(false)でbyte swapしてない(false)か、\n\t\tCPUがlittle endian(true )でbyte swapした(true) */\n\t\tos \u003c\u003c \"big\";\n\t} else {\n\t\tos \u003c\u003c \"lit\";\n\t}\n\n\t/* このライブラリで扱えるか否か ------------------- */\n\tbool b_canuse_sw = true;\n try {\n\thandler.check_parameters();\n }\n // catch (std::exception\u0026 e) {\n\t// std::cout \u003c\u003c e.what() \u003c\u003c '\\n';\n catch (std::exception) {\n\tb_canuse_sw = false;\n }\n\tif (b_canuse_sw) { os \u003c\u003c \" \"; }\n\telse             { os \u003c\u003c \"x\"; }\n\n\t/* 圧縮タイプ ------------------------------------- */\n#if 0 //------help------\n標仕仕様\n#define\tCOMPRESSION_NONE\t1\t/* dump mode */\n#define\tCOMPRESSION_CCITTRLE\t2\t/* CCITT modified Huffman RLE */\n#define\tCOMPRESSION_PACKBITS\t32773\t/* Macintosh RLE */\n\n拡張仕様\n#define\tCOMPRESSION_CCITTFAX3\t3\t/* CCITT Group 3 fax encoding */\n#define\tCOMPRESSION_CCITT_T4\t3       /* CCITT T.4 (TIFF 6 name) */\n#define\tCOMPRESSION_CCITTFAX4\t4\t/* CCITT Group 4 fax encoding */\n#define\tCOMPRESSION_CCITT_T6\t4       /* CCITT T.6 (TIFF 6 name) */\n#define\tCOMPRESSION_LZW\t\t5       /* Lempel-Ziv  \u0026 Welch */\n#define\tCOMPRESSION_JPEG\t7\t/* %JPEG DCT compression */\n#endif //------help------\n\tconst unsigned int u_compre = handler.compression(isexist);\n\tchar *cp_compre = 0;\n\tswitch (u_compre) {\n\tcase COMPRESSION_NONE:\t\tcp_compre = \"dump \"; break;\n\tcase COMPRESSION_CCITTRLE:\tcp_compre = \"crle \"; break;\n\tcase COMPRESSION_CCITTFAX3:\tcp_compre = \"cfax3\"; break;\n\tcase COMPRESSION_CCITTFAX4:\tcp_compre = \"cfax4\"; break;\n\tcase COMPRESSION_LZW:\t\tcp_compre = \"lzw  \"; break;\n\tcase COMPRESSION_OJPEG:\t\tcp_compre = \"ojpeg\"; break;\n\tcase COMPRESSION_JPEG:\t\tcp_compre = \"jpeg \"; break;\n\tcase COMPRESSION_NEXT:\t\tcp_compre = \"next \"; break;\n\tcase COMPRESSION_CCITTRLEW:\tcp_compre = \"crlew\"; break;\n\tcase COMPRESSION_PACKBITS:\tcp_compre = \"packb\"; break;\n\tcase COMPRESSION_THUNDERSCAN:\tcp_compre = \"thund\"; break;\n\t/* codes 32895-32898 are reserved for ANSI IT8 TIFF/IT \u003cdkelly@etsinc.com) */\n\tcase COMPRESSION_IT8CTPAD:\tcp_compre = \"it8ct\"; break;\n\tcase COMPRESSION_IT8LW:\t\tcp_compre = \"it8lw\"; break;\n\tcase COMPRESSION_IT8MP:\t\tcp_compre = \"it8mp\"; break;\n\tcase COMPRESSION_IT8BL:\t\tcp_compre = \"it8bl\"; break;\n\t/* compression codes 32908-32911 are reserved for Pixar */\n\tcase COMPRESSION_PIXARFILM:\tcp_compre = \"pixfi\"; break;\n\tcase COMPRESSION_PIXARLOG:\tcp_compre = \"pixlo\"; break;\n\tcase COMPRESSION_DEFLATE:\tcp_compre = \"defla\"; break;\n\tcase COMPRESSION_ADOBE_DEFLATE:\tcp_compre = \"adefl\"; break;\n\t/* compression code 32947 is reserved for Oceana Matrix \u003cdev@oceana.com\u003e */\n\tcase COMPRESSION_DCS:\t\tcp_compre = \"dcs  \"; break;\n\tcase COMPRESSION_JBIG:\t\tcp_compre = \"jbig \"; break;\n\tcase COMPRESSION_SGILOG:\tcp_compre = \"sgilo\"; break;\n\tcase COMPRESSION_SGILOG24:\tcp_compre = \"sgi24\"; break;\n\t}\n\tif (0 == cp_compre) {\n\t\tos \u003c\u003c std::setw(5) \u003c\u003c  u_compre; }\n\telse {\t\t\tos \u003c\u003c cp_compre; }\n\n\t/* 画像幅 ----------------------------------------- */\n\tos \u003c\u003c ' ' \u003c\u003c std::setw(5) \u003c\u003c handler.imagewidth(isexist);\n\t/* 画像高さ --------------------------------------- */\n\tos \u003c\u003c ' ' \u003c\u003c std::setw(5) \u003c\u003c handler.imagelength(isexist);\n\t/* チャンネル数 ----------------------------------- */\n\tos \u003c\u003c ' ' \u003c\u003c std::setw(1) \u003c\u003c handler.samplesperpixel(isexist);\n\t/* サンプリングビット数 --------------------------- */\n\tos \u003c\u003c ' ' \u003c\u003c std::setw(2) \u003c\u003c handler.bitspersample(isexist);\n\t/* 画像向き --------------------------------------- */\n\tconst unsigned int u_orient = handler.orientation(isexist);\n\tchar *cp_orient = 0;\n/*\n2008-04-17\nVC8(vc2005)およびVC6で\nstd::numeric_limits\u003cunsigned int\u003e::max()\nは\n#include \u003cwindows.h\u003e\nがあることで\n#define max(a,b) ...\nによってつぶされてしまうので\n-DNOMINMAX\nを指定してコンパイルするか\n#define NOMINMAX\nをソースコードに定義するか\n(std::numeric_limits\u003cunsigned int\u003e::max)()\nとする\nhttp://support.microsoft.com/kb/143208/ja\n*/\n\tif (std::numeric_limits\u003cunsigned int\u003e::max() == u_orient) {\n\t\t\t\t\tcp_orient = \"nd\"; }\n\tswitch (u_orient) {\n\tcase ORIENTATION_TOPLEFT:\tcp_orient = \"TL\"; break;\n\tcase ORIENTATION_TOPRIGHT:\tcp_orient = \"TR\"; break;\n\tcase ORIENTATION_LEFTTOP:\tcp_orient = \"LT\"; break;\n\tcase ORIENTATION_RIGHTTOP:\tcp_orient = \"RT\"; break;\n\tcase ORIENTATION_BOTRIGHT:\tcp_orient = \"BR\"; break;\n\tcase ORIENTATION_BOTLEFT:\tcp_orient = \"BL\"; break;\n\tcase ORIENTATION_RIGHTBOT:\tcp_orient = \"RB\"; break;\n\tcase ORIENTATION_LEFTBOT:\tcp_orient = \"LB\"; break;\n\t}\n\t /* zero is made in photoshop does it? */\n\tif (0 == cp_orient) {\n\t\tos \u003c\u003c ' ' \u003c\u003c std::setw(2) \u003c\u003c  u_orient; }\n\telse {\t\t\tos \u003c\u003c ' ' \u003c\u003c cp_orient; }\n\n\t/* 画像種類 --------------------------------------- */\n\tconst unsigned int u_photom = handler.photometric(isexist);\n\tchar *cp_photom = 0;\n\tswitch (u_photom) {\n\tcase PHOTOMETRIC_MINISWHITE:\tcp_photom = \"mw \"; break;\n\tcase PHOTOMETRIC_MINISBLACK:\tcp_photom = \"mb \"; break;\n\tcase PHOTOMETRIC_RGB:\t\tcp_photom = \"rgb\"; break;\n\tcase PHOTOMETRIC_MASK:\t\tcp_photom = \"mas\"; break;\n\tcase PHOTOMETRIC_SEPARATED:\tcp_photom = \"sep\"; break;\n\tcase PHOTOMETRIC_YCBCR:\t\tcp_photom = \"ycb\"; break;\n\tcase PHOTOMETRIC_CIELAB:\tcp_photom = \"cie\"; break;\n\tcase PHOTOMETRIC_ITULAB:\tcp_photom = \"itu\"; break;\n\tcase PHOTOMETRIC_LOGL:\t\tcp_photom = \"log\"; break;\n\tcase PHOTOMETRIC_LOGLUV:\tcp_photom = \"lov\"; break;\n\t}\n\tif (0 == cp_photom) {\n\t\tos \u003c\u003c ' ' \u003c\u003c std::setw(3) \u003c\u003c  u_photom; }\n\telse {\t\t\tos \u003c\u003c ' ' \u003c\u003c cp_photom; }\n\n\t/* 画像格納順序 ----------------------------------- */\n\tconst unsigned int u_planar = handler.planarconfig(isexist);\n\tchar *cp_planar=0;\n\tswitch (u_planar) {\n\tcase PLANARCONFIG_CONTIG:\tcp_planar = \"con\"; break;\n\tcase PLANARCONFIG_SEPARATE:\tcp_planar = \"sep\"; break;\n\t}\n\tif (0 == cp_planar) {\n\t\tos \u003c\u003c ' ' \u003c\u003c std::setw(1) \u003c\u003c  u_planar; }\n\telse {\t\t\tos \u003c\u003c ' ' \u003c\u003c cp_planar; }\n\n\t/* データビットの向き ----------------------------- */\n\tconst unsigned int u_fillor = handler.fillorder(isexist);\n\tchar *cp_fillor = 0;\n\tif (std::numeric_limits\u003cunsigned int\u003e::max() == u_fillor) {\n\t\t\t\tcp_fillor = \"nd \"; }\n\tswitch (u_fillor) {\n\tcase FILLORDER_MSB2LSB: cp_fillor = \"M2L\"; break;\n\tcase FILLORDER_LSB2MSB: cp_fillor = \"L2M\"; break;\n\t}\n\tif (0 == cp_fillor) {\n\t\tos \u003c\u003c ' ' \u003c\u003c std::setw(3) \u003c\u003c  u_fillor; }\n\telse {\t\t\tos \u003c\u003c ' ' \u003c\u003c cp_fillor; }\n\n\t/* 画像解像度 ------------------------------------- */\n\tconst unsigned int u_resolu = handler.resolutionunit(isexist);\n\tchar *cp_resolu = 0;\n\tif (std::numeric_limits\u003cunsigned int\u003e::max() == u_resolu) {\n\t\t\t\tcp_resolu = \"nd  \"; }\n\tswitch (u_resolu) {\n\tcase RESUNIT_NONE:\tcp_resolu = \"noth\"; break;\n\tcase RESUNIT_INCH:\tcp_resolu = \"inch\"; break;\n\tcase RESUNIT_CENTIMETER:cp_resolu = \"cent\"; break;\n\t}\n\tif (0 == cp_resolu) {\n\t\tos \u003c\u003c ' ' \u003c\u003c std::setw(4) \u003c\u003c  u_resolu; }\n\telse {\t\t\tos \u003c\u003c ' ' \u003c\u003c cp_resolu; }\n\n\tos \u003c\u003c ' ' \u003c\u003c handler.xresolution(isexist);\n\tos \u003c\u003c ' ' \u003c\u003c handler.yresolution(isexist);\n\n\t/* タイルformatの場合 ----------------------------- */\n\tif (TIFFIsTiled( handler )) {\n\t\tos\n\t\t\t\u003c\u003c \" (\"\n\t\t\t\u003c\u003c handler.tilewidth(isexist)\n\t\t\t\u003c\u003c ' '\n\t\t\t\u003c\u003c handler.tilelength(isexist)\n\t\t\t\u003c\u003c ')';\n\t}\n\t/* ファイル名(ディレクトリパスを除く) ------------- */\n\tstd::string::size_type  index = file_path.rfind('/');\n\tif (std::string::npos == index) {\n\t\t\t\tindex = file_path.rfind('\\\\');\n\t}\n\tif (std::string::npos == index) {\n\t\tos \u003c\u003c ' ' \u003c\u003c file_path;\n\t} else {\n\t\tos \u003c\u003c ' ' \u003c\u003c file_path.substr(index+1);\n\t}\n\t/* 改行コード ------------------------------------- */\n\tos \u003c\u003c \"\\n\";\n\n\t/* TIFFファイル閉じる ----------------------------- */\n\t// handler.v_close();\n\n\treturn os.str();\n}\n\n} // namespace tif\n} // namespace image\n\n//--------------------------------------------------------------------\nnamespace {\n struct tif_help_list_ {\n\tchar *short_name;\n\tchar *define_name;\n\tint define_number;\n\tchar *explain;\n };\n std::string get_tif_help_list_info_(\n\tconst char *title\n\t, const char *tag_name\n\t, unsigned int each_size\n\t, tif_help_list_ *help_list\n ) {\n\tstd::ostringstream os; \n\n\tos\t\u003c\u003c std::setw(6) \u003c\u003c std::left \u003c\u003c title \u003c\u003c \"\\n\"\n\t\t\u003c\u003c \"  (\" \u003c\u003c tag_name \u003c\u003c \")\\n\";\n\tfor(size_t ii = 0; ii \u003ceach_size/sizeof(tif_help_list_); ++ii) {\n\t\tos\t\u003c\u003c \"    \"\n\t\t\t\u003c\u003c std::setw(5) \u003c\u003c std::left\n\t\t\t\u003c\u003c help_list[ii].short_name\n\t\t\t\u003c\u003c \" (\"\n\t\t\t\u003c\u003c std::setw(25) \u003c\u003c std::left\n\t\t\t\u003c\u003c help_list[ii].define_name\n\t\t\t\u003c\u003c std::setw(5) \u003c\u003c std::right\n\t\t\t\u003c\u003c help_list[ii].define_number\n\t\t\t\u003c\u003c ')'\n\t\t\t\u003c\u003c help_list[ii].explain\n\t\t\t\u003c\u003c '\\n';\n\t}\n\treturn os.str();\n }\n} // namespace\n\nnamespace image {\nnamespace tif {\n\n/* 圧縮種類のリスト */\nstd::string get_compression_list(void) {\n\ttif_help_list_ tif_compr_list[] = {\n{ \"dump \",\"COMPRESSION_NONE\",\t        1,\"dump mode\" },\n{ \"crle \",\"COMPRESSION_CCITTRLE\",       2,\"CCITT modified Huffman RLE\" },\n{ \"cfax3\",\"COMPRESSION_CCITTFAX3\",      3,\"CCITT Group 3 fax encoding\" },\n{ \"cfax4\",\"COMPRESSION_CCITTFAX4\",      4,\"CCITT Group 4 fax encoding\" },\n{ \"lzw  \",\"COMPRESSION_LZW\",\t        5,\"Lempel-Ziv  \u0026 Welch\" },\n{ \"ojpeg\",\"COMPRESSION_OJPEG\",\t        6,\"!6.0 JPEG\" },\n{ \"jpeg \",\"COMPRESSION_JPEG\",\t        7,\"%JPEG DCT compression\" },\n{ \"next \",\"COMPRESSION_NEXT\",\t    32766,\"NeXT 2-bit RLE\" },\n{ \"crlew\",\"COMPRESSION_CCITTRLEW\",  32771,\"#1 w/ word alignment\" },\n{ \"packb\",\"COMPRESSION_PACKBITS\",   32773,\"Macintosh RLE\" },\n{ \"thund\",\"COMPRESSION_THUNDERSCAN\",32809,\"ThunderScan RLE\" },\n{ \"it8ct\",\"COMPRESSION_IT8CTPAD\",   32895,\"reserved for IT8 CT w/padding\" },\n{ \"it8lw\",\"COMPRESSION_IT8LW\",      32896,\"reserved for IT8 Linework RLE\" },\n{ \"it8mp\",\"COMPRESSION_IT8MP\",      32897,\"reserved for IT8 Monochrome picture\" },\n{ \"it8bl\",\"COMPRESSION_IT8BL\",      32898,\"reserved for IT8 Binary line art\" },\n{ \"pixfi\",\"COMPRESSION_PIXARFILM\",  32908,\"reserved for Pixar companded 10bit LZW\" },\n{ \"pixlo\",\"COMPRESSION_PIXARLOG\",   32909,\"reserved for Pixar companded 11bit ZIP\" },\n{ \"defla\",\"COMPRESSION_DEFLATE\",    32946,\"Deflate compression\" },\n{ \"adefl\",\"COMPRESSION_ADOBE_DEFLATE\",  8,\"Deflate compression, as recognized by Adobe\" },\n{ \"dcs  \",\"COMPRESSION_DCS\",        32947,\"reserved for Kodak DCS encoding\" },\n{ \"jbig \",\"COMPRESSION_JBIG\",       34661,\"ISO JBIG\" },\n{ \"sgilo\",\"COMPRESSION_SGILOG\",     34676,\"SGI Log Luminance RLE\" },\n{ \"sgi24\",\"COMPRESSION_SGILOG24\",   34677,\"SGI Log 24-bit packed\" },\n\t};\n \treturn get_tif_help_list_info_(\n\t\t\"compr\"\n\t\t,\"TIFFTAG_COMPRESSION\"\n\t\t, sizeof(tif_compr_list)\n\t\t, tif_compr_list\n\t);\n}\n/* 画像向き種類のリスト */\nstd::string get_orientation_list(void) {\n\ttif_help_list_ tif_orient_list[] = {\n{ \"nd\",\"not defined in file\",\t0,\"\" },\n{ \"TL\",\"ORIENTATION_TOPLEFT\",\t1,\"row 0 top, col 0 lhs\" },\n{ \"TR\",\"ORIENTATION_TOPRIGHT\",\t2,\"row 0 top, col 0 rhs\" },\n{ \"LT\",\"ORIENTATION_BOTRIGHT\",\t3,\"row 0 bottom, col 0 rhs\" },\n{ \"RT\",\"ORIENTATION_BOTLEFT\",\t4,\"row 0 bottom, col 0 lhs\" },\n{ \"BR\",\"ORIENTATION_LEFTTOP\",\t5,\"row 0 lhs, col 0 top\" },\n{ \"BL\",\"ORIENTATION_RIGHTTOP\",\t6,\"row 0 rhs, col 0 top\" },\n{ \"RB\",\"ORIENTATION_RIGHTBOT\",\t7,\"row 0 rhs, col 0 bottom\" },\n{ \"LB\",\"ORIENTATION_LEFTBOT\",\t8,\"row 0 lhs, col 0 bottom\" },\n\t};\n\treturn get_tif_help_list_info_(\n\t\t\"or\"\n\t\t, \"TIFFTAG_ORIENTATION\"\n\t\t, sizeof(tif_orient_list)\n\t\t, tif_orient_list\n\t);\n}\n/* 画像種類リスト */\nstd::string get_photometric_list(void) {\n\ttif_help_list_ tif_photom_list[] = {\n{ \"mw \",\"PHOTOMETRIC_MINISWHITE\",\t0,\"min value is white\" },\n{ \"mb \",\"PHOTOMETRIC_MINISBLACK\",\t1,\"min value is black\" },\n{ \"rgb\",\"PHOTOMETRIC_RGB\",\t\t2,\"RGB color model\" },\n{ \"mas\",\"PHOTOMETRIC_MASK\",\t\t4,\"$holdout mask\" },\n{ \"sep\",\"PHOTOMETRIC_SEPARATED\",\t5,\"!color separations\" },\n{ \"ycb\",\"PHOTOMETRIC_YCBCR\",\t\t6,\"!CCIR 601\" },\n{ \"cie\",\"PHOTOMETRIC_CIELAB\",\t\t8,\"!1976 CIE L*a*b*\" },\n{ \"itu\",\"PHOTOMETRIC_ITULAB\",\t\t10,\"ITU L*a*b*\" },\n{ \"log\",\"PHOTOMETRIC_LOGL\",\t\t32844,\"CIE Log2(L)\" },\n{ \"lov\",\"PHOTOMETRIC_LOGLUV\",\t\t32845,\"CIE Log2(L) (u',v')\" },\n\t};\n\treturn get_tif_help_list_info_(\n\t\t\"pho\"\n\t\t, \"TIFFTAG_PHOTOMETRIC\"\n\t\t, sizeof(tif_photom_list)\n\t\t, tif_photom_list\n\t);\n}\n/* 画像格納順序リスト */\nstd::string get_planarconfig_list(void) {\n\ttif_help_list_ tif_planar_list[] = {\n{ \"con\",\"PLANARCONFIG_CONTIG\",\t\t1,\"single image plan\" },\n{ \"sep\",\"PLANARCONFIG_SEPARATE\",\t2,\"separate planes of data\" },\n\t};\n\treturn get_tif_help_list_info_(\n\t\t\"pla\"\n\t\t, \"TIFFTAG_PLANARCONFIG\"\n\t\t, sizeof(tif_planar_list)\n\t\t, tif_planar_list\n\t);\n}\n/* データビットの向きリスト */\nstd::string get_fillorder_list(void) {\n\ttif_help_list_ tif_fillor_list[] = {\n{ \"nd \",\"not defined in file\",\t\t0,\"\" },\n{ \"M2L\",\"FILLORDER_MSB2LSB\",\t1,\"most significant -\u003e least\" },\n{ \"L2M\",\"FILLORDER_LSB2MSB\",\t2,\"least significant -\u003e most\" },\n\t};\n\treturn get_tif_help_list_info_(\n\t\t\"bit\"\n\t\t, \"TIFFTAG_FILLORDER\"\n\t\t, sizeof(tif_fillor_list)\n\t\t, tif_fillor_list\n\t);\n}\nvoid print_tiff_directory(int argc, char *argv[]) {\n\tfor (int ii = 0; ii \u003c argc; ++ii) {\n\t\timage::tif::read_handle handler(argv[ii]);\n\t\tstd::cout \u003c\u003c \"File : \" \u003c\u003c argv[ii] \u003c\u003c '\\n';\n\t\tTIFFPrintDirectory(handler,stdout\n\t\t\t/***,TIFFPRINT_STRIPS |\n\t\t\tTIFFPRINT_CURVES |\n\t\t\tTIFFPRINT_COLORMAP |\n\t\t\tTIFFPRINT_JPEGQTABLES |\n\t\t\tTIFFPRINT_JPEGACTABLES |\n\t\t\tTIFFPRINT_JPEGDCTABLES***/\n\t\t);\n\t}\n}\n\n} // namespace image\n} // namespace tif\n\n#ifdef DEBUG_IMAGE_TIF_READ_HANDLE_INFO\n#include \"image_tif_common.cpp\"\n#include \"image_tif_read_handle.cpp\"\nnamespace {\n void print_column_(int argc, char *argv[]) {\n\tstd::string info;\n\tinfo += image::tif::get_line_head();\n\tfor (int ii = 0; ii \u003c argc; ++ii) {\n\t\tinfo += image::tif::get_line_info( argv[ii] );\n\t}\n\tstd::cout \u003c\u003c info;\n }\n void print_info_(int argc, char *argv[]) {\n\tstd::string info;\n\tfor (int ii = 0; ii \u003c argc; ++ii) {\n\t\tinfo += image::tif::get_info( \"TIFF\" ,argv[ii] );\n\t}\n\tstd::cout \u003c\u003c info;\n }\n}\n\nint main(int argc, char** argv) {\n\tif (argc \u003c= 1) {\n\t\tstd::cout\n\t\u003c\u003c \"Usage : \" \u003c\u003c argv[0] \u003c\u003c \" [-tifinfo/-tifdir] image.tif ...\\n\"\n\t\u003c\u003c \"Usage : \" \u003c\u003c argv[0] \u003c\u003c \" -tifhelp\\n\"\n\t\u003c\u003c \"[Options]\\n\"\n\t\u003c\u003c \"\\t-tifdir  : tiff detail\u003c.tif\u003e\\n\"\n\t\t;\n\t\treturn 0;\n\t}\n try {\n\tif (!strcmp( \"-tifinfo\", argv[1] ) ) {\n\t\tprint_info_( argc-2, \u0026argv[2] );\n\t}\n\telse if (!strcmp( \"-tifdir\", argv[1] ) ) {\n\t\timage::tif::print_tiff_directory( argc-2, \u0026argv[2] );\n\t}\n\telse if (!strcmp( \"-tifhelp\", argv[1] ) ) {\n\t\tstd::cout \u003c\u003c image::tif::get_compression_list();\n\t\tstd::cout \u003c\u003c image::tif::get_orientation_list();\n\t\tstd::cout \u003c\u003c image::tif::get_photometric_list();\n\t\tstd::cout \u003c\u003c image::tif::get_planarconfig_list();\n\t\tstd::cout \u003c\u003c image::tif::get_fillorder_list();\n\t}\n\telse {\n\t\tprint_column_( argc-1, \u0026argv[1] );\n\t}\n }\n catch (std::exception\u0026 e) {\n\tstd::cout \u003c\u003c e.what() \u003c\u003c '\\n';\n }\n\treturn 0;\n}\n#endif\n/*\nrem :596,597 w! maketiffinfo.bat\ncl /W4 /WX /MD /EHa /O2 /source-charset:utf-8 /DUNICODE /DDEBUG_IMAGE_TIF_READ_HANDLE_INFO /I. /I../../thirdparty/libtiff/tiff-4.0.9_x32/libtiff image_tif_read_handle_info.cpp ../../thirdparty/libtiff/tiff-4.0.9_x32/libtiff/libtiff.lib /Fetiffinfo\ndel image_tif_read_handle_info.obj\n# :605,605 w! make.sh\ng++ -Wall -std=c++11 image_tif_read_handle_info.cpp image_tif_common.cpp image_tif_read_handle.cpp -DDEBUG_IMAGE_TIF_READ_HANDLE_INFO -I. -ltiff\n*/\n",
        "name": "image_tif_read_handle_info.cpp",
        "path": "sources/lib_image_rw/image_tif_read_handle_info.cpp",
        "url": "/github.com/opentoonz/GTS/-/blob/sources/lib_image_rw/image_tif_read_handle_info.cpp"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 524,
          "offsetAndLengths": [
            [
              2,
              18
            ]
          ],
          "preview": "\t\tTIFFPrintDirectory(handler,stdout"
        }
      ],
      "repository": {
        "name": "github.com/opentoonz/GTS",
        "url": "/github.com/opentoonz/GTS"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "3d7638c3ccdb7e8296cf689ff5f6b391d7eb7988"
        },
        "content": "﻿/*====================================================================*\n -  Copyright (C) 2001 Leptonica.  All rights reserved.\n -  This software is distributed in the hope that it will be\n -  useful, but with NO WARRANTY OF ANY KIND.\n -  No author or distributor accepts responsibility to anyone for the\n -  consequences of using this software, or for whether it serves any\n -  particular purpose or works at all, unless he or she says so in\n -  writing.  Everyone is granted permission to copy, modify and\n -  redistribute this source code, for commercial or non-commercial\n -  purposes, with the following restrictions: (1) the origin of this\n -  source code must not be misrepresented; (2) modified versions must\n -  be plainly marked as such; and (3) this notice may not be removed\n -  or altered from any source or modified source distribution.\n *====================================================================*/\n\n/*\n *  tiffio.c\n *                     \n *     Reading tiff:\n *             PIX       *pixReadTiff()    [ special top level ]\n *             PIX       *pixReadStreamTiff()\n *      static PIX       *pixReadFromTiffStream()\n *\n *     Writing tiff:\n *             l_int32    pixWriteTiff()   [ special top level ]\n *             l_int32    pixWriteTiffCustom()   [ special top level ]\n *             l_int32    pixWriteStreamTiff()\n *      static l_int32    pixWriteToTiffStream()\n *      static l_int32    writeCustomTiffTags()\n *\n *     Reading and writing multipage tiff\n *             PIXA       pixaReadMultipageTiff()\n *             l_int32    writeMultipageTiff()  [ special top level ]\n *             l_int32    writeMultipageTiffSA()\n *\n *     Information about tiff file\n *             l_int32    fprintTiffInfo()\n *             l_int32    tiffGetCount()\n *      static l_int32    tiffGetResolution()\n *             l_int32    readHeaderTiff()\n *             l_int32    freadHeaderTiff()\n *             l_int32    readHeaderMemTiff()\n *      static l_int32    tiffReadHeaderTiff()\n *             l_int32    findTiffCompression()\n *      static l_int32    getTiffCompressedFormat()\n *\n *     Extraction of tiff g4 data:\n *             l_int32    extractTiffG4DataFromFile()\n *\n *     Open tiff stream from file stream\n *      static TIFF      *fopenTiff()\n *\n *     Memory I/O: reading memory --\u003e pix and writing pix --\u003e memory\n *             [10 static helper functions]\n *             l_int32    pixReadMemTiff();\n *             l_int32    pixWriteMemTiff();\n *             l_int32    pixWriteMemTiffCustom();\n *\n *   Note:  You should be using version 3.7.4 of libtiff to be certain\n *          that all the necessary functions are included.\n */\n\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003csys/types.h\u003e\n#ifndef _MSC_VER\n#include \u003cunistd.h\u003e\n#else  /* _MSC_VER */\n#include \u003cio.h\u003e\n#define seek _seek;\n#endif  /* _MSC_VER */\n#include \u003cfcntl.h\u003e\n#include \"allheaders.h\"\n\n#ifdef HAVE_CONFIG_H\n#include \"config_auto.h\"\n#endif  /* HAVE_CONFIG_H */\n\n/* --------------------------------------------*/\n#if  HAVE_LIBTIFF   /* defined in environ.h */\n/* --------------------------------------------*/\n\n#include \"tiff.h\"\n#include \"tiffio.h\"\n\nstatic const l_int32  DEFAULT_RESOLUTION = 300;   /* ppi */\nstatic const l_int32  MAX_PAGES_IN_TIFF_FILE = 3000;  /* should be enough */\n\n\n    /* All functions with TIFF interfaces are static. */\nstatic PIX      *pixReadFromTiffStream(TIFF *tif);\nstatic l_int32   tiffGetResolution(TIFF *tif, l_uint32 *pxres, l_uint32 *pyres);\nstatic l_int32   tiffReadHeaderTiff(TIFF *tif, l_int32 *pwidth,\n                                    l_int32 *pheight, l_int32 *pbps,\n                                    l_int32 *pspp, l_int32 *pres,\n                                    l_int32 *pcmap, l_int32 *pformat);\nstatic l_int32   writeCustomTiffTags(TIFF *tif, NUMA *natags,\n                                     SARRAY *savals, SARRAY  *satypes,\n                                     NUMA *nasizes);\nstatic l_int32   pixWriteToTiffStream(TIFF *tif, PIX *pix, l_int32 comptype,\n                                      NUMA *natags, SARRAY *savals,\n                                      SARRAY *satypes, NUMA *nasizes);\nstatic TIFF     *fopenTiff(FILE *fp, const char *modestr); \n\n    /* Static helper for tiff compression type */\nstatic l_int32   getTiffCompressedFormat(l_uint16 tiffcomp);\n\n    /* Static function for memory I/O */\nstatic TIFF     *fopenTiffMemstream(const char *filename, const char *operation,\n                                    l_uint8 **pdata, size_t *pdatasize);\n\n    /* This structure defines a transform to be performed on a TIFF image\n     * (note that the same transformation can be represented in\n     * several different ways using this structure since\n     * vflip + hflip + counterclockwise == clockwise). */\nstruct tiff_transform {\n    int vflip;    /* if non-zero, image needs a vertical fip */\n    int hflip;    /* if non-zero, image needs a horizontal flip */\n    int rotate;   /* -1 -\u003e counterclockwise 90-degree rotation,\n                      0 -\u003e no rotation\n                      1 -\u003e clockwise 90-degree rotation */\n};\n\n    /* This describes the transformations needed for a given orientation\n     * tag.  The tag values start at 1, so you need to subtract 1 to get a\n     * valid index into this array. */\nstatic struct tiff_transform tiff_orientation_transforms[] = {\n    {0, 0, 0},\n    {0, 1, 0},\n    {1, 1, 0},\n    {1, 0, 0},\n    {0, 1, -1},\n    {0, 0, 1},\n    {0, 1, 1},\n    {0, 0, -1}\n};\n\n\n\n/*--------------------------------------------------------------*\n *                      Reading from file                       *\n *--------------------------------------------------------------*/\n/*!\n *  pixReadTiff()\n *\n *      Input:  filename\n *              page number (0 based)\n *      Return: pix, or null on error\n *\n *  Notes:\n *      (1) This is a version of pixRead(), specialized for tiff\n *          files, that allows specification of the page to be returned\n */\nPIX *\npixReadTiff(const char  *filename,\n            l_int32      n)\n{\nFILE  *fp;\nPIX   *pix;\n\n    PROCNAME(\"pixReadTiff\");\n\n    if (!filename)\n        return (PIX *)ERROR_PTR(\"filename not defined\", procName, NULL);\n\n    if ((fp = fopenReadStream(filename)) == NULL)\n        return (PIX *)ERROR_PTR(\"image file not found\", procName, NULL);\n    if ((pix = pixReadStreamTiff(fp, n)) == NULL) {\n        fclose(fp);\n        return (PIX *)ERROR_PTR(\"pix not read\", procName, NULL);\n    }\n    fclose(fp);\n\n    return pix;\n}\n\n\n/*--------------------------------------------------------------*\n *                     Reading from stream                      *\n *--------------------------------------------------------------*/\n/*!\n *  pixReadStreamTiff()\n *\n *      Input:  stream\n *              n (page number: 0 based)\n *      Return: pix, or null on error (e.g., if the page number is invalid)\n */\nPIX *\npixReadStreamTiff(FILE    *fp,\n                  l_int32  n)\n{\nl_int32  i, pagefound;\nPIX     *pix;\nTIFF    *tif;\n\n    PROCNAME(\"pixReadStreamTiff\");\n\n    if (!fp)\n        return (PIX *)ERROR_PTR(\"stream not defined\", procName, NULL);\n\n    if ((tif = fopenTiff(fp, \"r\")) == NULL)\n        return (PIX *)ERROR_PTR(\"tif not opened\", procName, NULL);\n\n    pagefound = FALSE;\n    pix = NULL;\n    for (i = 0; i \u003c MAX_PAGES_IN_TIFF_FILE; i++) {\n        if (i == n) {\n            pagefound = TRUE;\n            if ((pix = pixReadFromTiffStream(tif)) == NULL) {\n                TIFFCleanup(tif);\n                return (PIX *)ERROR_PTR(\"pix not read\", procName, NULL);\n            }\n            break;\n        }\n        if (TIFFReadDirectory(tif) == 0)\n            break;\n    }\n\n    if (pagefound == FALSE) {\n        L_WARNING_INT(\"tiff page %d not found\", procName, n);\n        TIFFCleanup(tif);\n        return NULL;\n    }\n\n    TIFFCleanup(tif);\n    return pix;\n}\n\n\n/*!\n *  pixReadFromTiffStream()\n *\n *      Input:  stream\n *      Return: pix, or null on error\n *\n * Quoting the libtiff documenation at http://libtiff.maptools.org/libtiff.html\n *\n * libtiff provides a high-level interface for reading image data from\n * a TIFF file. This interface handles the details of data\n * organization and format for a wide variety of TIFF files; at least\n * the large majority of those files that one would normally\n * encounter. Image data is, by default, returned as ABGR pixels\n * packed into 32-bit words (8 bits per sample). Rectangular rasters\n * can be read or data can be intercepted at an intermediate level and\n * packed into memory in a format more suitable to the\n * application. The library handles all the details of the format of\n * data stored on disk and, in most cases, if any colorspace\n * conversions are required: bilevel to RGB, greyscale to RGB, CMYK to\n * RGB, YCbCr to RGB, 16-bit samples to 8-bit samples,\n * associated/unassociated alpha, etc.\n */\nstatic PIX *\npixReadFromTiffStream(TIFF  *tif)\n{\nl_uint8   *linebuf, *data;\nl_uint16   spp, bps, bpp, tiffbpl, photometry, tiffcomp, orientation;\nl_uint16  *redmap, *greenmap, *bluemap;\nl_int32    d, wpl, bpl, comptype, i, j, k, ncolors, rval, gval, bval;\nl_uint32   w, h, xres, yres, tiffword;\nl_uint32  *line, *ppixel, *tiffdata;\nPIX       *pix;\nPIXCMAP   *cmap;\n\n    PROCNAME(\"pixReadFromTiffStream\");\n\n    if (!tif)\n        return (PIX *)ERROR_PTR(\"tif not defined\", procName, NULL);\n\n        /* Use default fields for bps and spp */\n    TIFFGetFieldDefaulted(tif, TIFFTAG_BITSPERSAMPLE, \u0026bps);\n    TIFFGetFieldDefaulted(tif, TIFFTAG_SAMPLESPERPIXEL, \u0026spp);\n    bpp = bps * spp;\n    if (bpp \u003e 32)\n        return (PIX *)ERROR_PTR(\"can't handle bpp \u003e 32\", procName, NULL);\n    if (spp == 1)\n        d = bps;\n    else if (spp == 3 || spp == 4)\n        d = 32;\n    else\n        return (PIX *)ERROR_PTR(\"spp not in set {1,3,4}\", procName, NULL);\n\n    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, \u0026w);\n    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, \u0026h);\n    tiffbpl = TIFFScanlineSize(tif);\n\n    if ((pix = pixCreate(w, h, d)) == NULL)\n        return (PIX *)ERROR_PTR(\"pix not made\", procName, NULL);\n    data = (l_uint8 *)pixGetData(pix);\n    wpl = pixGetWpl(pix);\n    bpl = 4 * wpl;\n\n        /* Read the data */\n    if (spp == 1) {\n        if ((linebuf = (l_uint8 *)CALLOC(tiffbpl + 1, sizeof(l_uint8))) == NULL)\n            return (PIX *)ERROR_PTR(\"calloc fail for linebuf\", procName, NULL);\n        \n        for (i = 0 ; i \u003c h ; i++) {\n            if (TIFFReadScanline(tif, linebuf, i, 0) \u003c 0) {\n                FREE(linebuf);\n                pixDestroy(\u0026pix);\n                return (PIX *)ERROR_PTR(\"line read fail\", procName, NULL);\n            }\n            memcpy((char *)data, (char *)linebuf, tiffbpl);\n            data += bpl;\n        }\n        if (bps \u003c= 8)\n            pixEndianByteSwap(pix);\n        else   /* bps == 16 */\n            pixEndianTwoByteSwap(pix);\n        FREE(linebuf);\n    }\n    else {  /* rgb */\n        if ((tiffdata = (l_uint32 *)CALLOC(w * h, sizeof(l_uint32))) == NULL) {\n            pixDestroy(\u0026pix);\n            return (PIX *)ERROR_PTR(\"calloc fail for tiffdata\", procName, NULL);\n        }\n        if (!TIFFReadRGBAImageOriented(tif, w, h, (uint32 *)tiffdata,\n                                       ORIENTATION_TOPLEFT, 0)) {\n            FREE(tiffdata);\n            pixDestroy(\u0026pix);\n            return (PIX *)ERROR_PTR(\"failed to read tiffdata\", procName, NULL);\n        }\n\n        line = pixGetData(pix);\n        for (i = 0 ; i \u003c h ; i++, line += wpl) {\n            for (j = 0, k = 0, ppixel = line; j \u003c w; j++) {\n                    /* TIFFGet* are macros */\n                tiffword = tiffdata[i * w + j];\n                rval = TIFFGetR(tiffword);\n                gval = TIFFGetG(tiffword);\n                bval = TIFFGetB(tiffword);\n                composeRGBPixel(rval, gval, bval, ppixel);\n                ppixel++;\n            } \n        }\n        FREE(tiffdata);\n    }\n\n    if (tiffGetResolution(tif, \u0026xres, \u0026yres)) {\n        pixSetXRes(pix, xres);\n        pixSetYRes(pix, yres);\n    }\n\n        /* Find and save the compression type */\n    TIFFGetFieldDefaulted(tif, TIFFTAG_COMPRESSION, \u0026tiffcomp);\n    comptype = getTiffCompressedFormat(tiffcomp);\n    pixSetInputFormat(pix, comptype);\n\n    if (TIFFGetField(tif, TIFFTAG_COLORMAP, \u0026redmap, \u0026greenmap, \u0026bluemap)) {\n            /* Save the colormap as a pix cmap.  Because the\n             * tiff colormap components are 16 bit unsigned,\n             * and go from black (0) to white (0xffff), the\n             * the pix cmap takes the most significant byte. */\n        if ((cmap = pixcmapCreate(bps)) == NULL) {\n            pixDestroy(\u0026pix);\n            return (PIX *)ERROR_PTR(\"cmap not made\", procName, NULL);\n        }\n        ncolors = 1 \u003c\u003c bps;\n        for (i = 0; i \u003c ncolors; i++)\n            pixcmapAddColor(cmap, redmap[i] \u003e\u003e 8, greenmap[i] \u003e\u003e 8,\n                            bluemap[i] \u003e\u003e 8);\n        pixSetColormap(pix, cmap);\n    }\n    else {   /* No colormap: check photometry and invert if necessary */\n        if (!TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, \u0026photometry)) {\n                /* Guess default photometry setting.  Assume min_is_white\n                 * if compressed 1 bpp; min_is_black otherwise. */\n            if (tiffcomp == COMPRESSION_CCITTFAX3 ||\n                tiffcomp == COMPRESSION_CCITTFAX4 ||\n                tiffcomp == COMPRESSION_CCITTRLE ||\n                tiffcomp == COMPRESSION_CCITTRLEW) {\n                photometry = PHOTOMETRIC_MINISWHITE;\n            }\n            else\n                photometry = PHOTOMETRIC_MINISBLACK;\n        }\n        if ((d == 1 \u0026\u0026 photometry == PHOTOMETRIC_MINISBLACK) ||\n            (d == 8 \u0026\u0026 photometry == PHOTOMETRIC_MINISWHITE))\n            pixInvert(pix, pix);\n    }\n\n    if (TIFFGetField(tif, TIFFTAG_ORIENTATION, \u0026orientation)) {\n        if (orientation \u003e= 1 \u0026\u0026 orientation \u003c= 8) {\n            struct tiff_transform *transform =\n              \u0026tiff_orientation_transforms[orientation - 1];\n            if (transform-\u003evflip) pixFlipTB(pix, pix);\n            if (transform-\u003ehflip) pixFlipLR(pix, pix);\n            if (transform-\u003erotate) {\n                PIX *oldpix = pix;\n                pix = pixRotate90(oldpix, transform-\u003erotate);\n                pixDestroy(\u0026oldpix);\n            }\n        }\n    }\n\n    return pix;\n}\n\n\n/*--------------------------------------------------------------*\n *                       Writing to file                        *\n *--------------------------------------------------------------*/\n/*! \n *  pixWriteTiff()\n *\n *      Input:  filename (to write to)\n *              pix\n *              comptype (IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS,\n *                        IFF_TIFF_G3, IFF_TIFF_G4,\n *                        IFF_TIFF_LZW, IFF_TIFF_ZIP)\n *              modestring (\"a\" or \"w\")\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) For multi-page tiff, write the first pix with mode \"w\" and\n *          all subsequent pix with mode \"a\".\n */\nl_int32\npixWriteTiff(const char  *filename,\n             PIX         *pix,\n             l_int32      comptype,\n             const char  *modestring)\n{\n    return pixWriteTiffCustom(filename, pix, comptype, modestring,\n                              NULL, NULL, NULL, NULL);\n}\n\n\n/*! \n *  pixWriteTiffCustom()\n *\n *      Input:  filename (to write to)\n *              pix\n *              comptype (IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS,\n *                        IFF_TIFF_G3, IFF_TIFF_G4)\n *                        IFF_TIFF_LZW, IFF_TIFF_ZIP)\n *              modestring (\"a\" or \"w\")\n *              natags (\u003coptional\u003e NUMA of custom tiff tags)\n *              savals (\u003coptional\u003e SARRAY of values)\n *              satypes (\u003coptional\u003e SARRAY of types)\n *              nasizes (\u003coptional\u003e NUMA of sizes)\n *      Return: 0 if OK, 1 on error\n *\n *  Usage:\n *      (1) This writes a page image to a tiff file, with optional\n *          extra tags defined in tiff.h\n *      (2) For multi-page tiff, write the first pix with mode \"w\" and\n *          all subsequent pix with mode \"a\".\n *      (3) For the custom tiff tags:\n *          (a) The three arrays {natags, savals, satypes} must all be\n *              either NULL or defined and of equal size.\n *          (b) If they are defined, the tags are an array of integers,\n *              the vals are an array of values in string format, and\n *              the types are an array of types in string format. \n *          (c) All valid tags are definined in tiff.h.\n *          (d) The types allowed are the set of strings:\n *                \"char*\"\n *                \"l_uint8*\"\n *                \"l_uint16\"\n *                \"l_uint32\"\n *                \"l_int32\"\n *                \"l_float64\"\n *                \"l_uint16-l_uint16\" (note the dash; use it between the\n *                                    two l_uint16 vals in the val string)\n *              Of these, \"char*\" and \"l_uint16\" are the most commonly used.\n *          (e) The last array, nasizes, is also optional.  It is for\n *              tags that take an array of bytes for a value, a number of\n *              elements in the array, and a type that is either \"char*\"\n *              or \"l_uint8*\" (probably either will work). \n *              Use NULL if there are no such tags.\n *          (f) VERY IMPORTANT: if there are any tags that require the\n *              extra size value, stored in nasizes, they must be\n *              written first!\n */\nl_int32\npixWriteTiffCustom(const char  *filename,\n                   PIX         *pix,\n                   l_int32      comptype,\n                   const char  *modestring,\n                   NUMA        *natags,\n                   SARRAY      *savals,\n                   SARRAY      *satypes,\n                   NUMA        *nasizes)\n{\nl_int32  ret;\nTIFF    *tif;\n\n    PROCNAME(\"pixWriteTiffCustom\");\n\n    if (!filename)\n        return ERROR_INT(\"filename not defined\", procName, 1);\n    if (!pix)\n        return ERROR_INT(\"pix not defined\", procName, 1);\n\n    if ((tif = TIFFOpen(filename, modestring)) == NULL)\n        return ERROR_INT(\"tif not opened\", procName, 1);\n    ret = pixWriteToTiffStream(tif, pix, comptype, natags, savals,\n                               satypes, nasizes);\n    TIFFClose(tif);\n\n    return ret;\n}\n\n\n/*--------------------------------------------------------------*\n *                       Writing to stream                      *\n *--------------------------------------------------------------*/\n/*!\n *  pixWriteStreamTiff()\n *\n *      Input:  stream (opened for append or write)\n *              pix\n *              comptype (IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS,\n *                        IFF_TIFF_G3, IFF_TIFF_G4,\n *                        IFF_TIFF_LZW, IFF_TIFF_ZIP)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) For images with bpp \u003e 1, this resets the comptype, if\n *          necessary, to write uncompressed data.\n *      (2) G3 and G4 are only defined for 1 bpp.\n *      (3) We only allow PACKBITS for bpp = 1, because for bpp \u003e 1\n *          it typically expands images that are not synthetically generated.\n *      (4) G4 compression is typically about twice as good as G3.\n *          G4 is excellent for binary compression of text/line-art,\n *          but terrible for halftones and dithered patterns.  (In\n *          fact, G4 on halftones can give a file that is larger\n *          than uncompressed!)  If a binary image has dithered\n *          regions, it is usually better to compress with png.\n */\nl_int32\npixWriteStreamTiff(FILE    *fp,\n                   PIX     *pix,\n                   l_int32  comptype)\n{\nTIFF  *tif;\n\n    PROCNAME(\"pixWriteStreamTiff\");\n\n    if (!fp)\n        return ERROR_INT(\"stream not defined\", procName, 1 );\n    if (!pix)\n        return ERROR_INT(\"pix not defined\", procName, 1 );\n\n    if (pixGetDepth(pix) != 1 \u0026\u0026 comptype != IFF_TIFF \u0026\u0026\n        comptype != IFF_TIFF_LZW \u0026\u0026 comptype != IFF_TIFF_ZIP) {\n        L_WARNING(\"invalid compression type for image with bpp \u003e 1\", procName);\n        comptype = IFF_TIFF_ZIP;\n    }\n\n    if ((tif = fopenTiff(fp, \"w\")) == NULL)\n        return ERROR_INT(\"tif not opened\", procName, 1);\n\n    if (pixWriteToTiffStream(tif, pix, comptype, NULL, NULL, NULL, NULL)) {\n        TIFFCleanup(tif);\n        return ERROR_INT(\"tif write error\", procName, 1);\n    }\n    \n    TIFFCleanup(tif);\n    return 0;\n}\n\n\n/*!\n *  pixWriteToTiffStream()\n *\n *      Input:  tif (data structure, opened to a file)\n *              pix\n *              comptype  (IFF_TIFF: for any image; no compression\n *                         IFF_TIFF_RLE, IFF_TIFF_PACKBITS: for 1 bpp only\n *                         IFF_TIFF_G4 and IFF_TIFF_G3: for 1 bpp only\n *                         IFF_TIFF_LZW, IFF_TIFF_ZIP: for any image\n *              natags (\u003coptional\u003e NUMA of custom tiff tags)\n *              savals (\u003coptional\u003e SARRAY of values)\n *              satypes (\u003coptional\u003e SARRAY of types)\n *              nasizes (\u003coptional\u003e NUMA of sizes)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) This static function should only be called through higher\n *          level functions in this file; namely, pixWriteTiffCustom(),\n *          pixWriteTiff(), pixWriteStreamTiff(), pixWriteMemTiff()\n *          and pixWriteMemTiffCustom().\n *      (2) We only allow PACKBITS for bpp = 1, because for bpp \u003e 1\n *          it typically expands images that are not synthetically generated.\n *      (3) See pixWriteTiffCustom() for details on how to use\n *          the last four parameters for customized tiff tags.\n *      (4) The only valid pixel depths in leptonica are 1, 2, 4, 8, 16\n *          and 32.  However, it is possible, and in some cases desirable,\n *          to write out a tiff file using an rgb pix that has 24 bpp.\n *          This can be created by appending the raster data for a 24 bpp\n *          image (with proper scanline padding) directly to a 24 bpp\n *          pix that was created without a data array.  See note in\n *          pixWriteStreamPng() for an example.\n */\nstatic l_int32\npixWriteToTiffStream(TIFF    *tif,\n                     PIX     *pix,\n                     l_int32  comptype,\n                     NUMA    *natags,\n                     SARRAY  *savals,\n                     SARRAY  *satypes,\n                     NUMA    *nasizes)\n{\nl_uint8   *linebuf, *data;\nl_uint16   redmap[256], greenmap[256], bluemap[256];\nl_int32    w, h, d, i, j, k, wpl, bpl, tiffbpl, ncolors, cmapsize;\nl_int32   *rmap, *gmap, *bmap;\nl_uint32   xres, yres;\nl_uint32  *line, *ppixel;\nPIX       *pixt;\nPIXCMAP   *cmap;\nchar      *text;\n\n    PROCNAME(\"pixWriteToTiffStream\");\n\n    if (!tif)\n        return ERROR_INT(\"tif stream not defined\", procName, 1);\n    if (!pix)\n        return ERROR_INT( \"pix not defined\", procName, 1 );\n\n    pixGetDimensions(pix, \u0026w, \u0026h, \u0026d);\n    xres = pixGetXRes(pix);\n    yres = pixGetYRes(pix);\n    if (xres == 0) xres = DEFAULT_RESOLUTION;\n    if (yres == 0) yres = DEFAULT_RESOLUTION;\n\n        /* ------------------ Write out the header -------------  */\n    TIFFSetField(tif, TIFFTAG_RESOLUTIONUNIT, (l_uint32)RESUNIT_INCH);\n    TIFFSetField(tif, TIFFTAG_XRESOLUTION, (l_float64)xres);\n    TIFFSetField(tif, TIFFTAG_YRESOLUTION, (l_float64)yres);\n\n    TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, (l_uint32)w);\n    TIFFSetField(tif, TIFFTAG_IMAGELENGTH, (l_uint32)h);\n    TIFFSetField(tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);\n\n    if ((text = pixGetText(pix)) != NULL)\n        TIFFSetField(tif, TIFFTAG_IMAGEDESCRIPTION, text);\n        \n    if (d == 1)\n        TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISWHITE);\n    else if (d == 32 || d == 24) {\n        TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB);\n        TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE,\n                       (l_uint16)8, (l_uint16)8, (l_uint16)8);\n        TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, (l_uint16)3);\n    }\n    else if ((cmap = pixGetColormap(pix)) == NULL)\n        TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISBLACK);\n    else {  /* Save colormap in the tiff; not more than 256 colors */\n        pixcmapToArrays(cmap, \u0026rmap, \u0026gmap, \u0026bmap);\n        ncolors = pixcmapGetCount(cmap);\n        ncolors = L_MIN(256, ncolors);  /* max 256 */\n        cmapsize = 1 \u003c\u003c d;\n        cmapsize = L_MIN(256, cmapsize);  /* power of 2; max 256 */\n        if (ncolors \u003e cmapsize) {\n            L_WARNING(\"too many colors in cmap for tiff; truncating\", procName);\n            ncolors = cmapsize;\n        }\n        for (i = 0; i \u003c ncolors; i++) {\n            redmap[i] = (rmap[i] \u003c\u003c 8) | rmap[i];\n            greenmap[i] = (gmap[i] \u003c\u003c 8) | gmap[i];\n            bluemap[i] = (bmap[i] \u003c\u003c 8) | bmap[i];\n        }\n        for (i = ncolors; i \u003c cmapsize; i++)  /* init, even though not used */\n            redmap[i] = greenmap[i] = bluemap[i] = 0;\n        FREE(rmap);\n        FREE(gmap);\n        FREE(bmap);\n\n        TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_PALETTE);\n        TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, (l_uint16)1);\n        TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, (l_uint16)d);\n        TIFFSetField(tif, TIFFTAG_COLORMAP, redmap, greenmap, bluemap);\n    }\n\n    if (d != 24 \u0026\u0026 d != 32) {\n        TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, (l_uint16)d);\n        TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, (l_uint16)1);\n    }\n\n    TIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG); \n    if (comptype == IFF_TIFF)  /* no compression */\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_NONE);\n    else if (comptype == IFF_TIFF_G4)\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_CCITTFAX4);\n    else if (comptype == IFF_TIFF_G3)\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_CCITTFAX3);\n    else if (comptype == IFF_TIFF_RLE)\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_CCITTRLE);\n    else if (comptype == IFF_TIFF_PACKBITS)\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_PACKBITS);\n    else if (comptype == IFF_TIFF_LZW)\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_LZW);\n    else if (comptype == IFF_TIFF_ZIP)\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_ADOBE_DEFLATE);\n    else { \n        L_WARNING(\"unknown tiff compression; using none\", procName);\n        TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_NONE);\n    }\n\n        /* This is a no-op if arrays are NULL */\n    writeCustomTiffTags(tif, natags, savals, satypes, nasizes);\n\n        /* ------------- Write out the image data -------------  */\n    tiffbpl = TIFFScanlineSize(tif);\n    wpl = pixGetWpl(pix);\n    bpl = 4 * wpl;\n    if (tiffbpl \u003e bpl)\n        fprintf(stderr, \"Big trouble: tiffbpl = %d, bpl = %d\\n\", tiffbpl, bpl);\n    if ((linebuf = (l_uint8 *)CALLOC(1, bpl)) == NULL)\n        return ERROR_INT(\"calloc fail for linebuf\", procName, 1);\n\n        /* Use single strip for image */\n    TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, h);\n\n    if (d != 24 \u0026\u0026 d != 32) {\n        if (d == 16)\n            pixt = pixEndianTwoByteSwapNew(pix);\n        else\n            pixt = pixEndianByteSwapNew(pix);\n        data = (l_uint8 *)pixGetData(pixt);\n        for (i = 0; i \u003c h; i++, data += bpl) {\n            memcpy((char *)linebuf, (char *)data, tiffbpl);\n            if (TIFFWriteScanline(tif, linebuf, i, 0) \u003c 0)\n                break;\n        }\n        pixDestroy(\u0026pixt);\n    }\n    else if (d == 24) {  /* See note 4 above: special case of 24 bpp rgb */\n        for (i = 0; i \u003c h; i++) {\n            line = pixGetData(pix) + i * wpl;\n            if (TIFFWriteScanline(tif, (l_uint8 *)line, i, 0) \u003c 0)\n                break;\n        }\n    }\n    else {  /* standard 32 bpp rgb */\n        for (i = 0; i \u003c h; i++) {\n            line = pixGetData(pix) + i * wpl;\n            for (j = 0, k = 0, ppixel = line; j \u003c w; j++) {\n                linebuf[k++] = GET_DATA_BYTE(ppixel, COLOR_RED);\n                linebuf[k++] = GET_DATA_BYTE(ppixel, COLOR_GREEN);\n                linebuf[k++] = GET_DATA_BYTE(ppixel, COLOR_BLUE);\n                ppixel++;\n            } \n            if (TIFFWriteScanline(tif, linebuf, i, 0) \u003c 0)\n                break;\n        }\n    }\n\n/*    TIFFWriteDirectory(tif); */\n    FREE(linebuf);\n\n    return 0;\n}\n\n\n/*!\n *  writeCustomTiffTags()\n *\n *      Input:  tif\n *              natags (\u003coptional\u003e NUMA of custom tiff tags)\n *              savals (\u003coptional\u003e SARRAY of values)\n *              satypes (\u003coptional\u003e SARRAY of types)\n *              nasizes (\u003coptional\u003e NUMA of sizes)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes: \n *      (1) This static function should be called indirectly through\n *          higher level functions, such as pixWriteTiffCustom(),\n *          which call pixWriteToTiffStream().  See details in\n *          pixWriteTiffCustom() for using the 4 input arrays.\n *      (2) This is a no-op if the first 3 arrays are all NULL.\n *      (3) Otherwise, the first 3 arrays must be defined and all\n *          of equal size.\n *      (4) The fourth array is always optional.\n *      (5) The most commonly used types are \"char*\" and \"u_int16\".\n *          See tiff.h for a full listing of the tiff tags. \n *          Note that many of these tags, in particular the bit tags,\n *          are intended to be private, and cannot be set by this function.\n *          Examples are the STRIPOFFSETS and STRIPBYTECOUNTS tags,\n *          which are bit tags that are automatically set in the header,\n *          and can be extracted using tiffdump.\n */\nstatic l_int32\nwriteCustomTiffTags(TIFF    *tif,\n                    NUMA    *natags,\n                    SARRAY  *savals,\n                    SARRAY  *satypes,\n                    NUMA    *nasizes)\n{\nchar      *sval, *type;\nl_int32    i, n, ns, size, tagval, val;\nl_float64  dval;\nl_uint32   uval, uval2;\n\n    PROCNAME(\"writeCustomTiffTags\");\n\n    if (!tif)\n        return ERROR_INT(\"tif stream not defined\", procName, 1);\n    if (!natags \u0026\u0026 !savals \u0026\u0026 !satypes)\n        return 0;\n    if (!natags || !savals || !satypes)\n        return ERROR_INT(\"not all arrays defined\", procName, 1);\n    n = numaGetCount(natags);\n    if ((sarrayGetCount(savals) != n) || (sarrayGetCount(satypes) != n))\n        return ERROR_INT(\"not all sa the same size\", procName, 1);\n\n        /* The sized arrays (4 args to TIFFSetField) are written first */\n    if (nasizes) {\n        ns = numaGetCount(nasizes);\n        if (ns \u003e n)\n            return ERROR_INT(\"too many 4-arg tag calls\", procName, 1);\n        for (i = 0; i \u003c ns; i++) {\n            numaGetIValue(natags, i, \u0026tagval);\n            sval = sarrayGetString(savals, i, 0);\n            type = sarrayGetString(satypes, i, 0);\n            numaGetIValue(nasizes, i, \u0026size);\n            if (strcmp(type, \"char*\") \u0026\u0026 strcmp(type, \"l_uint8*\"))\n                L_WARNING(\"array type not char* or l_uint8*; ignore\", procName);\n            TIFFSetField(tif, tagval, size, sval);\n        }\n    }\n    else\n        ns = 0;\n\n        /* The typical tags (3 args to TIFFSetField) are now written */\n    for (i = ns; i \u003c n; i++) {\n        numaGetIValue(natags, i, \u0026tagval);\n        sval = sarrayGetString(savals, i, 0);\n        type = sarrayGetString(satypes, i, 0);\n        if (!strcmp(type, \"char*\")) {\n            TIFFSetField(tif, tagval, sval);\n        }\n        else if (!strcmp(type, \"l_uint16\")) {\n            if (sscanf(sval, \"%u\", \u0026uval) == 1) {\n                TIFFSetField(tif, tagval, (l_uint16)uval);\n            }\n            else {\n                fprintf(stderr, \"val %s not of type %s\\n\", sval, type);\n                return ERROR_INT(\"custom tag(s) not written\", procName, 1);\n            }\n        }\n        else if (!strcmp(type, \"l_uint32\")) {\n            if (sscanf(sval, \"%u\", \u0026uval) == 1) {\n                TIFFSetField(tif, tagval, uval);\n            }\n            else {\n                fprintf(stderr, \"val %s not of type %s\\n\", sval, type);\n                return ERROR_INT(\"custom tag(s) not written\", procName, 1);\n            }\n        }\n        else if (!strcmp(type, \"l_int32\")) {\n            if (sscanf(sval, \"%d\", \u0026val) == 1) {\n                TIFFSetField(tif, tagval, val);\n            }\n            else {\n                fprintf(stderr, \"val %s not of type %s\\n\", sval, type);\n                return ERROR_INT(\"custom tag(s) not written\", procName, 1);\n            }\n        }\n        else if (!strcmp(type, \"l_float64\")) {\n            if (sscanf(sval, \"%lf\", \u0026dval) == 1) {\n                TIFFSetField(tif, tagval, dval);\n            }\n            else {\n                fprintf(stderr, \"val %s not of type %s\\n\", sval, type);\n                return ERROR_INT(\"custom tag(s) not written\", procName, 1);\n            }\n        }\n        else if (!strcmp(type, \"l_uint16-l_uint16\")) {\n            if (sscanf(sval, \"%u-%u\", \u0026uval, \u0026uval2) == 2) {\n                TIFFSetField(tif, tagval, (l_uint16)uval, (l_uint16)uval2);\n            }\n            else {\n                fprintf(stderr, \"val %s not of type %s\\n\", sval, type);\n                return ERROR_INT(\"custom tag(s) not written\", procName, 1);\n            }\n        }\n        else\n            return ERROR_INT(\"unknown type; tag(s) not written\", procName, 1);\n    }\n    return 0;\n}\n    \n\n/*--------------------------------------------------------------*\n *               Reading and writing multipage tiff             *\n *--------------------------------------------------------------*/\n/*\n *  pixaReadMultipageTiff()\n *\n *      Input:  filename (input tiff file)\n *      Return: pixa (of page images), or null on error\n */\nPIXA *\npixaReadMultipageTiff(const char  *filename)\n{\nl_int32  i, npages;\nFILE    *fp;\nPIX     *pix;\nPIXA    *pixa;\n\n    PROCNAME(\"pixaReadMultipageTiff\");\n\n    if (!filename)\n        return (PIXA *)ERROR_PTR(\"filename not defined\", procName, NULL);\n\n    if ((fp = fopen(filename, \"rb\")) == NULL)\n        return (PIXA *)ERROR_PTR(\"stream not opened\", procName, NULL);\n    if (fileFormatIsTiff(fp)) {\n        tiffGetCount(fp, \u0026npages);\n        L_INFO_INT(\" Tiff: %d pages\\n\", procName, npages);\n    }\n    else\n        return (PIXA *)ERROR_PTR(\"file not tiff\", procName, NULL);\n    fclose(fp);\n\n    pixa = pixaCreate(npages);\n    for (i = 0; i \u003c npages; i++) {\n        pix = pixReadTiff(filename, i);\n        if (!pix) {\n            L_WARNING_INT(\"pix not read for page %d\", procName, i);\n            continue;\n        }\n        pixaAddPix(pixa, pix, L_INSERT);\n    }\n\n    return pixa;\n}\n\n\n/*\n *  writeMultipageTiff()\n *\n *      Input:  dirin (input directory)\n *              substr (\u003coptional\u003e substring filter on filenames; can be NULL)\n *              fileout (output ps file)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) This writes a set of image files in a directory out\n *          as a multipage tiff file.  The images can be in any\n *          initial file format.\n *      (2) Images with a colormap have the colormap removed before\n *          re-encoding as tiff.\n *      (3) All images are encoded losslessly.  Those with 1 bpp are\n *          encoded 'g4'.  The rest are encoded as 'zip' (flate encoding).\n *          Because it is lossless, this is an expensive method for\n *          saving most rgb images.\n */\nl_int32\nwriteMultipageTiff(const char  *dirin,\n                   const char  *substr,\n                   const char  *fileout)\n{\nSARRAY  *sa;\n\n    PROCNAME(\"writeMultipageTiff\");\n\n    if (!dirin)\n        return ERROR_INT(\"dirin not defined\", procName, 1);\n    if (!fileout)\n        return ERROR_INT(\"fileout not defined\", procName, 1);\n\n        /* Get all filtered and sorted full pathnames. */\n    sa = getSortedPathnamesInDirectory(dirin, substr, 0, 0);\n\n        /* Generate the tiff file */\n    writeMultipageTiffSA(sa, fileout);\n    sarrayDestroy(\u0026sa);\n    return 0;\n}\n\n\n/*\n *  writeMultipageTiffSA()\n *\n *      Input:  sarray (of full path names)\n *              fileout (output ps file)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) See writeMultipageTiff()\n */\nl_int32\nwriteMultipageTiffSA(SARRAY      *sa,\n                     const char  *fileout)\n{\nchar        *fname;\nconst char  *op;\nl_int32      i, nfiles, firstfile, format;\nFILE        *fp;\nPIX         *pix, *pixt;\n\n    PROCNAME(\"writeMultipageTiffSA\");\n\n    if (!sa)\n        return ERROR_INT(\"sa not defined\", procName, 1);\n    if (!fileout)\n        return ERROR_INT(\"fileout not defined\", procName, 1);\n\n    nfiles = sarrayGetCount(sa);\n    firstfile = TRUE;\n    for (i = 0; i \u003c nfiles; i++) {\n        op = (firstfile) ? \"w\" : \"a\";\n        fname = sarrayGetString(sa, i, L_NOCOPY);\n        if ((fp = fopen(fname, \"rb\")) == NULL)\n            continue;\n        findFileFormat(fp, \u0026format);\n        fclose(fp);\n        if (format == IFF_UNKNOWN) {\n            L_INFO_STRING(\"format unknown for file: %s\", procName, fname);\n            continue;\n        }\n\n        if ((pix = pixRead(fname)) == NULL) {\n            L_WARNING_STRING(\"pix not made for file: %s\", procName, fname);\n            continue;\n        }\n        if (pixGetDepth(pix) == 1)\n            pixWriteTiff(fileout, pix, IFF_TIFF_G4, op);\n        else {\n            if (pixGetColormap(pix))\n                pixt = pixRemoveColormap(pix, REMOVE_CMAP_BASED_ON_SRC);\n            else\n                pixt = pixClone(pix);\n            pixWriteTiff(fileout, pixt, IFF_TIFF_ZIP, op);\n            pixDestroy(\u0026pixt);\n        }\n        firstfile = FALSE;\n        pixDestroy(\u0026pix);\n    }\n\n    return 0;\n}\n        \n\n/*--------------------------------------------------------------*\n *                    Print info to stream                      *\n *--------------------------------------------------------------*/\n/*\n *  fprintTiffInfo()\n * \n *      Input:  stream (for output of tag data)\n *              tiffile (input)\n *      Return: 0 if OK; 1 on error\n */\nl_int32\nfprintTiffInfo(FILE        *fpout,\n               const char  *tiffile)\n{\nTIFF  *tif;\n\n    PROCNAME(\"fprintTiffInfo\");\n\n    if (!tiffile)\n        return ERROR_INT(\"tiffile not defined\", procName, 1);\n    if (!fpout)\n        return ERROR_INT(\"stream out not defined\", procName, 1);\n\n    if ((tif = TIFFOpen(tiffile, \"r\")) == NULL)\n        return ERROR_INT(\"tif not open for read\", procName, 1);\n\n    TIFFPrintDirectory(tif, fpout, 0);\n    TIFFClose(tif);\n\n    return 0;\n}\n\n\n/*--------------------------------------------------------------*\n *                   Get count from stream                      *\n *--------------------------------------------------------------*/\n/*\n *  tiffGetCount()\n * \n *      Input:  stream (opened for read)\n *              \u0026n (\u003creturn\u003e number of images)\n *      Return: 0 if OK; 1 on error\n */\nl_int32\ntiffGetCount(FILE     *fp,\n             l_int32  *pn)\n{\nl_int32  i;\nTIFF    *tif;\n\n    PROCNAME(\"tiffGetCount\");\n\n    if (!fp)\n        return ERROR_INT(\"stream not defined\", procName, 1);\n    if (!pn)\n        return ERROR_INT(\"\u0026n not defined\", procName, 1);\n    *pn = 0;\n\n    if ((tif = fopenTiff(fp, \"r\")) == NULL)\n        return ERROR_INT(\"tif not open for read\", procName, 1);\n\n    for (i = 1; i \u003c MAX_PAGES_IN_TIFF_FILE; i++) {\n        if (TIFFReadDirectory(tif) == 0)\n            break;\n    }\n    *pn = i;\n    TIFFCleanup(tif);\n    return 0;\n}\n\n\n/*--------------------------------------------------------------*\n *                   Get resolution from tif                    *\n *--------------------------------------------------------------*/\n/*\n *  tiffGetResolution()\n * \n *      Input:  tiff stream (opened for read)\n *              \u0026xres, \u0026yres (\u003creturn\u003e resolution in ppi)\n *      Return: 1 if OK; 0 on error   (nonstandard)\n *\n *  Notes:\n *      (1) If neither resolution field is set, this is not an error;\n *          the returned resolution values are 0 (designating 'unknown').\n */\nstatic l_int32\ntiffGetResolution(TIFF      *tif,\n                  l_uint32  *pxres,\n                  l_uint32  *pyres)\n{\nl_uint16   resunit;\nl_int32    foundxres, foundyres;\nl_float32  fxres, fyres;\n\n    PROCNAME(\"tiffGetResolution\");\n\n    if (!tif)\n        return ERROR_INT(\"tif not opened\", procName, 0);\n    if (!pxres || !pyres)\n        return ERROR_INT(\"\u0026xres and \u0026yres not both defined\", procName, 0);\n    *pxres = *pyres = 0;\n\n    TIFFGetFieldDefaulted(tif, TIFFTAG_RESOLUTIONUNIT, \u0026resunit);\n    foundxres = TIFFGetField(tif, TIFFTAG_XRESOLUTION, \u0026fxres);\n    foundyres = TIFFGetField(tif, TIFFTAG_YRESOLUTION, \u0026fyres);\n    if (!foundxres \u0026\u0026 !foundyres) return 1;\n    if (!foundxres \u0026\u0026 foundyres)\n        fxres = fyres;\n    else if (foundxres \u0026\u0026 !foundyres)\n        fyres = fxres;\n\n    if (resunit == RESUNIT_CENTIMETER) {  /* convert to ppi */\n        *pxres = (l_uint32)(2.54 * fxres + 0.5);\n        *pyres = (l_uint32)(2.54 * fyres + 0.5);\n    }\n    else {\n        *pxres = (l_uint32)fxres;\n        *pyres = (l_uint32)fyres;\n    }\n\n    return 1;\n}\n\n\n/*--------------------------------------------------------------*\n *              Get some tiff header information                *\n *--------------------------------------------------------------*/\n/*!\n *  readHeaderTiff()\n *\n *      Input:  filename\n *              n (page image number: 0-based)\n *              \u0026width (\u003creturn\u003e)\n *              \u0026height (\u003creturn\u003e)\n *              \u0026bps (\u003creturn\u003e bits per sample -- 1, 2, 4 or 8)\n *              \u0026spp (\u003creturn\u003e; samples per pixel -- 1 or 3)\n *              \u0026res (\u003coptional return\u003e; resolution in x dir; NULL to ignore)\n *              \u0026cmap (\u003coptional return\u003e; colormap exists; input NULL to ignore)\n *              \u0026format (\u003coptional return\u003e; tiff format; input NULL to ignore)\n *      Return: 0 if OK, 1 on error\n * \n *  Notes:\n *      (1) If there is a colormap, cmap is returned as 1; else 0.\n *      (2) If @n is equal to or greater than the number of images, returns 1.\n */\nl_int32\nreadHeaderTiff(const char *filename,\n               l_int32     n,\n               l_int32    *pwidth,\n               l_int32    *pheight,\n               l_int32    *pbps,\n               l_int32    *pspp,\n               l_int32    *pres,\n               l_int32    *pcmap,\n               l_int32    *pformat)\n{\nl_int32  ret;\nFILE    *fp;\n\n    PROCNAME(\"readHeaderTiff\");\n\n    if (!filename)\n        return ERROR_INT(\"filename not defined\", procName, 1);\n    if (!pwidth || !pheight || !pbps || !pspp)\n        return ERROR_INT(\"input ptr(s) not all defined\", procName, 1);\n    *pwidth = *pheight = *pbps = *pspp = 0;\n    if (pres) *pres = 0;\n    if (pcmap) *pcmap = 0;\n\n    if ((fp = fopenReadStream(filename)) == NULL)\n        return ERROR_INT(\"image file not found\", procName, 1);\n    ret = freadHeaderTiff(fp, n, pwidth, pheight, pbps, pspp,\n                          pres, pcmap, pformat);\n    fclose(fp);\n    return ret;\n}\n\n\n/*!\n *  freadHeaderTiff()\n *\n *      Input:  stream\n *              n (page image number: 0-based)\n *              \u0026width (\u003creturn\u003e)\n *              \u0026height (\u003creturn\u003e)\n *              \u0026bps (\u003creturn\u003e bits per sample -- 1, 2, 4 or 8)\n *              \u0026spp (\u003creturn\u003e; samples per pixel -- 1 or 3)\n *              \u0026res (\u003coptional return\u003e; resolution in x dir; NULL to ignore)\n *              \u0026cmap (\u003coptional return\u003e; colormap exists; input NULL to ignore)\n *              \u0026format (\u003coptional return\u003e; tiff format; input NULL to ignore)\n *      Return: 0 if OK, 1 on error\n * \n *  Notes:\n *      (1) If there is a colormap, cmap is returned as 1; else 0.\n *      (2) If @n is equal to or greater than the number of images, returns 1.\n */\nl_int32\nfreadHeaderTiff(FILE     *fp,\n                l_int32   n,\n                l_int32  *pwidth,\n                l_int32  *pheight,\n                l_int32  *pbps,\n                l_int32  *pspp,\n                l_int32  *pres,\n                l_int32  *pcmap,\n                l_int32  *pformat)\n{\nl_int32  i, ret, format;\nTIFF    *tif;\n\n    PROCNAME(\"freadHeaderTiff\");\n\n    if (!fp)\n        return ERROR_INT(\"stream not defined\", procName, 1);\n    if (n \u003c 0)\n        return ERROR_INT(\"image index must be \u003e= 0\", procName, 1);\n    if (!pwidth || !pheight || !pbps || !pspp)\n        return ERROR_INT(\"input ptr(s) not all defined\", procName, 1);\n    *pwidth = *pheight = *pbps = *pspp = 0;\n    if (pres) *pres = 0;\n    if (pcmap) *pcmap = 0;\n    if (pformat) *pformat = 0;\n\n    findFileFormat(fp, \u0026format);\n    if (format != IFF_TIFF \u0026\u0026\n        format != IFF_TIFF_G3 \u0026\u0026 format != IFF_TIFF_G4 \u0026\u0026\n        format != IFF_TIFF_RLE \u0026\u0026 format != IFF_TIFF_PACKBITS \u0026\u0026\n        format != IFF_TIFF_LZW \u0026\u0026 format != IFF_TIFF_ZIP)\n        return ERROR_INT(\"file not tiff format\", procName, 1);\n\n    if ((tif = fopenTiff(fp, \"r\")) == NULL)\n        return ERROR_INT(\"tif not open for read\", procName, 1);\n\n    for (i = 0; i \u003c n; i++) {\n        if (TIFFReadDirectory(tif) == 0)\n            return ERROR_INT(\"image n not found in file\", procName, 1);\n    }\n\n    ret = tiffReadHeaderTiff(tif, pwidth, pheight, pbps, pspp,\n                             pres, pcmap, pformat);\n    TIFFCleanup(tif);\n    return ret;\n}\n\n\n/*!\n *  readHeaderMemTiff()\n *\n *      Input:  cdata (const; tiff-encoded)\n *              size (size of data)\n *              n (page image number: 0-based)\n *              \u0026width (\u003creturn\u003e)\n *              \u0026height (\u003creturn\u003e)\n *              \u0026bps (\u003creturn\u003e bits per sample -- 1, 2, 4 or 8)\n *              \u0026spp (\u003creturn\u003e; samples per pixel -- 1 or 3)\n *              \u0026res (\u003coptional return\u003e; resolution in x dir; NULL to ignore)\n *              \u0026cmap (\u003coptional return\u003e; colormap exists; input NULL to ignore)\n *              \u0026format (\u003coptional return\u003e; tiff format; input NULL to ignore)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) Use TIFFClose(); TIFFCleanup() doesn't free internal memstream.\n */\nl_int32\nreadHeaderMemTiff(const l_uint8  *cdata,\n                  size_t          size,\n                  l_int32         n,\n                  l_int32        *pwidth,\n                  l_int32        *pheight,\n                  l_int32        *pbps,\n                  l_int32        *pspp,\n                  l_int32        *pres,\n                  l_int32        *pcmap,\n                  l_int32        *pformat)\n{\nl_uint8  *data;\nl_int32   i, ret;\nTIFF     *tif;\n\n    PROCNAME(\"readHeaderMemTiff\");\n\n    if (!cdata)\n        return ERROR_INT(\"cdata not defined\", procName, 1);\n    if (!pwidth || !pheight || !pbps || !pspp)\n        return ERROR_INT(\"input ptr(s) not all defined\", procName, 1);\n    *pwidth = *pheight = *pbps = *pspp = 0;\n    if (pres) *pres = 0;\n    if (pcmap) *pcmap = 0;\n    if (pformat) *pformat = 0;\n    \n        /* Open a tiff stream to memory */\n    data = (l_uint8 *)cdata;  /* we're really not going to change this */\n    if ((tif = fopenTiffMemstream(\"tifferror\", \"r\", \u0026data, \u0026size)) == NULL)\n        return ERROR_INT(\"tiff stream not opened\", procName, 1);\n\n    for (i = 0; i \u003c n; i++) {\n        if (TIFFReadDirectory(tif) == 0) {\n            TIFFClose(tif);\n            return ERROR_INT(\"image n not found in file\", procName, 1);\n        }\n    }\n\n    ret = tiffReadHeaderTiff(tif, pwidth, pheight, pbps, pspp,\n                             pres, pcmap, pformat);\n    TIFFClose(tif);\n    return ret;\n}\n\n\n/*!\n *  tiffReadHeaderTiff()\n *\n *      Input:  tif\n *              \u0026width (\u003creturn\u003e)\n *              \u0026height (\u003creturn\u003e)\n *              \u0026bps (\u003creturn\u003e bits per sample -- 1, 2, 4 or 8)\n *              \u0026spp (\u003creturn\u003e; samples per pixel -- 1 or 3)\n *              \u0026res (\u003coptional return\u003e; resolution in x dir; NULL to ignore)\n *              \u0026cmap (\u003coptional return\u003e; cmap exists; input NULL to ignore)\n *              \u0026format (\u003coptional return\u003e; tiff format; input NULL to ignore)\n *      Return: 0 if OK, 1 on error\n */\nstatic l_int32\ntiffReadHeaderTiff(TIFF     *tif,\n                   l_int32  *pwidth,\n                   l_int32  *pheight,\n                   l_int32  *pbps,\n                   l_int32  *pspp,\n                   l_int32  *pres,\n                   l_int32  *pcmap,\n                   l_int32  *pformat)\n{\nl_uint16   tiffcomp;\nl_uint16   bps, spp;\nl_uint16  *rmap, *gmap, *bmap;\nl_uint32   w, h, xres, yres;\n\n    PROCNAME(\"tiffReadHeaderTiff\");\n\n    if (!tif)\n        return ERROR_INT(\"tif not opened\", procName, 1);\n\n    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, \u0026w);\n    *pwidth = w;\n    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, \u0026h);\n    *pheight = h;\n    TIFFGetFieldDefaulted(tif, TIFFTAG_BITSPERSAMPLE, \u0026bps);\n    *pbps = bps;\n    TIFFGetFieldDefaulted(tif, TIFFTAG_SAMPLESPERPIXEL, \u0026spp);\n    *pspp = spp;\n\n    if (pres) {\n        *pres = 300;  /* default ppi */\n        if (tiffGetResolution(tif, \u0026xres, \u0026yres))\n            *pres = (l_int32)xres;\n    }\n            \n    if (pcmap) {\n        *pcmap = 0;\n        if (TIFFGetField(tif, TIFFTAG_COLORMAP, \u0026rmap, \u0026gmap, \u0026bmap))\n            *pcmap = 1;\n    }\n\n    if (pformat) {\n        TIFFGetFieldDefaulted(tif, TIFFTAG_COMPRESSION, \u0026tiffcomp);\n        *pformat = getTiffCompressedFormat(tiffcomp);\n    }\n    return 0;\n}\n\n\n/*!\n *  findTiffCompression()\n *\n *      Input:  stream (must be rewound to BOF)\n *              \u0026comptype (\u003creturn\u003e compression type)\n *      Return: 0 if OK, 1 on error\n *\n *  Notes:\n *      (1) The returned compression type is that defined in \n *          the enum in imageio.h.  It is not the tiff flag value.\n *      (2) The compression type is initialized to IFF_UNKNOWN.\n *          If it is not one of the specified types, the returned\n *          type is IFF_TIFF, which indicates no compression.\n *      (3) When this function is called, the stream must be at BOF.\n *          If the opened stream is to be used again to read the\n *          file, it must be rewound to BOF after calling this function.\n */\nl_int32\nfindTiffCompression(FILE     *fp,\n                    l_int32  *pcomptype)\n{\nl_uint16  tiffcomp;\nTIFF     *tif;\n\n    PROCNAME(\"findTiffCompression\");\n\n    if (!pcomptype)\n        return ERROR_INT(\"\u0026comptype not defined\", procName, 1);\n    *pcomptype = IFF_UNKNOWN;  /* init */\n    if (!fp)\n        return ERROR_INT(\"stream not defined\", procName, 1);\n    \n    if ((tif = fopenTiff(fp, \"rb\")) == NULL)\n        return ERROR_INT(\"tif not opened\", procName, 1);\n    TIFFGetFieldDefaulted(tif, TIFFTAG_COMPRESSION, \u0026tiffcomp);\n    *pcomptype = getTiffCompressedFormat(tiffcomp);\n    TIFFCleanup(tif);\n    return 0;\n}\n\n\n/*!\n *  getTiffCompressedFormat()\n *\n *      Input:  tiffcomp (defined in tiff.h)\n *      Return: compression format (defined in imageio.h)\n *\n *  Notes:\n *      (1) The input must be the actual tiff compression type\n *          returned by a tiff library call.  It should always be\n *          a valid tiff type.\n *      (2) The return type is defined in the enum in imageio.h.\n */\nstatic l_int32\ngetTiffCompressedFormat(l_uint16  tiffcomp)\n{\nl_int32  comptype;\n\n    switch (tiffcomp)\n    {\n    case COMPRESSION_CCITTFAX4:\n        comptype = IFF_TIFF_G4;\n        break;\n    case COMPRESSION_CCITTFAX3:\n        comptype = IFF_TIFF_G3;\n        break;\n    case COMPRESSION_CCITTRLE:\n        comptype = IFF_TIFF_RLE;\n        break;\n    case COMPRESSION_PACKBITS:\n        comptype = IFF_TIFF_PACKBITS;\n        break;\n    case COMPRESSION_LZW:\n        comptype = IFF_TIFF_LZW;\n        break;\n    case COMPRESSION_ADOBE_DEFLATE:\n        comptype = IFF_TIFF_ZIP;\n        break;\n    default:\n        comptype = IFF_TIFF;\n        break;\n    }\n    return comptype;\n}\n\n\n/*--------------------------------------------------------------*\n *                   Extraction of tiff g4 data                 *\n *--------------------------------------------------------------*/\n/*!\n *  extractTiffG4DataFromFile()\n *\n *      Input:  filein\n *              \u0026data (\u003creturn\u003e binary data of ccitt g4 encoded stream)\n *              \u0026nbytes (\u003creturn\u003e size of binary data)\n *              \u0026w (\u003creturn optional\u003e image width)\n *              \u0026h (\u003creturn optional\u003e image height)\n *              \u0026minisblack (\u003creturn optional\u003e boolean)\n *      Return: 0 if OK, 1 on error\n */\nl_int32\nextractTiffG4DataFromFile(const char  *filein,\n                          l_uint8    **pdata,\n                          l_int32     *pnbytes,\n                          l_int32     *pw,\n                          l_int32     *ph,\n                          l_int32     *pminisblack)\n{\nl_uint8  *inarray, *data;\nl_uint16  minisblack, comptype;  /* accessors require l_uint16 */\nl_int32   istiff, fbytes, nbytes;\nl_uint32  w, h, rowsperstrip;  /* accessors require l_uint32 */\nl_uint32  diroff;\nFILE     *fpin;\nTIFF     *tif;\n\n    PROCNAME(\"extractTiffG4DataFromFile\");\n\n    if (!pdata)\n        return ERROR_INT(\"\u0026data not defined\", procName, 1);\n    if (!pnbytes)\n        return ERROR_INT(\"\u0026nbytes not defined\", procName, 1);\n    if (!pw \u0026\u0026 !ph \u0026\u0026 !pminisblack)\n        return ERROR_INT(\"no output data requested\", procName, 1);\n    *pdata = NULL;\n    *pnbytes = 0;\n\n    if ((fpin = fopen(filein, \"rb\")) == NULL)\n        return ERROR_INT(\"filein not defined\", procName, 1);\n    istiff = fileFormatIsTiff(fpin);\n    fclose(fpin);\n    if (!istiff)\n        return ERROR_INT(\"filein not tiff\", procName, 1);\n\n    if ((inarray = arrayRead(filein, \u0026fbytes)) == NULL)\n        return ERROR_INT(\"inarray not made\", procName, 1);\n\n        /* Get metadata about the image */\n    if ((tif = TIFFOpen(filein, \"r\")) == NULL)\n        return ERROR_INT(\"tif not open for read\", procName, 1);\n    TIFFGetField(tif, TIFFTAG_COMPRESSION, \u0026comptype);\n    if (comptype != COMPRESSION_CCITTFAX4) {\n        FREE(inarray);\n        TIFFClose(tif);\n        return ERROR_INT(\"filein is not g4 compressed\", procName, 1);\n    }\n\n    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, \u0026w);\n    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, \u0026h);\n    TIFFGetField(tif, TIFFTAG_ROWSPERSTRIP, \u0026rowsperstrip);\n    if (h != rowsperstrip)\n        L_WARNING(\"more than 1 strip\", procName);\n    TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, \u0026minisblack);  /* for 1 bpp */\n/*    TIFFPrintDirectory(tif, stderr, 0); */\n    TIFFClose(tif);\n    if (pw) *pw = (l_int32)w;\n    if (ph) *ph = (l_int32)h;\n    if (pminisblack) *pminisblack = (l_int32)minisblack;\n\n        /* The header has 8 bytes: the first 2 are the magic number,\n         * the next 2 are the version, and the last 4 are the\n         * offset to the first directory.  That's what we want here.\n         * We have to test the byte order before decoding 4 bytes! */\n    if (inarray[0] == 0x4d) {  /* big-endian */\n        diroff = (inarray[4] \u003c\u003c 24) | (inarray[5] \u003c\u003c 16) |\n                 (inarray[6] \u003c\u003c 8) | inarray[7];\n    }\n    else  {   /* inarray[0] == 0x49 :  little-endian */\n        diroff = (inarray[7] \u003c\u003c 24) | (inarray[6] \u003c\u003c 16) |\n                 (inarray[5] \u003c\u003c 8) | inarray[4];\n    }\n/*    fprintf(stderr, \" diroff = %d, %x\\n\", diroff, diroff); */\n\n        /* Extract the ccittg4 encoded data from the tiff file.\n         * We skip the 8 byte header and take nbytes of data,\n         * up to the beginning of the directory (at diroff)  */\n    nbytes = diroff - 8;\n    *pnbytes = nbytes;\n    if ((data = (l_uint8 *)CALLOC(nbytes, sizeof(l_uint8))) == NULL) {\n        FREE(inarray);\n        return ERROR_INT(\"data not allocated\", procName, 1);\n    }\n    *pdata = data;\n    memcpy(data, inarray + 8, nbytes);\n    FREE(inarray);\n\n    return 0;\n}\n\n\n/*--------------------------------------------------------------*\n *               Open tiff stream from file stream              *\n *--------------------------------------------------------------*/\n/*!\n *  fopenTiff()\n *\n *      Input:  stream\n *              modestring (\"r\", \"w\", ...)\n *      Return: tiff (data structure, opened for a file descriptor)\n *\n *  Notes:\n *      (1) Why is this here?  Leffler did not provide a function that\n *          takes a stream and gives a TIFF.  He only gave one that\n *          generates a TIFF starting with a file descriptor.  So we\n *          need to make it here, because it is useful to have functions\n *          that take a stream as input.\n *      (2) Requires lseek to rewind to BOF; fseek won't hack it.\n *      (3) When linking with windows, suggest you use tif_unix.c\n *          instead of tif_win32.c, because it has been reported that\n *          the file descriptor returned from fileno() does not work\n *          with TIFFFdOpen() in tif_win32.c.  (win32 requires a\n *          \"handle\", which is an integer returned by _get_osfhandle(fd).)\n */\nstatic TIFF *\nfopenTiff(FILE        *fp,\n          const char  *modestring)\n{\nl_int32  fd;\n\n    PROCNAME(\"fopenTiff\");\n\n    if (!fp)\n        return (TIFF *)ERROR_PTR(\"stream not opened\", procName, NULL);\n    if (!modestring)\n        return (TIFF *)ERROR_PTR(\"modestring not defined\", procName, NULL);\n\n    if ((fd = fileno(fp)) \u003c 0)\n        return (TIFF *)ERROR_PTR(\"invalid file descriptor\", procName, NULL);\n    lseek(fd, 0, SEEK_SET);\n\n    return TIFFFdOpen(fd, \"TIFFstream\", modestring);\n}\n\n\n/*----------------------------------------------------------------------*\n *     Memory I/O: reading memory --\u003e pix and writing pix --\u003e memory    *\n *----------------------------------------------------------------------*/\n/*  It would be nice to use open_memstream() and fmemopen()\n *  for writing and reading to memory, rsp.  These functions manage\n *  memory for writes and reads that use a file streams interface.\n *  Unfortunately, the tiff library only has an interface for reading\n *  and writing to file descriptors, not to file streams.  The tiff\n *  library procedure is to open a \"tiff stream\" and read/write to it.\n *  The library provides a client interface for managing the I/O\n *  from memory, which requires seven callbacks.  See the TIFFClientOpen\n *  man page for callback signatures.  Adam Langley provided the code\n *  to do this.  */\n\n/*\n *  The L_Memstram @buffer has different functions in writing and reading.\n *\n *     * In reading, it is assigned to the data and read from as\n *       the tiff library uncompresses the data and generates the pix.\n *       The @offset points to the current read position in the data,\n *       and the @hw always gives the number of bytes of data.\n *       The @outdata and @outsize ptrs are not used.\n *       When finished, tiffCloseCallback() simply frees the L_Memstream.\n *\n *     * In writing, it accepts the data that the tiff library\n *       produces when a pix is compressed.  the buffer points to a\n *       malloced area of @bufsize bytes.  The current writing position\n *       in the buffer is @offset and the most ever written is @hw.\n *       The buffer is expanded as necessary.  When finished,\n *       tiffCloseCallback() assigns the @outdata and @outsize ptrs\n *       to the @buffer and @bufsize results, and frees the L_Memstream.\n */\nstruct L_Memstream\n{\n    l_uint8   *buffer;    /* expands to hold data when written to;         */\n                          /* fixed size when read from.                    */\n    size_t     bufsize;   /* current size allocated when written to;       */\n                          /* fixed size of input data when read from.      */\n    size_t     offset;    /* byte offset from beginning of buffer.         */\n    size_t     hw;        /* high-water mark; max bytes in buffer.         */\n    l_uint8  **poutdata;  /* input param for writing; data goes here.      */\n    size_t    *poutsize;  /* input param for writing; data size goes here. */\n};\ntypedef struct L_Memstream  L_MEMSTREAM;\n\n\n    /* These are static functions for memory I/O */\nstatic L_MEMSTREAM *memstreamCreateForRead(l_uint8 *indata, size_t pinsize);\nstatic L_MEMSTREAM *memstreamCreateForWrite(l_uint8 **poutdata,\n                                            size_t *poutsize);\nstatic tsize_t tiffReadCallback(thandle_t handle, tdata_t data, tsize_t length);\nstatic tsize_t tiffWriteCallback(thandle_t handle, tdata_t data,\n                                 tsize_t length);\nstatic toff_t tiffSeekCallback(thandle_t handle, toff_t offset, l_int32 whence);\nstatic l_int32 tiffCloseCallback(thandle_t handle);\nstatic toff_t tiffSizeCallback(thandle_t handle);\nstatic l_int32 tiffMapCallback(thandle_t handle, tdata_t *data, toff_t *length);\nstatic void tiffUnmapCallback(thandle_t handle, tdata_t data, toff_t length);\n\n\nstatic L_MEMSTREAM *\nmemstreamCreateForRead(l_uint8  *indata,\n                       size_t    insize)\n{\nL_MEMSTREAM  *mstream;\n\n    mstream = (L_MEMSTREAM *)CALLOC(1, sizeof(L_MEMSTREAM));\n    mstream-\u003ebuffer = indata;   /* handle to input data array */\n    mstream-\u003ebufsize = insize;  /* amount of input data */\n    mstream-\u003ehw = insize;       /* high-water mark fixed at input data size */\n    mstream-\u003eoffset = 0;        /* offset always starts at 0 */\n    return mstream;\n}\n\n\nstatic L_MEMSTREAM *\nmemstreamCreateForWrite(l_uint8  **poutdata,\n                        size_t    *poutsize)\n{\nL_MEMSTREAM  *mstream;\n\n    mstream = (L_MEMSTREAM *)CALLOC(1, sizeof(L_MEMSTREAM));\n    mstream-\u003ebuffer = (l_uint8 *)CALLOC(8 * 1024, 1);\n    mstream-\u003ebufsize = 8 * 1024;\n    mstream-\u003epoutdata = poutdata;  /* used only at end of write */\n    mstream-\u003epoutsize = poutsize;  /* ditto  */\n    mstream-\u003ehw = mstream-\u003eoffset = 0;\n    return mstream;\n}\n\n\nstatic tsize_t\ntiffReadCallback(thandle_t  handle,\n                 tdata_t    data,\n                 tsize_t    length)\n{\nL_MEMSTREAM  *mstream;\nsize_t        amount;\n\n    mstream = (L_MEMSTREAM *)handle;\n    amount = L_MIN((size_t)length, mstream-\u003ehw - mstream-\u003eoffset);\n    memcpy(data, mstream-\u003ebuffer + mstream-\u003eoffset, amount);\n    mstream-\u003eoffset += amount;\n    return amount;\n}\n\n\nstatic tsize_t\ntiffWriteCallback(thandle_t  handle,\n                  tdata_t    data,\n                  tsize_t    length)\n{\nL_MEMSTREAM  *mstream;\nsize_t        newsize;\n\n        /* reallocNew() uses calloc to initialize the array.\n         * If malloc is used instead, for some of the encoding methods,\n         * not all the data in 'bufsize' bytes in the buffer will\n         * have been initialized by the end of the compression. */\n    mstream = (L_MEMSTREAM *)handle;\n    if (mstream-\u003eoffset + length \u003e mstream-\u003ebufsize) {\n        newsize = 2 * (mstream-\u003eoffset + length);\n        mstream-\u003ebuffer = (l_uint8 *)reallocNew((void **)\u0026mstream-\u003ebuffer,\n                                                mstream-\u003eoffset, newsize);\n        mstream-\u003ebufsize = newsize;\n    }\n\n    memcpy(mstream-\u003ebuffer + mstream-\u003eoffset, data, length);\n    mstream-\u003eoffset += length;\n    mstream-\u003ehw = L_MAX(mstream-\u003eoffset, mstream-\u003ehw);\n    return length;\n}\n\n\nstatic toff_t\ntiffSeekCallback(thandle_t  handle,\n                 toff_t     offset,\n                 l_int32    whence)\n{\nL_MEMSTREAM  *mstream;\n\n    PROCNAME(\"tiffSeekCallback\");\n    mstream = (L_MEMSTREAM *)handle;\n    switch (whence) {\n        case SEEK_SET:\n/*            fprintf(stderr, \"seek_set: offset = %d\\n\", offset); */\n            mstream-\u003eoffset = offset;\n            break;\n        case SEEK_CUR:\n/*            fprintf(stderr, \"seek_cur: offset = %d\\n\", offset); */\n            mstream-\u003eoffset += offset;\n            break;\n        case SEEK_END:\n/*            fprintf(stderr, \"seek end: hw = %d, offset = %d\\n\",\n                    mstream-\u003ehw, offset); */\n            mstream-\u003eoffset = mstream-\u003ehw - offset;  /* offset \u003e= 0 */\n            break;\n        default:\n            return (toff_t)ERROR_INT(\"bad whence value\", procName,\n                                     mstream-\u003eoffset);\n    }\n\n    return mstream-\u003eoffset;\n}\n\n\nstatic l_int32\ntiffCloseCallback(thandle_t  handle)\n{\nL_MEMSTREAM  *mstream;\n\n    mstream = (L_MEMSTREAM *)handle;\n    if (mstream-\u003epoutdata) {   /* writing: save the output data */\n        *mstream-\u003epoutdata = mstream-\u003ebuffer;\n        *mstream-\u003epoutsize = mstream-\u003ehw;\n    }\n    FREE(mstream);  /* never free the buffer! */\n    return 0;\n}\n\n\nstatic toff_t\ntiffSizeCallback(thandle_t  handle)\n{\nL_MEMSTREAM  *mstream;\n\n    mstream = (L_MEMSTREAM *)handle;\n    return mstream-\u003ehw;\n}\n\n\nstatic l_int32\ntiffMapCallback(thandle_t  handle,\n                tdata_t   *data,\n                toff_t    *length)\n{\nL_MEMSTREAM  *mstream;\n\n    mstream = (L_MEMSTREAM *)handle;\n    *data = mstream-\u003ebuffer;\n    *length = mstream-\u003ehw;\n    return 0;\n} \n\n\nstatic void\ntiffUnmapCallback(thandle_t  handle,\n                  tdata_t    data,\n                  toff_t     length)\n{\n    return;\n} \n\n\n/*!\n *  fopenTiffMemstream()\n *\n *      Input:  filename (for error output; can be \"\")\n *              operation (\"w\" for write, \"r\" for read)\n *              \u0026data (\u003creturn\u003e written data)\n *              \u0026datasize (\u003creturn\u003e size of written data)\n *      Return: tiff (data structure, opened for write to memory)\n *\n *  Notes:\n *      (1) This wraps up a number of callbacks for either:\n *            * reading from tiff in memory buffer --\u003e pix\n *            * writing from pix --\u003e tiff in memory buffer\n *      (2) After use, the memstream is automatically destroyed when\n *          TIFFClose() is called.  TIFFCleanup() doesn't free the memstream.\n */\nstatic TIFF *\nfopenTiffMemstream(const char  *filename,\n                   const char  *operation,\n                   l_uint8    **pdata,\n                   size_t      *pdatasize)\n{\nL_MEMSTREAM  *mstream;\n\n    PROCNAME(\"fopenTiffMemstream\");\n\n    if (!filename)\n        return (TIFF *)ERROR_PTR(\"filename not defined\", procName, NULL);\n    if (!operation)\n        return (TIFF *)ERROR_PTR(\"operation not defined\", procName, NULL);\n    if (!pdata)\n        return (TIFF *)ERROR_PTR(\"\u0026data not defined\", procName, NULL);\n    if (!pdatasize)\n        return (TIFF *)ERROR_PTR(\"\u0026datasize not defined\", procName, NULL);\n    if (!strcmp(operation, \"r\") \u0026\u0026 !strcmp(operation, \"w\"))\n        return (TIFF *)ERROR_PTR(\"operation not 'r' or 'w'}\", procName, NULL);\n\n    if (!strcmp(operation, \"r\"))\n        mstream = memstreamCreateForRead(*pdata, *pdatasize);\n    else\n        mstream = memstreamCreateForWrite(pdata, pdatasize);\n\n    return TIFFClientOpen(filename, operation, mstream,\n                          tiffReadCallback, tiffWriteCallback,\n                          tiffSeekCallback, tiffCloseCallback,\n                          tiffSizeCallback, tiffMapCallback,\n                          tiffUnmapCallback);\n}\n\n\n/*!\n *  pixReadMemTiff()\n *\n *      Input:  data (const; tiff-encoded)\n *              datasize (size of data)\n *              n (page image number: 0-based)\n *      Return: pix, or null on error\n *\n *  Notes:\n *      (1) This is a version of pixReadTiff(), where the data is read\n *          from a memory buffer and uncompressed.\n *      (2) Use TIFFClose(); TIFFCleanup() doesn't free internal memstream.\n */\nPIX *\npixReadMemTiff(const l_uint8  *cdata,\n               size_t          size,\n               l_int32         n)\n{\nl_uint8  *data;\nl_int32   i, pagefound;\nPIX      *pix;\nTIFF     *tif;\n\n    PROCNAME(\"pixReadMemTiff\");\n\n    if (!cdata)\n        return (PIX *)ERROR_PTR(\"cdata not defined\", procName, NULL);\n\n    data = (l_uint8 *)cdata;  /* we're really not going to change this */\n    if ((tif = fopenTiffMemstream(\"tifferror\", \"r\", \u0026data, \u0026size)) == NULL)\n        return (PIX *)ERROR_PTR(\"tiff stream not opened\", procName, NULL);\n\n    pagefound = FALSE;\n    pix = NULL;\n    for (i = 0; i \u003c MAX_PAGES_IN_TIFF_FILE; i++) {\n        if (i == n) {\n            pagefound = TRUE;\n            if ((pix = pixReadFromTiffStream(tif)) == NULL) {\n                TIFFClose(tif);\n                return (PIX *)ERROR_PTR(\"pix not read\", procName, NULL);\n            }\n            pixSetInputFormat(pix, IFF_TIFF);\n            break;\n        }\n        if (TIFFReadDirectory(tif) == 0)\n            break;\n    }\n\n    if (pagefound == FALSE)\n        L_WARNING_INT(\"tiff page %d not found\", procName, n);\n\n    TIFFClose(tif);\n    return pix;\n}\n\n\n/*! \n *  pixWriteMemTiff()\n *\n *      Input:  \u0026data (\u003creturn\u003e data of tiff compressed image)\n *              \u0026size (\u003creturn\u003e size of returned data)\n *              pix\n *              comptype (IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS,\n *                        IFF_TIFF_G3, IFF_TIFF_G4,\n *                        IFF_TIFF_LZW, IFF_TIFF_ZIP)\n *      Return: 0 if OK, 1 on error\n *\n *  Usage:\n *      (1) See pixWriteTiff().  This version writes to\n *          memory instead of to a file.\n */\nl_int32\npixWriteMemTiff(l_uint8  **pdata,\n                size_t    *psize,\n                PIX       *pix,\n                l_int32    comptype)\n{\n    return pixWriteMemTiffCustom(pdata, psize, pix, comptype,\n                                 NULL, NULL, NULL, NULL);\n}\n\n\n/*! \n *  pixWriteMemTiffCustom()\n *\n *      Input:  \u0026data (\u003creturn\u003e data of tiff compressed image)\n *              \u0026size (\u003creturn\u003e size of returned data)\n *              pix\n *              comptype (IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS,\n *                        IFF_TIFF_G3, IFF_TIFF_G4,\n *                        IFF_TIFF_LZW, IFF_TIFF_ZIP)\n *              natags (\u003coptional\u003e NUMA of custom tiff tags)\n *              savals (\u003coptional\u003e SARRAY of values)\n *              satypes (\u003coptional\u003e SARRAY of types)\n *              nasizes (\u003coptional\u003e NUMA of sizes)\n *      Return: 0 if OK, 1 on error\n *\n *  Usage:\n *      (1) See pixWriteTiffCustom().  This version writes to\n *          memory instead of to a file.\n *      (2) Use TIFFClose(); TIFFCleanup() doesn't free internal memstream.\n */\nl_int32\npixWriteMemTiffCustom(l_uint8  **pdata,\n                      size_t    *psize,\n                      PIX       *pix,\n                      l_int32    comptype,\n                      NUMA      *natags,\n                      SARRAY    *savals,\n                      SARRAY    *satypes,\n                      NUMA      *nasizes)\n{\nl_int32  ret;\nTIFF    *tif;\n\n    PROCNAME(\"pixWriteMemTiffCustom\");\n\n    if (!pdata)\n        return ERROR_INT(\"\u0026data not defined\", procName, 1);\n    if (!psize)\n        return ERROR_INT(\"\u0026size not defined\", procName, 1);\n    if (!pix)\n        return ERROR_INT(\"\u0026pix not defined\", procName, 1);\n    if (pixGetDepth(pix) != 1 \u0026\u0026 comptype != IFF_TIFF \u0026\u0026\n        comptype != IFF_TIFF_LZW \u0026\u0026 comptype != IFF_TIFF_ZIP) {\n        L_WARNING(\"invalid compression type for image with bpp \u003e 1\", procName);\n        comptype = IFF_TIFF_ZIP;\n    }\n\n    if ((tif = fopenTiffMemstream(\"tifferror\", \"w\", pdata, psize)) == NULL)\n        return ERROR_INT(\"tiff stream not opened\", procName, 1);\n    ret = pixWriteToTiffStream(tif, pix, comptype, natags, savals,\n                               satypes, nasizes);\n\n    TIFFClose(tif);\n    return ret;\n}\n\n/* --------------------------------------------*/\n#endif  /* HAVE_LIBTIFF */\n/* --------------------------------------------*/\n",
        "name": "tiffio.cpp",
        "path": "DesktopEditor/raster/JBig2/source/LeptonLib/tiffio.cpp",
        "url": "/github.com/ONLYOFFICE/core/-/blob/DesktopEditor/raster/JBig2/source/LeptonLib/tiffio.cpp"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1065,
          "offsetAndLengths": [
            [
              4,
              18
            ]
          ],
          "preview": "    TIFFPrintDirectory(tif, fpout, 0);"
        },
        {
          "limitHit": false,
          "lineNumber": 1563,
          "offsetAndLengths": [
            [
              6,
              18
            ]
          ],
          "preview": "/*    TIFFPrintDirectory(tif, stderr, 0); */"
        }
      ],
      "repository": {
        "name": "github.com/ONLYOFFICE/core",
        "url": "/github.com/ONLYOFFICE/core"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "61d8a3923d2f6c87da136676e64754796f379826"
        },
        "content": "/*\n * Copyright (c) 2020-2021, NVIDIA CORPORATION.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"ifd.h\"\n\n#include \u003csys/types.h\u003e\n#include \u003cunistd.h\u003e\n\n#include \u003calgorithm\u003e\n#include \u003ciostream\u003e\n#include \u003crandom\u003e\n#include \u003cthread\u003e\n\n#include \u003cfmt/format.h\u003e\n#include \u003ctiffio.h\u003e\n#include \u003ctiffiop.h\u003e // this is not included in the released library\n#include \u003cturbojpeg.h\u003e\n\n#include \u003ccucim/codec/hash_function.h\u003e\n#include \u003ccucim/cuimage.h\u003e\n#include \u003ccucim/logger/timer.h\u003e\n#include \u003ccucim/memory/memory_manager.h\u003e\n#include \u003ccucim/profiler/nvtx3.h\u003e\n#include \u003ccucim/util/cuda.h\u003e\n\n#include \"cuslide/deflate/deflate.h\"\n#include \"cuslide/jpeg/libjpeg_turbo.h\"\n#include \"cuslide/jpeg2k/libopenjpeg.h\"\n#include \"cuslide/loader/nvjpeg_processor.h\"\n#include \"cuslide/lzw/lzw.h\"\n#include \"cuslide/raw/raw.h\"\n#include \"tiff.h\"\n\n\nnamespace cuslide::tiff\n{\n\nIFD::IFD(TIFF* tiff, uint16_t index, ifd_offset_t offset) : tiff_(tiff), ifd_index_(index), ifd_offset_(offset)\n{\n    PROF_SCOPED_RANGE(PROF_EVENT(ifd_ifd));\n    auto tif = tiff-\u003eclient();\n\n    char* software_char_ptr = nullptr;\n    char* model_char_ptr = nullptr;\n\n    // TODO: error handling\n    TIFFGetField(tif, TIFFTAG_SOFTWARE, \u0026software_char_ptr);\n    software_ = std::string(software_char_ptr ? software_char_ptr : \"\");\n    TIFFGetField(tif, TIFFTAG_MODEL, \u0026model_char_ptr);\n    model_ = std::string(model_char_ptr ? model_char_ptr : \"\");\n    TIFFGetField(tif, TIFFTAG_IMAGEDESCRIPTION, \u0026model_char_ptr);\n    image_description_ = std::string(model_char_ptr ? model_char_ptr : \"\");\n    TIFFGetField(tif, TIFFTAG_RESOLUTIONUNIT, \u0026resolution_unit_);\n    TIFFGetField(tif, TIFFTAG_XRESOLUTION, \u0026x_resolution_);\n    TIFFGetField(tif, TIFFTAG_YRESOLUTION, \u0026y_resolution_);\n\n    TIFFDirectory\u0026 tif_dir = tif-\u003etif_dir;\n    flags_ = tif-\u003etif_flags;\n\n    width_ = tif_dir.td_imagewidth;\n    height_ = tif_dir.td_imagelength;\n    if ((flags_ \u0026 TIFF_ISTILED) != 0)\n    {\n        tile_width_ = tif_dir.td_tilewidth;\n        tile_height_ = tif_dir.td_tilelength;\n    }\n    else\n    {\n        rows_per_strip_ = tif_dir.td_rowsperstrip;\n    }\n    bits_per_sample_ = tif_dir.td_bitspersample;\n    samples_per_pixel_ = tif_dir.td_samplesperpixel;\n    subfile_type_ = tif_dir.td_subfiletype;\n    planar_config_ = tif_dir.td_planarconfig;\n    photometric_ = tif_dir.td_photometric;\n    compression_ = tif_dir.td_compression;\n    TIFFGetField(tif, TIFFTAG_PREDICTOR, \u0026predictor_);\n    subifd_count_ = tif_dir.td_nsubifd;\n    uint64_t* subifd_offsets = tif_dir.td_subifd;\n    if (subifd_count_)\n    {\n        subifd_offsets_.resize(subifd_count_);\n        subifd_offsets_.insert(subifd_offsets_.end(), \u0026subifd_offsets[0], \u0026subifd_offsets[subifd_count_]);\n    }\n\n    if (compression_ == COMPRESSION_JPEG)\n    {\n        uint8_t* jpegtable_data = nullptr;\n        uint32_t jpegtable_count = 0;\n\n        TIFFGetField(tif, TIFFTAG_JPEGTABLES, \u0026jpegtable_count, \u0026jpegtable_data);\n        jpegtable_.reserve(jpegtable_count);\n        jpegtable_.insert(jpegtable_.end(), jpegtable_data, jpegtable_data + jpegtable_count);\n\n        if (photometric_ == PHOTOMETRIC_RGB)\n        {\n            jpeg_color_space_ = 2; // JCS_RGB\n        }\n        else if (photometric_ == PHOTOMETRIC_YCBCR)\n        {\n            jpeg_color_space_ = 3; // JCS_YCbCr\n        }\n    }\n\n    image_piece_count_ = tif_dir.td_stripoffset_entry.tdir_count;\n\n    image_piece_offsets_.reserve(image_piece_count_);\n    uint64* td_stripoffset_p = tif_dir.td_stripoffset_p;\n    uint64* td_stripbytecount_p = tif_dir.td_stripbytecount_p;\n\n    // Copy data to vector\n    image_piece_offsets_.insert(image_piece_offsets_.end(), \u0026td_stripoffset_p[0], \u0026td_stripoffset_p[image_piece_count_]);\n    image_piece_bytecounts_.insert(\n        image_piece_bytecounts_.end(), \u0026td_stripbytecount_p[0], \u0026td_stripbytecount_p[image_piece_count_]);\n\n    // Calculate hash value with IFD index\n    hash_value_ = tiff-\u003efile_handle_-\u003ehash_value ^ cucim::codec::splitmix64(index);\n\n    //    TIFFPrintDirectory(tif, stdout, TIFFPRINT_STRIPS);\n}\n\nbool IFD::read(const TIFF* tiff,\n               const cucim::io::format::ImageMetadataDesc* metadata,\n               const cucim::io::format::ImageReaderRegionRequestDesc* request,\n               cucim::io::format::ImageDataDesc* out_image_data)\n{\n    PROF_SCOPED_RANGE(PROF_EVENT(ifd_read));\n    ::TIFF* tif = tiff-\u003etiff_client_;\n\n    uint16_t ifd_index = ifd_index_;\n\n    std::string device_name(request-\u003edevice);\n\n    if (request-\u003eshm_name)\n    {\n        device_name = device_name + fmt::format(\"[{}]\", request-\u003eshm_name); // TODO: check performance\n    }\n    cucim::io::Device out_device(device_name);\n\n    int64_t sx = request-\u003elocation[0];\n    int64_t sy = request-\u003elocation[1];\n    uint32_t batch_size = request-\u003ebatch_size;\n    int64_t w = request-\u003esize[0];\n    int64_t h = request-\u003esize[1];\n    int32_t n_ch = samples_per_pixel_; // number of channels\n    int ndim = 3;\n\n    size_t raster_size = w * h * samples_per_pixel_;\n    void* raster = nullptr;\n    auto raster_type = cucim::io::DeviceType::kCPU;\n\n    DLTensor* out_buf = request-\u003ebuf;\n    bool is_buf_available = out_buf \u0026\u0026 out_buf-\u003edata;\n\n    if (is_buf_available)\n    {\n        // TODO: memory size check if out_buf-\u003edata has high-enough memory (\u003e= tjBufSize())\n        raster = out_buf-\u003edata;\n    }\n\n    if (is_read_optimizable())\n    {\n        if (batch_size \u003e 1)\n        {\n            ndim = 4;\n        }\n        int64_t* location = request-\u003elocation;\n        uint64_t location_len = request-\u003elocation_len;\n        const uint32_t num_workers = request-\u003enum_workers;\n        const bool drop_last = request-\u003edrop_last;\n        uint32_t prefetch_factor = request-\u003eprefetch_factor;\n        const bool shuffle = request-\u003eshuffle;\n        const uint64_t seed = request-\u003eseed;\n\n        if (num_workers == 0 \u0026\u0026 location_len \u003e 1)\n        {\n            throw std::runtime_error(\"Cannot read multiple locations with zero workers!\");\n        }\n\n        // Shuffle data\n        if (shuffle)\n        {\n            auto rng = std::default_random_engine{ seed };\n            struct position\n            {\n                int64_t x;\n                int64_t y;\n            };\n            std::shuffle(reinterpret_cast\u003cposition*\u003e(\u0026location[0]),\n                         reinterpret_cast\u003cposition*\u003e(\u0026location[location_len * 2]), rng);\n        }\n\n        // Adjust location length based on 'drop_last'\n        const uint32_t remaining_len = location_len % batch_size;\n        if (drop_last)\n        {\n            location_len -= remaining_len;\n        }\n\n        // Do not use prefetch if the image is too small\n        if (1 + prefetch_factor \u003e location_len)\n        {\n            prefetch_factor = location_len - 1;\n        }\n\n        size_t one_raster_size = raster_size;\n        raster_size *= batch_size;\n\n        const IFD* ifd = this;\n\n        if (location_len \u003e 1 || batch_size \u003e 1 || num_workers \u003e 0)\n        {\n            // Reconstruct location\n            std::unique_ptr\u003cstd::vector\u003cint64_t\u003e\u003e* location_unique =\n                reinterpret_cast\u003cstd::unique_ptr\u003cstd::vector\u003cint64_t\u003e\u003e*\u003e(request-\u003elocation_unique);\n            std::unique_ptr\u003cstd::vector\u003cint64_t\u003e\u003e request_location = std::move(*location_unique);\n            delete location_unique;\n\n            // Reconstruct size\n            std::unique_ptr\u003cstd::vector\u003cint64_t\u003e\u003e* size_unique =\n                reinterpret_cast\u003cstd::unique_ptr\u003cstd::vector\u003cint64_t\u003e\u003e*\u003e(request-\u003esize_unique);\n            std::unique_ptr\u003cstd::vector\u003cint64_t\u003e\u003e request_size = std::move(*size_unique);\n            delete size_unique;\n\n            auto load_func = [tiff, ifd, location, w, h, out_device](\n                                 cucim::loader::ThreadBatchDataLoader* loader_ptr, uint64_t location_index) {\n                uint8_t* raster_ptr = loader_ptr-\u003eraster_pointer(location_index);\n\n                if (!read_region_tiles(tiff, ifd, location, location_index, w, h,\n                                       raster_ptr, out_device, loader_ptr))\n                {\n                    fmt::print(stderr, \"[Error] Failed to read region!\\n\");\n                }\n            };\n\n            uint32_t maximum_tile_count = 0;\n\n            std::unique_ptr\u003ccucim::loader::BatchDataProcessor\u003e batch_processor;\n\n            // Set raster_type to CUDA because loader will handle this with nvjpeg\n            if (out_device.type() == cucim::io::DeviceType::kCUDA)\n            {\n                raster_type = cucim::io::DeviceType::kCUDA;\n\n                // The maximal number of tiles (x-axis) overapped with the given patch\n                uint32_t tile_across_count = std::min(static_cast\u003cuint64_t\u003e(ifd-\u003ewidth_) + (ifd-\u003etile_width_ - 1),\n                                                      static_cast\u003cuint64_t\u003e(w) + (ifd-\u003etile_width_ - 1)) /\n                                                 ifd-\u003etile_width_ +\n                                             1;\n                // The maximal number of tiles (y-axis) overapped with the given patch\n                uint32_t tile_down_count = std::min(static_cast\u003cuint64_t\u003e(ifd-\u003eheight_) + (ifd-\u003etile_height_ - 1),\n                                                    static_cast\u003cuint64_t\u003e(h) + (ifd-\u003etile_height_ - 1)) /\n                                               ifd-\u003etile_height_ +\n                                           1;\n                // The maximal number of possible tiles (# of tasks) to load for the given image batch\n                maximum_tile_count = tile_across_count * tile_down_count * batch_size;\n\n                // Create NvJpegProcessor\n                auto\u0026 jpegtable = ifd-\u003ejpegtable_;\n                const void* jpegtable_data = jpegtable.data();\n                uint32_t jpegtable_size = jpegtable.size();\n\n                auto nvjpeg_processor = std::make_unique\u003ccuslide::loader::NvJpegProcessor\u003e(\n                    tiff-\u003efile_handle_, ifd, request_location-\u003edata(), request_size-\u003edata(), location_len, batch_size,\n                    maximum_tile_count, static_cast\u003cconst uint8_t*\u003e(jpegtable_data), jpegtable_size);\n\n                // Update prefetch_factor\n                prefetch_factor = nvjpeg_processor-\u003epreferred_loader_prefetch_factor();\n\n                batch_processor = std::move(nvjpeg_processor);\n            }\n\n            auto loader = std::make_unique\u003ccucim::loader::ThreadBatchDataLoader\u003e(\n                load_func, std::move(batch_processor), out_device, std::move(request_location), std::move(request_size),\n                location_len, one_raster_size, batch_size, prefetch_factor, num_workers);\n\n            const uint32_t load_size = std::min(static_cast\u003cuint64_t\u003e(batch_size) * (1 + prefetch_factor), location_len);\n\n            loader-\u003erequest(load_size);\n\n            // If it reads entire image with multi threads (using loader), fetch the next item.\n            if (location_len == 1 \u0026\u0026 batch_size == 1)\n            {\n                raster = loader-\u003enext_data();\n            }\n\n            out_image_data-\u003eloader = loader.release(); // set loader to out_image_data\n        }\n        else\n        {\n            if (!raster)\n            {\n                raster = cucim_malloc(one_raster_size);\n            }\n\n            if (!read_region_tiles(tiff, ifd, location, 0, w, h, raster, out_device, nullptr))\n            {\n                fmt::print(stderr, \"[Error] Failed to read region!\\n\");\n            }\n        }\n    }\n    else\n    {\n        PROF_SCOPED_RANGE(PROF_EVENT(ifd_read_slowpath));\n        // Print a warning message for the slow path\n        std::call_once(\n            tiff-\u003eslow_path_warning_flag_,\n            [](const std::string\u0026 file_path) {\n                fmt::print(\n                    stderr,\n                    \"[Warning] Loading image('{}') with a slow-path. The pixel format of the loaded image would be RGBA (4 channels) instead of RGB!\\n\",\n                    file_path);\n            },\n            tiff-\u003efile_path());\n        // Handle out-of-boundary case\n        int64_t ex = sx + w - 1;\n        int64_t ey = sy + h - 1;\n        if (sx \u003c 0 || sy \u003c 0 || sx \u003e= width_ || sy \u003e= height_ || ex \u003c 0 || ey \u003c 0 || ex \u003e= width_ || ey \u003e= height_)\n        {\n            throw std::invalid_argument(fmt::format(\"Cannot handle the out-of-boundary cases.\"));\n        }\n\n        // Check if the image format is supported or not\n        if (!is_format_supported())\n        {\n            throw std::runtime_error(fmt::format(\n                \"This format (compression: {}, sample_per_pixel: {}, planar_config: {}, photometric: {}) is not supported yet!.\",\n                compression_, samples_per_pixel_, planar_config_, photometric_));\n        }\n\n        if (tif-\u003etif_curdir != ifd_index)\n        {\n            TIFFSetDirectory(tif, ifd_index);\n        }\n        // RGBA -\u003e 4 channels\n        n_ch = 4;\n\n        char emsg[1024];\n        if (TIFFRGBAImageOK(tif, emsg))\n        {\n            TIFFRGBAImage img;\n            if (TIFFRGBAImageBegin(\u0026img, tif, -1, emsg))\n            {\n                size_t npixels;\n                npixels = w * h;\n                raster_size = npixels * 4;\n                if (!raster)\n                {\n                    raster = cucim_malloc(raster_size);\n                }\n                img.col_offset = sx;\n                img.row_offset = sy;\n                img.req_orientation = ORIENTATION_TOPLEFT;\n\n                if (raster != nullptr)\n                {\n                    if (!TIFFRGBAImageGet(\u0026img, (uint32_t*)raster, w, h))\n                    {\n                        memset(raster, 0, raster_size);\n                    }\n                }\n            }\n            else\n            {\n                throw std::runtime_error(fmt::format(\n                    \"This format (compression: {}, sample_per_pixel: {}, planar_config: {}, photometric: {}) is not supported yet!: {}\",\n                    compression_, samples_per_pixel_, planar_config_, photometric_, emsg));\n            }\n            TIFFRGBAImageEnd(\u0026img);\n        }\n        else\n        {\n            throw std::runtime_error(fmt::format(\n                \"This format (compression: {}, sample_per_pixel: {}, planar_config: {}, photometric: {}) is not supported yet!: {}\",\n                compression_, samples_per_pixel_, planar_config_, photometric_, emsg));\n        }\n    }\n\n    int64_t* shape = static_cast\u003cint64_t*\u003e(cucim_malloc(sizeof(int64_t) * ndim));\n    if (ndim == 3)\n    {\n        shape[0] = h;\n        shape[1] = w;\n        shape[2] = n_ch;\n    }\n    else // ndim == 4\n    {\n        shape[0] = batch_size;\n        shape[1] = h;\n        shape[2] = w;\n        shape[3] = n_ch;\n    }\n\n    // Copy the raster memory and free it if needed.\n    if (!is_buf_available \u0026\u0026 raster \u0026\u0026 raster_type == cucim::io::DeviceType::kCPU)\n    {\n        cucim::memory::move_raster_from_host(\u0026raster, raster_size, out_device);\n    }\n\n    auto\u0026 out_image_container = out_image_data-\u003econtainer;\n    out_image_container.data = raster;\n    out_image_container.device = DLDevice{ static_cast\u003cDLDeviceType\u003e(out_device.type()), out_device.index() };\n    out_image_container.ndim = ndim;\n    out_image_container.dtype = metadata-\u003edtype;\n    out_image_container.shape = shape;\n    out_image_container.strides = nullptr; // Tensor is compact and row-majored\n    out_image_container.byte_offset = 0;\n    auto\u0026 shm_name = out_device.shm_name();\n    size_t shm_name_len = shm_name.size();\n    if (shm_name_len != 0)\n    {\n        out_image_data-\u003eshm_name = static_cast\u003cchar*\u003e(cucim_malloc(shm_name_len + 1));\n        memcpy(out_image_data-\u003eshm_name, shm_name.c_str(), shm_name_len + 1);\n    }\n    else\n    {\n        out_image_data-\u003eshm_name = nullptr;\n    }\n\n    return true;\n}\n\nuint32_t IFD::index() const\n{\n    return ifd_index_;\n}\nifd_offset_t IFD::offset() const\n{\n    return ifd_offset_;\n}\n\nstd::string\u0026 IFD::software()\n{\n    return software_;\n}\nstd::string\u0026 IFD::model()\n{\n    return model_;\n}\nstd::string\u0026 IFD::image_description()\n{\n    return image_description_;\n}\nuint16_t IFD::resolution_unit() const\n{\n    return resolution_unit_;\n}\nfloat IFD::x_resolution() const\n{\n    return x_resolution_;\n}\nfloat IFD::y_resolution() const\n{\n    return y_resolution_;\n}\nuint32_t IFD::width() const\n{\n    return width_;\n}\nuint32_t IFD::height() const\n{\n    return height_;\n}\nuint32_t IFD::tile_width() const\n{\n    return tile_width_;\n}\nuint32_t IFD::tile_height() const\n{\n    return tile_height_;\n}\nuint32_t IFD::rows_per_strip() const\n{\n    return rows_per_strip_;\n}\nuint32_t IFD::bits_per_sample() const\n{\n    return bits_per_sample_;\n}\nuint32_t IFD::samples_per_pixel() const\n{\n    return samples_per_pixel_;\n}\nuint64_t IFD::subfile_type() const\n{\n    return subfile_type_;\n}\nuint16_t IFD::planar_config() const\n{\n    return planar_config_;\n}\nuint16_t IFD::photometric() const\n{\n    return photometric_;\n}\nuint16_t IFD::compression() const\n{\n    return compression_;\n}\nuint16_t IFD::predictor() const\n{\n    return predictor_;\n}\n\nuint16_t IFD::subifd_count() const\n{\n    return subifd_count_;\n}\nstd::vector\u003cuint64_t\u003e\u0026 IFD::subifd_offsets()\n{\n    return subifd_offsets_;\n}\nuint32_t IFD::image_piece_count() const\n{\n    return image_piece_count_;\n}\nconst std::vector\u003cuint64_t\u003e\u0026 IFD::image_piece_offsets() const\n{\n    return image_piece_offsets_;\n}\nconst std::vector\u003cuint64_t\u003e\u0026 IFD::image_piece_bytecounts() const\n{\n    return image_piece_bytecounts_;\n}\n\nsize_t IFD::pixel_size_nbytes() const\n{\n    const int pixel_format = TJPF_RGB; // TODO: support other pixel format\n    const int nbytes = tjPixelSize[pixel_format];\n    return nbytes;\n}\n\nsize_t IFD::tile_raster_size_nbytes() const\n{\n    const size_t nbytes = tile_width_ * tile_height_ * pixel_size_nbytes();\n    return nbytes;\n}\n\nbool IFD::is_compression_supported() const\n{\n    switch (compression_)\n    {\n    case COMPRESSION_NONE:\n    case COMPRESSION_JPEG:\n    case COMPRESSION_ADOBE_DEFLATE:\n    case COMPRESSION_DEFLATE:\n    case cuslide::jpeg2k::kAperioJpeg2kYCbCr: // 33003: Jpeg 2000 with YCbCr format, possibly with a chroma subsampling\n                                              // of 4:2:2\n    case cuslide::jpeg2k::kAperioJpeg2kRGB: // 33005: Jpeg 2000 with RGB\n    case COMPRESSION_LZW:\n        return true;\n    default:\n        return false;\n    }\n}\n\nbool IFD::is_read_optimizable() const\n{\n    return is_compression_supported() \u0026\u0026 bits_per_sample_ == 8 \u0026\u0026 samples_per_pixel_ == 3 \u0026\u0026\n           (tile_width_ != 0 \u0026\u0026 tile_height_ != 0) \u0026\u0026 planar_config_ == PLANARCONFIG_CONTIG \u0026\u0026\n           (photometric_ == PHOTOMETRIC_RGB || photometric_ == PHOTOMETRIC_YCBCR) \u0026\u0026\n           !tiff_-\u003eis_in_read_config(TIFF::kUseLibTiff);\n}\n\nbool IFD::is_format_supported() const\n{\n    return is_compression_supported();\n}\n\nbool IFD::read_region_tiles(const TIFF* tiff,\n                            const IFD* ifd,\n                            const int64_t* location,\n                            const int64_t location_index,\n                            const int64_t w,\n                            const int64_t h,\n                            void* raster,\n                            const cucim::io::Device\u0026 out_device,\n                            cucim::loader::ThreadBatchDataLoader* loader)\n{\n    PROF_SCOPED_RANGE(PROF_EVENT(ifd_read_region_tiles));\n    // Reference code: https://github.com/libjpeg-turbo/libjpeg-turbo/blob/master/tjexample.c\n\n    int64_t sx = location[location_index * 2];\n    int64_t sy = location[location_index * 2 + 1];\n    int64_t ex = sx + w - 1;\n    int64_t ey = sy + h - 1;\n\n    uint32_t width = ifd-\u003ewidth_;\n    uint32_t height = ifd-\u003eheight_;\n\n    // Handle out-of-boundary case\n    if (sx \u003c 0 || sy \u003c 0 || sx \u003e= width || sy \u003e= height || ex \u003c 0 || ey \u003c 0 || ex \u003e= width || ey \u003e= height)\n    {\n        return read_region_tiles_boundary(tiff, ifd, location, location_index, w, h, raster, out_device, loader);\n    }\n    cucim::cache::ImageCache\u0026 image_cache = cucim::CuImage::cache_manager().cache();\n    cucim::cache::CacheType cache_type = image_cache.type();\n\n    uint8_t background_value = tiff-\u003ebackground_value_;\n    uint16_t compression_method = ifd-\u003ecompression_;\n    int jpeg_color_space = ifd-\u003ejpeg_color_space_;\n    int predictor = ifd-\u003epredictor_;\n\n    // TODO: revert this once we can get RGB data instead of RGBA\n    uint32_t samples_per_pixel = 3; // ifd-\u003esamples_per_pixel();\n\n    const void* jpegtable_data = ifd-\u003ejpegtable_.data();\n    uint32_t jpegtable_count = ifd-\u003ejpegtable_.size();\n\n    uint32_t tw = ifd-\u003etile_width_;\n    uint32_t th = ifd-\u003etile_height_;\n\n    uint32_t offset_sx = static_cast\u003cuint32_t\u003e(sx / tw); // x-axis start offset for the requested region in the ifd tile\n                                                         // array as grid\n    uint32_t offset_ex = static_cast\u003cuint32_t\u003e(ex / tw); // x-axis end  offset for the requested region in the ifd tile\n                                                         // array as grid\n    uint32_t offset_sy = static_cast\u003cuint32_t\u003e(sy / th); // y-axis start offset for the requested region in the ifd tile\n                                                         // array as grid\n    uint32_t offset_ey = static_cast\u003cuint32_t\u003e(ey / th); // y-axis end offset for the requested region in the ifd tile\n                                                         // array as grid\n\n    uint32_t pixel_offset_sx = static_cast\u003cuint32_t\u003e(sx % tw);\n    uint32_t pixel_offset_ex = static_cast\u003cuint32_t\u003e(ex % tw);\n    uint32_t pixel_offset_sy = static_cast\u003cuint32_t\u003e(sy % th);\n    uint32_t pixel_offset_ey = static_cast\u003cuint32_t\u003e(ey % th);\n\n    uint32_t stride_y = width / tw + !!(width % tw); // # of tiles in a row(y) in the ifd tile array as grid\n\n    uint32_t start_index_y = offset_sy * stride_y;\n    uint32_t end_index_y = offset_ey * stride_y;\n\n    const size_t tile_raster_nbytes = ifd-\u003etile_raster_size_nbytes();\n\n    int tiff_file = tiff-\u003efile_handle_-\u003efd;\n    uint64_t ifd_hash_value = ifd-\u003ehash_value_;\n    uint32_t dest_pixel_step_y = w * samples_per_pixel;\n\n    uint32_t nbytes_tw = tw * samples_per_pixel;\n    auto dest_start_ptr = static_cast\u003cuint8_t*\u003e(raster);\n\n    // TODO: Current implementation doesn't consider endianness so need to consider later\n    // TODO: Consider tile's depth tag.\n    for (uint32_t index_y = start_index_y; index_y \u003c= end_index_y; index_y += stride_y)\n    {\n        uint32_t tile_pixel_offset_sy = (index_y == start_index_y) ? pixel_offset_sy : 0;\n        uint32_t tile_pixel_offset_ey = (index_y == end_index_y) ? pixel_offset_ey : (th - 1);\n        uint32_t dest_pixel_offset_len_y = tile_pixel_offset_ey - tile_pixel_offset_sy + 1;\n\n        uint32_t dest_pixel_index_x = 0;\n\n        uint32_t index = index_y + offset_sx;\n        for (uint32_t offset_x = offset_sx; offset_x \u003c= offset_ex; ++offset_x, ++index)\n        {\n            PROF_SCOPED_RANGE(PROF_EVENT_P(ifd_read_region_tiles_iter, index));\n            auto tiledata_offset = static_cast\u003cuint64_t\u003e(ifd-\u003eimage_piece_offsets_[index]);\n            auto tiledata_size = static_cast\u003cuint64_t\u003e(ifd-\u003eimage_piece_bytecounts_[index]);\n\n            // Calculate a simple hash value for the tile index\n            uint64_t index_hash = ifd_hash_value ^ (static_cast\u003cuint64_t\u003e(index) | (static_cast\u003cuint64_t\u003e(index) \u003c\u003c 32));\n\n            uint32_t tile_pixel_offset_x = (offset_x == offset_sx) ? pixel_offset_sx : 0;\n            uint32_t nbytes_tile_pixel_size_x = (offset_x == offset_ex) ?\n                                                    (pixel_offset_ex - tile_pixel_offset_x + 1) * samples_per_pixel :\n                                                    (tw - tile_pixel_offset_x) * samples_per_pixel;\n            auto decode_func = [=, \u0026image_cache]() {\n                PROF_SCOPED_RANGE(PROF_EVENT_P(ifd_read_region_tiles_task, index_hash));\n                uint32_t nbytes_tile_index = (tile_pixel_offset_sy * tw + tile_pixel_offset_x) * samples_per_pixel;\n                uint32_t dest_pixel_index = dest_pixel_index_x;\n                uint8_t* tile_data = nullptr;\n                if (tiledata_size \u003e 0)\n                {\n                    std::unique_ptr\u003cuint8_t, decltype(cucim_free)*\u003e tile_raster =\n                        std::unique_ptr\u003cuint8_t, decltype(cucim_free)*\u003e(nullptr, cucim_free);\n\n                    if (loader \u0026\u0026 loader-\u003ebatch_data_processor())\n                    {\n                        switch (compression_method)\n                        {\n                        case COMPRESSION_JPEG:\n                            break;\n                        default:\n                            throw std::runtime_error(\"Unsupported compression method\");\n                        }\n                        auto value = loader-\u003ewait_for_processing(index);\n                        if (!value) // if shutdown\n                        {\n                            return;\n                        }\n                        tile_data = static_cast\u003cuint8_t*\u003e(value-\u003edata);\n\n                        cudaError_t cuda_status;\n                        CUDA_ERROR(cudaMemcpy2D(dest_start_ptr + dest_pixel_index, dest_pixel_step_y,\n                                                tile_data + nbytes_tile_index, nbytes_tw, nbytes_tile_pixel_size_x,\n                                                tile_pixel_offset_ey - tile_pixel_offset_sy + 1,\n                                                cudaMemcpyDeviceToDevice));\n                    }\n                    else\n                    {\n                        auto key = image_cache.create_key(ifd_hash_value, index);\n                        image_cache.lock(index_hash);\n                        auto value = image_cache.find(key);\n                        if (value)\n                        {\n                            image_cache.unlock(index_hash);\n                            tile_data = static_cast\u003cuint8_t*\u003e(value-\u003edata);\n                        }\n                        else\n                        {\n                            // Lifetime of tile_data is same with `value`\n                            // : do not access this data when `value` is not accessible.\n                            if (cache_type != cucim::cache::CacheType::kNoCache)\n                            {\n                                tile_data = static_cast\u003cuint8_t*\u003e(image_cache.allocate(tile_raster_nbytes));\n                            }\n                            else\n                            {\n                                // Allocate temporary buffer for tile data\n                                tile_raster = std::unique_ptr\u003cuint8_t, decltype(cucim_free)*\u003e(\n                                    reinterpret_cast\u003cuint8_t*\u003e(cucim_malloc(tile_raster_nbytes)), cucim_free);\n                                tile_data = tile_raster.get();\n                            }\n                            {\n                                PROF_SCOPED_RANGE(PROF_EVENT(ifd_decompression));\n                                switch (compression_method)\n                                {\n                                case COMPRESSION_NONE:\n                                    cuslide::raw::decode_raw(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                             \u0026tile_data, tile_raster_nbytes, out_device);\n                                    break;\n                                case COMPRESSION_JPEG:\n                                    cuslide::jpeg::decode_libjpeg(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                                  jpegtable_data, jpegtable_count, \u0026tile_data,\n                                                                  out_device, jpeg_color_space);\n                                    break;\n                                case COMPRESSION_ADOBE_DEFLATE:\n                                case COMPRESSION_DEFLATE:\n                                    cuslide::deflate::decode_deflate(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                                     \u0026tile_data, tile_raster_nbytes, out_device);\n                                    break;\n                                case cuslide::jpeg2k::kAperioJpeg2kYCbCr: // 33003\n                                    cuslide::jpeg2k::decode_libopenjpeg(tiff_file, nullptr, tiledata_offset,\n                                                                        tiledata_size, \u0026tile_data, tile_raster_nbytes,\n                                                                        out_device, cuslide::jpeg2k::ColorSpace::kSYCC);\n                                    break;\n                                case cuslide::jpeg2k::kAperioJpeg2kRGB: // 33005\n                                    cuslide::jpeg2k::decode_libopenjpeg(tiff_file, nullptr, tiledata_offset,\n                                                                        tiledata_size, \u0026tile_data, tile_raster_nbytes,\n                                                                        out_device, cuslide::jpeg2k::ColorSpace::kRGB);\n                                    break;\n                                case COMPRESSION_LZW:\n                                    cuslide::lzw::decode_lzw(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                             \u0026tile_data, tile_raster_nbytes, out_device);\n                                    // Apply unpredictor\n                                    //   1: none, 2: horizontal differencing, 3: floating point predictor\n                                    //   https://www.adobe.io/content/dam/udp/en/open/standards/tiff/TIFF6.pdf\n                                    if (predictor == 2)\n                                    {\n                                        cuslide::lzw::horAcc8(tile_data, tile_raster_nbytes, nbytes_tw);\n                                    }\n                                    break;\n                                default:\n                                    throw std::runtime_error(\"Unsupported compression method\");\n                                }\n                            }\n\n                            value = image_cache.create_value(tile_data, tile_raster_nbytes);\n                            image_cache.insert(key, value);\n                            image_cache.unlock(index_hash);\n                        }\n\n                        for (uint32_t ty = tile_pixel_offset_sy; ty \u003c= tile_pixel_offset_ey;\n                             ++ty, dest_pixel_index += dest_pixel_step_y, nbytes_tile_index += nbytes_tw)\n                        {\n                            memcpy(dest_start_ptr + dest_pixel_index, tile_data + nbytes_tile_index,\n                                   nbytes_tile_pixel_size_x);\n                        }\n                    }\n                }\n                else\n                {\n                    if (out_device.type() == cucim::io::DeviceType::kCPU)\n                    {\n                        for (uint32_t ty = tile_pixel_offset_sy; ty \u003c= tile_pixel_offset_ey;\n                             ++ty, dest_pixel_index += dest_pixel_step_y, nbytes_tile_index += nbytes_tw)\n                        {\n                            // Set background value such as (255,255,255)\n                            memset(dest_start_ptr + dest_pixel_index, background_value, nbytes_tile_pixel_size_x);\n                        }\n                    }\n                    else\n                    {\n                        cudaError_t cuda_status;\n                        CUDA_ERROR(cudaMemset2D(dest_start_ptr + dest_pixel_index, dest_pixel_step_y, background_value,\n                                                nbytes_tile_pixel_size_x,\n                                                tile_pixel_offset_ey - tile_pixel_offset_sy + 1));\n                    }\n                }\n            };\n\n            if (loader \u0026\u0026 *loader)\n            {\n                loader-\u003eenqueue(std::move(decode_func),\n                                cucim::loader::TileInfo{ location_index, index, tiledata_offset, tiledata_size });\n            }\n            else\n            {\n                decode_func();\n            }\n\n            dest_pixel_index_x += nbytes_tile_pixel_size_x;\n        }\n        dest_start_ptr += dest_pixel_step_y * dest_pixel_offset_len_y;\n    }\n\n    return true;\n}\n\nbool IFD::read_region_tiles_boundary(const TIFF* tiff,\n                                     const IFD* ifd,\n                                     const int64_t* location,\n                                     const int64_t location_index,\n                                     const int64_t w,\n                                     const int64_t h,\n                                     void* raster,\n                                     const cucim::io::Device\u0026 out_device,\n                                     cucim::loader::ThreadBatchDataLoader* loader)\n{\n    PROF_SCOPED_RANGE(PROF_EVENT(ifd_read_region_tiles_boundary));\n    (void)out_device;\n    // Reference code: https://github.com/libjpeg-turbo/libjpeg-turbo/blob/master/tjexample.c\n    int64_t sx = location[location_index * 2];\n    int64_t sy = location[location_index * 2 + 1];\n\n    uint8_t background_value = tiff-\u003ebackground_value_;\n    uint16_t compression_method = ifd-\u003ecompression_;\n    int jpeg_color_space = ifd-\u003ejpeg_color_space_;\n    int predictor = ifd-\u003epredictor_;\n\n    int64_t ex = sx + w - 1;\n    int64_t ey = sy + h - 1;\n\n    uint32_t width = ifd-\u003ewidth_;\n    uint32_t height = ifd-\u003eheight_;\n\n    // Memory for tile_raster would be manually allocated here, instead of using decode_libjpeg().\n    // Need to free the manually. Usually it is set to nullptr and memory is created by decode_libjpeg() by using\n    // tjAlloc() (Also need to free with tjFree() after use. See the documentation of tjAlloc() for the detail.)\n    const int pixel_size_nbytes = ifd-\u003epixel_size_nbytes();\n    auto dest_start_ptr = static_cast\u003cuint8_t*\u003e(raster);\n\n    bool is_out_of_image = (ex \u003c 0 || width \u003c= sx || ey \u003c 0 || height \u003c= sy);\n    if (is_out_of_image)\n    {\n        // Fill background color(255,255,255) and return\n        memset(dest_start_ptr, background_value, w * h * pixel_size_nbytes);\n        return true;\n    }\n    cucim::cache::ImageCache\u0026 image_cache = cucim::CuImage::cache_manager().cache();\n    cucim::cache::CacheType cache_type = image_cache.type();\n\n    uint32_t tw = ifd-\u003etile_width_;\n    uint32_t th = ifd-\u003etile_height_;\n\n    const size_t tile_raster_nbytes = tw * th * pixel_size_nbytes;\n\n    // TODO: revert this once we can get RGB data instead of RGBA\n    uint32_t samples_per_pixel = 3; // ifd-\u003esamples_per_pixel();\n\n    const void* jpegtable_data = ifd-\u003ejpegtable_.data();\n    uint32_t jpegtable_count = ifd-\u003ejpegtable_.size();\n\n    bool sx_in_range = (sx \u003e= 0 \u0026\u0026 sx \u003c width);\n    bool ex_in_range = (ex \u003e= 0 \u0026\u0026 ex \u003c width);\n    bool sy_in_range = (sy \u003e= 0 \u0026\u0026 sy \u003c height);\n    bool ey_in_range = (ey \u003e= 0 \u0026\u0026 ey \u003c height);\n\n    int64_t offset_boundary_x = (static_cast\u003cint64_t\u003e(width) - 1) / tw;\n    int64_t offset_boundary_y = (static_cast\u003cint64_t\u003e(height) - 1) / th;\n\n    int64_t offset_sx = sx / tw; // x-axis start offset for the requested region in the\n                                 // ifd tile array as grid\n\n    int64_t offset_ex = ex / tw; // x-axis end  offset for the requested region in the\n                                 // ifd tile array as grid\n\n    int64_t offset_sy = sy / th; // y-axis start offset for the requested region in the\n                                 // ifd tile array as grid\n    int64_t offset_ey = ey / th; // y-axis end offset for the requested region in the\n                                 // ifd tile array as grid\n    int64_t pixel_offset_sx = (sx % tw);\n    int64_t pixel_offset_ex = (ex % tw);\n    int64_t pixel_offset_sy = (sy % th);\n    int64_t pixel_offset_ey = (ey % th);\n    int64_t pixel_offset_boundary_x = ((width - 1) % tw);\n    int64_t pixel_offset_boundary_y = ((height - 1) % th);\n\n    // Make sure that division and modulo has same value with Python's one (e.g., making -1 / 3 == -1 instead of 0)\n    if (pixel_offset_sx \u003c 0)\n    {\n        pixel_offset_sx += tw;\n        --offset_sx;\n    }\n    if (pixel_offset_ex \u003c 0)\n    {\n        pixel_offset_ex += tw;\n        --offset_ex;\n    }\n    if (pixel_offset_sy \u003c 0)\n    {\n        pixel_offset_sy += th;\n        --offset_sy;\n    }\n    if (pixel_offset_ey \u003c 0)\n    {\n        pixel_offset_ey += th;\n        --offset_ey;\n    }\n    int64_t offset_min_x = sx_in_range ? offset_sx : 0;\n    int64_t offset_max_x = ex_in_range ? offset_ex : offset_boundary_x;\n    int64_t offset_min_y = sy_in_range ? offset_sy : 0;\n    int64_t offset_max_y = ey_in_range ? offset_ey : offset_boundary_y;\n\n    uint32_t stride_y = width / tw + !!(width % tw); // # of tiles in a row(y) in the ifd tile array as grid\n\n    int64_t start_index_y = offset_sy * stride_y;\n    int64_t start_index_min_y = offset_min_y * stride_y;\n    int64_t end_index_y = offset_ey * stride_y;\n    int64_t end_index_max_y = offset_max_y * stride_y;\n    int64_t boundary_index_y = offset_boundary_y * stride_y;\n\n\n    int tiff_file = tiff-\u003efile_handle_-\u003efd;\n    uint64_t ifd_hash_value = ifd-\u003ehash_value_;\n\n    uint32_t dest_pixel_step_y = w * samples_per_pixel;\n    uint32_t nbytes_tw = tw * samples_per_pixel;\n\n\n    // TODO: Current implementation doesn't consider endianness so need to consider later\n    // TODO: Consider tile's depth tag.\n    // TODO: update the type of variables (index, index_y) : other function uses uint32_t\n    for (int64_t index_y = start_index_y; index_y \u003c= end_index_y; index_y += stride_y)\n    {\n        uint32_t tile_pixel_offset_sy = (index_y == start_index_y) ? pixel_offset_sy : 0;\n        uint32_t tile_pixel_offset_ey = (index_y == end_index_y) ? pixel_offset_ey : (th - 1);\n        uint32_t dest_pixel_offset_len_y = tile_pixel_offset_ey - tile_pixel_offset_sy + 1;\n\n        uint32_t dest_pixel_index_x = 0;\n\n        int64_t index = index_y + offset_sx;\n        for (int64_t offset_x = offset_sx; offset_x \u003c= offset_ex; ++offset_x, ++index)\n        {\n            PROF_SCOPED_RANGE(PROF_EVENT_P(ifd_read_region_tiles_boundary_iter, index));\n            uint64_t tiledata_offset = 0;\n            uint64_t tiledata_size = 0;\n\n            // Calculate a simple hash value for the tile index\n            uint64_t index_hash = ifd_hash_value ^ (static_cast\u003cuint64_t\u003e(index) | (static_cast\u003cuint64_t\u003e(index) \u003c\u003c 32));\n\n            if (offset_x \u003e= offset_min_x \u0026\u0026 offset_x \u003c= offset_max_x \u0026\u0026 index_y \u003e= start_index_min_y \u0026\u0026\n                index_y \u003c= end_index_max_y)\n            {\n                tiledata_offset = static_cast\u003cuint64_t\u003e(ifd-\u003eimage_piece_offsets_[index]);\n                tiledata_size = static_cast\u003cuint64_t\u003e(ifd-\u003eimage_piece_bytecounts_[index]);\n            }\n\n            uint32_t tile_pixel_offset_x = (offset_x == offset_sx) ? pixel_offset_sx : 0;\n            uint32_t nbytes_tile_pixel_size_x = (offset_x == offset_ex) ?\n                                                    (pixel_offset_ex - tile_pixel_offset_x + 1) * samples_per_pixel :\n                                                    (tw - tile_pixel_offset_x) * samples_per_pixel;\n\n            uint32_t nbytes_tile_index_orig = (tile_pixel_offset_sy * tw + tile_pixel_offset_x) * samples_per_pixel;\n            uint32_t dest_pixel_index_orig = dest_pixel_index_x;\n\n            auto decode_func = [=, \u0026image_cache]() {\n                PROF_SCOPED_RANGE(PROF_EVENT_P(ifd_read_region_tiles_boundary_task, index_hash));\n                uint32_t nbytes_tile_index = nbytes_tile_index_orig;\n                uint32_t dest_pixel_index = dest_pixel_index_orig;\n\n                if (tiledata_size \u003e 0)\n                {\n                    bool copy_partial = false;\n                    uint32_t fixed_nbytes_tile_pixel_size_x = nbytes_tile_pixel_size_x;\n                    uint32_t fixed_tile_pixel_offset_ey = tile_pixel_offset_ey;\n\n                    if (offset_x == offset_boundary_x)\n                    {\n                        copy_partial = true;\n                        if (offset_x != offset_ex)\n                        {\n                            fixed_nbytes_tile_pixel_size_x =\n                                (pixel_offset_boundary_x - tile_pixel_offset_x + 1) * samples_per_pixel;\n                        }\n                        else\n                        {\n                            fixed_nbytes_tile_pixel_size_x =\n                                (std::min(pixel_offset_boundary_x, pixel_offset_ex) - tile_pixel_offset_x + 1) *\n                                samples_per_pixel;\n                        }\n                    }\n                    if (index_y == boundary_index_y)\n                    {\n                        copy_partial = true;\n                        if (index_y != end_index_y)\n                        {\n                            fixed_tile_pixel_offset_ey = pixel_offset_boundary_y;\n                        }\n                        else\n                        {\n                            fixed_tile_pixel_offset_ey = std::min(pixel_offset_boundary_y, pixel_offset_ey);\n                        }\n                    }\n\n                    uint8_t* tile_data = nullptr;\n                    std::unique_ptr\u003cuint8_t, decltype(cucim_free)*\u003e tile_raster =\n                        std::unique_ptr\u003cuint8_t, decltype(cucim_free)*\u003e(nullptr, cucim_free);\n\n                    if (loader \u0026\u0026 loader-\u003ebatch_data_processor())\n                    {\n                        switch (compression_method)\n                        {\n                        case COMPRESSION_JPEG:\n                            break;\n                        default:\n                            throw std::runtime_error(\"Unsupported compression method\");\n                        }\n                        auto value = loader-\u003ewait_for_processing(index);\n                        if (!value) // if shutdown\n                        {\n                            return;\n                        }\n\n                        tile_data = static_cast\u003cuint8_t*\u003e(value-\u003edata);\n\n                        cudaError_t cuda_status;\n                        if (copy_partial)\n                        {\n                            uint32_t fill_gap_x = nbytes_tile_pixel_size_x - fixed_nbytes_tile_pixel_size_x;\n                            // Fill original, then fill white for remaining\n                            if (fill_gap_x \u003e 0)\n                            {\n                                CUDA_ERROR(cudaMemcpy2D(\n                                    dest_start_ptr + dest_pixel_index, dest_pixel_step_y, tile_data + nbytes_tile_index,\n                                    nbytes_tw, fixed_nbytes_tile_pixel_size_x,\n                                    fixed_tile_pixel_offset_ey - tile_pixel_offset_sy + 1, cudaMemcpyDeviceToDevice));\n                                CUDA_ERROR(cudaMemset2D(dest_start_ptr + dest_pixel_index + fixed_nbytes_tile_pixel_size_x,\n                                                        dest_pixel_step_y, background_value, fill_gap_x,\n                                                        fixed_tile_pixel_offset_ey - tile_pixel_offset_sy + 1));\n                                dest_pixel_index +=\n                                    dest_pixel_step_y * (fixed_tile_pixel_offset_ey - tile_pixel_offset_sy + 1);\n                            }\n                            else\n                            {\n                                CUDA_ERROR(cudaMemcpy2D(\n                                    dest_start_ptr + dest_pixel_index, dest_pixel_step_y, tile_data + nbytes_tile_index,\n                                    nbytes_tw, fixed_nbytes_tile_pixel_size_x,\n                                    fixed_tile_pixel_offset_ey - tile_pixel_offset_sy + 1, cudaMemcpyDeviceToDevice));\n                                dest_pixel_index +=\n                                    dest_pixel_step_y * (fixed_tile_pixel_offset_ey - tile_pixel_offset_sy + 1);\n                            }\n\n                            CUDA_ERROR(cudaMemset2D(dest_start_ptr + dest_pixel_index, dest_pixel_step_y,\n                                                    background_value, nbytes_tile_pixel_size_x,\n                                                    tile_pixel_offset_ey - (fixed_tile_pixel_offset_ey + 1) + 1));\n                        }\n                        else\n                        {\n                            CUDA_ERROR(cudaMemcpy2D(dest_start_ptr + dest_pixel_index, dest_pixel_step_y,\n                                                    tile_data + nbytes_tile_index, nbytes_tw, nbytes_tile_pixel_size_x,\n                                                    tile_pixel_offset_ey - tile_pixel_offset_sy + 1,\n                                                    cudaMemcpyDeviceToDevice));\n                        }\n                    }\n                    else\n                    {\n                        auto key = image_cache.create_key(ifd_hash_value, index);\n                        image_cache.lock(index_hash);\n                        auto value = image_cache.find(key);\n                        if (value)\n                        {\n                            image_cache.unlock(index_hash);\n                            tile_data = static_cast\u003cuint8_t*\u003e(value-\u003edata);\n                        }\n                        else\n                        {\n                            // Lifetime of tile_data is same with `value`\n                            // : do not access this data when `value` is not accessible.\n                            if (cache_type != cucim::cache::CacheType::kNoCache)\n                            {\n                                tile_data = static_cast\u003cuint8_t*\u003e(image_cache.allocate(tile_raster_nbytes));\n                            }\n                            else\n                            {\n                                // Allocate temporary buffer for tile data\n                                tile_raster = std::unique_ptr\u003cuint8_t, decltype(cucim_free)*\u003e(\n                                    reinterpret_cast\u003cuint8_t*\u003e(cucim_malloc(tile_raster_nbytes)), cucim_free);\n                                tile_data = tile_raster.get();\n                            }\n                            {\n                                PROF_SCOPED_RANGE(PROF_EVENT(ifd_decompression));\n                                switch (compression_method)\n                                {\n                                case COMPRESSION_NONE:\n                                    cuslide::raw::decode_raw(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                             \u0026tile_data, tile_raster_nbytes, out_device);\n                                    break;\n                                case COMPRESSION_JPEG:\n                                    cuslide::jpeg::decode_libjpeg(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                                  jpegtable_data, jpegtable_count, \u0026tile_data,\n                                                                  out_device, jpeg_color_space);\n                                    break;\n                                case COMPRESSION_ADOBE_DEFLATE:\n                                case COMPRESSION_DEFLATE:\n                                    cuslide::deflate::decode_deflate(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                                     \u0026tile_data, tile_raster_nbytes, out_device);\n                                    break;\n                                case cuslide::jpeg2k::kAperioJpeg2kYCbCr: // 33003\n                                    cuslide::jpeg2k::decode_libopenjpeg(tiff_file, nullptr, tiledata_offset,\n                                                                        tiledata_size, \u0026tile_data, tile_raster_nbytes,\n                                                                        out_device, cuslide::jpeg2k::ColorSpace::kSYCC);\n                                    break;\n                                case cuslide::jpeg2k::kAperioJpeg2kRGB: // 33005\n                                    cuslide::jpeg2k::decode_libopenjpeg(tiff_file, nullptr, tiledata_offset,\n                                                                        tiledata_size, \u0026tile_data, tile_raster_nbytes,\n                                                                        out_device, cuslide::jpeg2k::ColorSpace::kRGB);\n                                    break;\n                                case COMPRESSION_LZW:\n                                    cuslide::lzw::decode_lzw(tiff_file, nullptr, tiledata_offset, tiledata_size,\n                                                             \u0026tile_data, tile_raster_nbytes, out_device);\n                                    // Apply unpredictor\n                                    //   1: none, 2: horizontal differencing, 3: floating point predictor\n                                    //   https://www.adobe.io/content/dam/udp/en/open/standards/tiff/TIFF6.pdf\n                                    if (predictor == 2)\n                                    {\n                                        cuslide::lzw::horAcc8(tile_data, tile_raster_nbytes, nbytes_tw);\n                                    }\n                                    break;\n                                default:\n                                    throw std::runtime_error(\"Unsupported compression method\");\n                                }\n                            }\n                            value = image_cache.create_value(tile_data, tile_raster_nbytes);\n                            image_cache.insert(key, value);\n                            image_cache.unlock(index_hash);\n                        }\n                        if (copy_partial)\n                        {\n                            uint32_t fill_gap_x = nbytes_tile_pixel_size_x - fixed_nbytes_tile_pixel_size_x;\n                            // Fill original, then fill white for remaining\n                            if (fill_gap_x \u003e 0)\n                            {\n                                for (uint32_t ty = tile_pixel_offset_sy; ty \u003c= fixed_tile_pixel_offset_ey;\n                                     ++ty, dest_pixel_index += dest_pixel_step_y, nbytes_tile_index += nbytes_tw)\n                                {\n                                    memcpy(dest_start_ptr + dest_pixel_index, tile_data + nbytes_tile_index,\n                                           fixed_nbytes_tile_pixel_size_x);\n                                    memset(dest_start_ptr + dest_pixel_index + fixed_nbytes_tile_pixel_size_x,\n                                           background_value, fill_gap_x);\n                                }\n                            }\n                            else\n                            {\n                                for (uint32_t ty = tile_pixel_offset_sy; ty \u003c= fixed_tile_pixel_offset_ey;\n                                     ++ty, dest_pixel_index += dest_pixel_step_y, nbytes_tile_index += nbytes_tw)\n                                {\n                                    memcpy(dest_start_ptr + dest_pixel_index, tile_data + nbytes_tile_index,\n                                           fixed_nbytes_tile_pixel_size_x);\n                                }\n                            }\n\n                            for (uint32_t ty = fixed_tile_pixel_offset_ey + 1; ty \u003c= tile_pixel_offset_ey;\n                                 ++ty, dest_pixel_index += dest_pixel_step_y)\n                            {\n                                memset(dest_start_ptr + dest_pixel_index, background_value, nbytes_tile_pixel_size_x);\n                            }\n                        }\n                        else\n                        {\n                            for (uint32_t ty = tile_pixel_offset_sy; ty \u003c= tile_pixel_offset_ey;\n                                 ++ty, dest_pixel_index += dest_pixel_step_y, nbytes_tile_index += nbytes_tw)\n                            {\n                                memcpy(dest_start_ptr + dest_pixel_index, tile_data + nbytes_tile_index,\n                                       nbytes_tile_pixel_size_x);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n\n                    if (out_device.type() == cucim::io::DeviceType::kCPU)\n                    {\n                        for (uint32_t ty = tile_pixel_offset_sy; ty \u003c= tile_pixel_offset_ey;\n                             ++ty, dest_pixel_index += dest_pixel_step_y, nbytes_tile_index += nbytes_tw)\n                        {\n                            // Set (255,255,255)\n                            memset(dest_start_ptr + dest_pixel_index, background_value, nbytes_tile_pixel_size_x);\n                        }\n                    }\n                    else\n                    {\n                        cudaError_t cuda_status;\n                        CUDA_ERROR(cudaMemset2D(dest_start_ptr + dest_pixel_index, dest_pixel_step_y, background_value,\n                                                nbytes_tile_pixel_size_x, tile_pixel_offset_ey - tile_pixel_offset_sy));\n                    }\n                }\n            };\n\n            if (loader \u0026\u0026 *loader)\n            {\n                loader-\u003eenqueue(std::move(decode_func),\n                                cucim::loader::TileInfo{ location_index, index, tiledata_offset, tiledata_size });\n            }\n            else\n            {\n                decode_func();\n            }\n\n            dest_pixel_index_x += nbytes_tile_pixel_size_x;\n        }\n        dest_start_ptr += dest_pixel_step_y * dest_pixel_offset_len_y;\n    }\n    return true;\n}\n\n} // namespace cuslide::tiff\n\n\n// Hidden methods for benchmarking.\n\n#include \u003cfmt/format.h\u003e\n#include \u003clanginfo.h\u003e\n#include \u003ciostream\u003e\n#include \u003cfstream\u003e\n\nnamespace cuslide::tiff\n{\nvoid IFD::write_offsets_(const char* file_path)\n{\n    std::ofstream offsets(fmt::format(\"{}.offsets\", file_path), std::ios::out | std::ios::binary | std::ios::trunc);\n    std::ofstream bytecounts(fmt::format(\"{}.bytecounts\", file_path), std::ios::out | std::ios::binary | std::ios::trunc);\n\n    offsets.write(reinterpret_cast\u003cchar*\u003e(\u0026image_piece_count_), sizeof(image_piece_count_));\n    bytecounts.write(reinterpret_cast\u003cchar*\u003e(\u0026image_piece_count_), sizeof(image_piece_count_));\n    for (uint32_t i = 0; i \u003c image_piece_count_; i++)\n    {\n        offsets.write(reinterpret_cast\u003cchar*\u003e(\u0026image_piece_offsets_[i]), sizeof(image_piece_offsets_[i]));\n        bytecounts.write(reinterpret_cast\u003cchar*\u003e(\u0026image_piece_bytecounts_[i]), sizeof(image_piece_bytecounts_[i]));\n    }\n    bytecounts.close();\n    offsets.close();\n}\n\n} // namespace cuslide::tiff\n",
        "name": "ifd.cpp",
        "path": "cpp/plugins/cucim.kit.cuslide/src/cuslide/tiff/ifd.cpp",
        "url": "/github.com/rapidsai/cucim/-/blob/cpp/plugins/cucim.kit.cuslide/src/cuslide/tiff/ifd.cpp"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              10,
              18
            ]
          ],
          "preview": "    //    TIFFPrintDirectory(tif, stdout, TIFFPRINT_STRIPS);"
        }
      ],
      "repository": {
        "name": "github.com/rapidsai/cucim",
        "url": "/github.com/rapidsai/cucim"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 72,
  "ElapsedMilliseconds": 4233,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
