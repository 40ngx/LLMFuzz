{
    "TIFFWriteScanline": [
        "### Core API Usage Summary for `TIFFWriteScanline`\n\n#### **API Functionality**\n- **Primary Purpose**: Writes a single scanline of image data to an open TIFF file.\n- **Operation**: Encodes pixel data according to TIFF tag configurations (compression, photometric interpretation, planar configuration).\n\n#### **Typical Usage**\n- **Loop Structure**: Iterate over each row of the image, preparing/packing pixel data for the scanline.\n- **Data Preparation**: Convert source data to match TIFF's expected format (e.g., RGB reordering, bit-depth adjustments).\n- **Multi-Page Support**: Used in multi-directory TIFFs (e.g., animations or multi-layer images) by writing directories sequentially.\n\n#### **Key Parameters**\n1. **`TIFF *tif`**: Handle to an open TIFF file (from `TIFFOpen`).\n2. **`void *buf`**: Buffer containing scanline pixel data.\n3. **`uint32 row`**: Row index (0-based) to write.\n4. **`tsample_t sample`**: Sample number (0 for contiguous data, used in planar configurations).\n\n#### **Return Values**\n- **Success**: Returns `1`.\n- **Failure**: Returns `-1` (e.g., invalid parameters, I/O errors).\n\n#### **Error Handling**\n- **Immediate Checks**: Validate return value after each call.\n  ```cpp\n  if (TIFFWriteScanline(tif, buf, row, 0) < 0) {\n      // Handle error: close TIFF, free resources\n  }\n  ```\n- **Resource Cleanup**: Ensure buffers and TIFF handles are released on failure.\n\n#### **Best Practices**\n1. **Tag Configuration**: Set critical tags **before** writing:\n   ```cpp\n   TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width);\n   TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, channels);\n   TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_LZW);\n   ```\n2. **Data Alignment**: Ensure buffer stride matches TIFF's expected layout (e.g., RGB vs. BGR).\n3. **Memory Management**: Use `_TIFFmalloc`/`_TIFFfree` for scanline buffers to avoid leaks.\n4. **Vertical Flip Handling**: Adjust row order if source data is bottom-to-top:\n   ```cpp\n   for (int y = height-1; y >= 0; y--) {\n       TIFFWriteScanline(tif, data + y*stride, height-y-1, 0);\n   }\n   ```\n5. **Multi-Sample Data**: For planar formats, specify the sample index in the 4th parameter.\n\n---\n\n### Example Usage Pattern\n```cpp\nTIFF *tif = TIFFOpen(\"output.tif\", \"w\");\nTIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width);\nTIFFSetField(tif, TIFFTAG_IMAGELENGTH, height);\nTIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, 3);\nTIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 8);\nTIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB);\n\nuint8_t *scanline = (uint8_t*)_TIFFmalloc(width * 3);\nfor (uint32_t y = 0; y < height; y++) {\n    // Prepare RGB scanline\n    for (uint32_t x = 0; x < width; x++) {\n        scanline[x*3 + 0] = r_channel[x][y]; // R\n        scanline[x*3 + 1] = g_channel[x][y]; // G\n        scanline[x*3 + 2] = b_channel[x][y]; // B\n    }\n    if (TIFFWriteScanline(tif, scanline, y, 0) < 0) {\n        _TIFFfree(scanline);\n        TIFFClose(tif);\n        return;\n    }\n}\n_TIFFfree(scanline);\nTIFFClose(tif);\n```"
    ]
}