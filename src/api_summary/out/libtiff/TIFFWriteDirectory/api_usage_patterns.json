{
    "TIFFWriteDirectory": [
        "### Core API Usage Summary for `TIFFWriteDirectory`\n\n- **Functionality**:  \n  Writes the current TIFF directory to the file, finalizing metadata and raster data. Essential for multi-directory (multi-page/multi-image) TIFF files.\n\n- **Typical Usage**:  \n  Called after configuring tags (e.g., `TIFFSetField`) and raster data (e.g., `TIFFWriteScanline`). Used to create new pages or layers in multi-image files.\n\n- **Key Parameters**:  \n  - `TIFF *tif`: Handle to the open TIFF file.\n\n- **Return Values**:  \n  - Returns `1` on success, `0` on failure. Errors often arise from invalid tag configurations or I/O issues.\n\n- **Error Handling**:  \n  - Pre-check validity with `TIFFWriteCheck(tif, ...)` to avoid partial writes.\n  - On failure, reset to the original directory offset (e.g., `TIFFSetSubDirectory`) to maintain file integrity.\n\n- **Best Practices**:  \n  1. **Order of Operations**:  \n     - Use `TIFFCreateDirectory` before configuring a new directory.\n     - Set all required tags (dimensions, compression, photometric) before calling `TIFFWriteDirectory`.\n  2. **Multi-Page Workflow**:  \n     - For each image/page, set tags, write raster data, then call `TIFFWriteDirectory`.\n  3. **Error Recovery**:  \n     - Use `TIFFCurrentDirOffset` to save the directory offset before modifications for rollback.\n  4. **Efficiency**:  \n     - Reuse the TIFF handle across directories to avoid reopening files.\n\n### Example Sequence:\n```c\nTIFF *tif = TIFFOpen(\"output.tif\", \"w\");\n// Setup first directory\nTIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width);\n... // other tags\nTIFFWriteDirectory(tif); // Write directory 0\n\n// Setup second directory\nTIFFCreateDirectory(tif);\nTIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width2);\n...\nTIFFWriteDirectory(tif); // Write directory 1\nTIFFClose(tif);\n```"
    ]
}